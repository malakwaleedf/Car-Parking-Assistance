
car_parking.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000035ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000126  00800060  000035ac  00003640  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800186  00800186  00003766  2**0
                  ALLOC
  3 .stab         00002af0  00000000  00000000  00003768  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f67  00000000  00000000  00006258  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  000071bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  0000737f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00007593  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00009ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000b073  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000c380  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000c560  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000c867  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d281  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 38       	cpi	r26, 0x86	; 134
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e8       	ldi	r26, 0x86	; 134
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <main>
      8a:	0c 94 d4 1a 	jmp	0x35a8	; 0x35a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e7       	ldi	r26, 0x7B	; 123
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e7       	ldi	r24, 0x7B	; 123
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 74 1a 	jmp	0x34e8	; 0x34e8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e7       	ldi	r22, 0x7B	; 123
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 64 1a 	jmp	0x34c8	; 0x34c8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 1c 07 	call	0xe38	; 0xe38 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 80 1a 	jmp	0x3500	; 0x3500 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 61 1a 	jmp	0x34c2	; 0x34c2 <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 68 1a 	jmp	0x34d0	; 0x34d0 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 a4 06 	call	0xd48	; 0xd48 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 84 1a 	jmp	0x3508	; 0x3508 <__epilogue_restores__+0x20>

00000a0e <__floatunsisf>:
     a0e:	a8 e0       	ldi	r26, 0x08	; 8
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	ed e0       	ldi	r30, 0x0D	; 13
     a14:	f5 e0       	ldi	r31, 0x05	; 5
     a16:	0c 94 60 1a 	jmp	0x34c0	; 0x34c0 <__prologue_saves__+0x10>
     a1a:	7b 01       	movw	r14, r22
     a1c:	8c 01       	movw	r16, r24
     a1e:	61 15       	cp	r22, r1
     a20:	71 05       	cpc	r23, r1
     a22:	81 05       	cpc	r24, r1
     a24:	91 05       	cpc	r25, r1
     a26:	19 f4       	brne	.+6      	; 0xa2e <__floatunsisf+0x20>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	89 83       	std	Y+1, r24	; 0x01
     a2c:	60 c0       	rjmp	.+192    	; 0xaee <__floatunsisf+0xe0>
     a2e:	83 e0       	ldi	r24, 0x03	; 3
     a30:	89 83       	std	Y+1, r24	; 0x01
     a32:	8e e1       	ldi	r24, 0x1E	; 30
     a34:	c8 2e       	mov	r12, r24
     a36:	d1 2c       	mov	r13, r1
     a38:	dc 82       	std	Y+4, r13	; 0x04
     a3a:	cb 82       	std	Y+3, r12	; 0x03
     a3c:	ed 82       	std	Y+5, r14	; 0x05
     a3e:	fe 82       	std	Y+6, r15	; 0x06
     a40:	0f 83       	std	Y+7, r16	; 0x07
     a42:	18 87       	std	Y+8, r17	; 0x08
     a44:	c8 01       	movw	r24, r16
     a46:	b7 01       	movw	r22, r14
     a48:	0e 94 80 05 	call	0xb00	; 0xb00 <__clzsi2>
     a4c:	fc 01       	movw	r30, r24
     a4e:	31 97       	sbiw	r30, 0x01	; 1
     a50:	f7 ff       	sbrs	r31, 7
     a52:	3b c0       	rjmp	.+118    	; 0xaca <__floatunsisf+0xbc>
     a54:	22 27       	eor	r18, r18
     a56:	33 27       	eor	r19, r19
     a58:	2e 1b       	sub	r18, r30
     a5a:	3f 0b       	sbc	r19, r31
     a5c:	57 01       	movw	r10, r14
     a5e:	68 01       	movw	r12, r16
     a60:	02 2e       	mov	r0, r18
     a62:	04 c0       	rjmp	.+8      	; 0xa6c <__floatunsisf+0x5e>
     a64:	d6 94       	lsr	r13
     a66:	c7 94       	ror	r12
     a68:	b7 94       	ror	r11
     a6a:	a7 94       	ror	r10
     a6c:	0a 94       	dec	r0
     a6e:	d2 f7       	brpl	.-12     	; 0xa64 <__floatunsisf+0x56>
     a70:	40 e0       	ldi	r20, 0x00	; 0
     a72:	50 e0       	ldi	r21, 0x00	; 0
     a74:	60 e0       	ldi	r22, 0x00	; 0
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	a0 e0       	ldi	r26, 0x00	; 0
     a7e:	b0 e0       	ldi	r27, 0x00	; 0
     a80:	04 c0       	rjmp	.+8      	; 0xa8a <__floatunsisf+0x7c>
     a82:	88 0f       	add	r24, r24
     a84:	99 1f       	adc	r25, r25
     a86:	aa 1f       	adc	r26, r26
     a88:	bb 1f       	adc	r27, r27
     a8a:	2a 95       	dec	r18
     a8c:	d2 f7       	brpl	.-12     	; 0xa82 <__floatunsisf+0x74>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	a1 09       	sbc	r26, r1
     a92:	b1 09       	sbc	r27, r1
     a94:	8e 21       	and	r24, r14
     a96:	9f 21       	and	r25, r15
     a98:	a0 23       	and	r26, r16
     a9a:	b1 23       	and	r27, r17
     a9c:	00 97       	sbiw	r24, 0x00	; 0
     a9e:	a1 05       	cpc	r26, r1
     aa0:	b1 05       	cpc	r27, r1
     aa2:	21 f0       	breq	.+8      	; 0xaac <__floatunsisf+0x9e>
     aa4:	41 e0       	ldi	r20, 0x01	; 1
     aa6:	50 e0       	ldi	r21, 0x00	; 0
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	4a 29       	or	r20, r10
     aae:	5b 29       	or	r21, r11
     ab0:	6c 29       	or	r22, r12
     ab2:	7d 29       	or	r23, r13
     ab4:	4d 83       	std	Y+5, r20	; 0x05
     ab6:	5e 83       	std	Y+6, r21	; 0x06
     ab8:	6f 83       	std	Y+7, r22	; 0x07
     aba:	78 87       	std	Y+8, r23	; 0x08
     abc:	8e e1       	ldi	r24, 0x1E	; 30
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	8e 1b       	sub	r24, r30
     ac2:	9f 0b       	sbc	r25, r31
     ac4:	9c 83       	std	Y+4, r25	; 0x04
     ac6:	8b 83       	std	Y+3, r24	; 0x03
     ac8:	12 c0       	rjmp	.+36     	; 0xaee <__floatunsisf+0xe0>
     aca:	30 97       	sbiw	r30, 0x00	; 0
     acc:	81 f0       	breq	.+32     	; 0xaee <__floatunsisf+0xe0>
     ace:	0e 2e       	mov	r0, r30
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0xcc>
     ad2:	ee 0c       	add	r14, r14
     ad4:	ff 1c       	adc	r15, r15
     ad6:	00 1f       	adc	r16, r16
     ad8:	11 1f       	adc	r17, r17
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0xc4>
     ade:	ed 82       	std	Y+5, r14	; 0x05
     ae0:	fe 82       	std	Y+6, r15	; 0x06
     ae2:	0f 83       	std	Y+7, r16	; 0x07
     ae4:	18 87       	std	Y+8, r17	; 0x08
     ae6:	ce 1a       	sub	r12, r30
     ae8:	df 0a       	sbc	r13, r31
     aea:	dc 82       	std	Y+4, r13	; 0x04
     aec:	cb 82       	std	Y+3, r12	; 0x03
     aee:	1a 82       	std	Y+2, r1	; 0x02
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__pack_f>
     af8:	28 96       	adiw	r28, 0x08	; 8
     afa:	ea e0       	ldi	r30, 0x0A	; 10
     afc:	0c 94 7c 1a 	jmp	0x34f8	; 0x34f8 <__epilogue_restores__+0x10>

00000b00 <__clzsi2>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	7b 01       	movw	r14, r22
     b0a:	8c 01       	movw	r16, r24
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	e8 16       	cp	r14, r24
     b10:	80 e0       	ldi	r24, 0x00	; 0
     b12:	f8 06       	cpc	r15, r24
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 07       	cpc	r16, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	18 07       	cpc	r17, r24
     b1c:	88 f4       	brcc	.+34     	; 0xb40 <__clzsi2+0x40>
     b1e:	8f ef       	ldi	r24, 0xFF	; 255
     b20:	e8 16       	cp	r14, r24
     b22:	f1 04       	cpc	r15, r1
     b24:	01 05       	cpc	r16, r1
     b26:	11 05       	cpc	r17, r1
     b28:	31 f0       	breq	.+12     	; 0xb36 <__clzsi2+0x36>
     b2a:	28 f0       	brcs	.+10     	; 0xb36 <__clzsi2+0x36>
     b2c:	88 e0       	ldi	r24, 0x08	; 8
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	a0 e0       	ldi	r26, 0x00	; 0
     b32:	b0 e0       	ldi	r27, 0x00	; 0
     b34:	17 c0       	rjmp	.+46     	; 0xb64 <__clzsi2+0x64>
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	12 c0       	rjmp	.+36     	; 0xb64 <__clzsi2+0x64>
     b40:	80 e0       	ldi	r24, 0x00	; 0
     b42:	e8 16       	cp	r14, r24
     b44:	80 e0       	ldi	r24, 0x00	; 0
     b46:	f8 06       	cpc	r15, r24
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	08 07       	cpc	r16, r24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	18 07       	cpc	r17, r24
     b50:	28 f0       	brcs	.+10     	; 0xb5c <__clzsi2+0x5c>
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	a0 e0       	ldi	r26, 0x00	; 0
     b58:	b0 e0       	ldi	r27, 0x00	; 0
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <__clzsi2+0x64>
     b5c:	80 e1       	ldi	r24, 0x10	; 16
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	20 e2       	ldi	r18, 0x20	; 32
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	40 e0       	ldi	r20, 0x00	; 0
     b6a:	50 e0       	ldi	r21, 0x00	; 0
     b6c:	28 1b       	sub	r18, r24
     b6e:	39 0b       	sbc	r19, r25
     b70:	4a 0b       	sbc	r20, r26
     b72:	5b 0b       	sbc	r21, r27
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__clzsi2+0x7e>
     b76:	16 95       	lsr	r17
     b78:	07 95       	ror	r16
     b7a:	f7 94       	ror	r15
     b7c:	e7 94       	ror	r14
     b7e:	8a 95       	dec	r24
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__clzsi2+0x76>
     b82:	f7 01       	movw	r30, r14
     b84:	ed 57       	subi	r30, 0x7D	; 125
     b86:	ff 4f       	sbci	r31, 0xFF	; 255
     b88:	80 81       	ld	r24, Z
     b8a:	28 1b       	sub	r18, r24
     b8c:	31 09       	sbc	r19, r1
     b8e:	41 09       	sbc	r20, r1
     b90:	51 09       	sbc	r21, r1
     b92:	c9 01       	movw	r24, r18
     b94:	1f 91       	pop	r17
     b96:	0f 91       	pop	r16
     b98:	ff 90       	pop	r15
     b9a:	ef 90       	pop	r14
     b9c:	08 95       	ret

00000b9e <__pack_f>:
     b9e:	df 92       	push	r13
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	fc 01       	movw	r30, r24
     baa:	e4 80       	ldd	r14, Z+4	; 0x04
     bac:	f5 80       	ldd	r15, Z+5	; 0x05
     bae:	06 81       	ldd	r16, Z+6	; 0x06
     bb0:	17 81       	ldd	r17, Z+7	; 0x07
     bb2:	d1 80       	ldd	r13, Z+1	; 0x01
     bb4:	80 81       	ld	r24, Z
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	48 f4       	brcc	.+18     	; 0xbcc <__pack_f+0x2e>
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e1       	ldi	r26, 0x10	; 16
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e8 2a       	or	r14, r24
     bc4:	f9 2a       	or	r15, r25
     bc6:	0a 2b       	or	r16, r26
     bc8:	1b 2b       	or	r17, r27
     bca:	a5 c0       	rjmp	.+330    	; 0xd16 <__pack_f+0x178>
     bcc:	84 30       	cpi	r24, 0x04	; 4
     bce:	09 f4       	brne	.+2      	; 0xbd2 <__pack_f+0x34>
     bd0:	9f c0       	rjmp	.+318    	; 0xd10 <__pack_f+0x172>
     bd2:	82 30       	cpi	r24, 0x02	; 2
     bd4:	21 f4       	brne	.+8      	; 0xbde <__pack_f+0x40>
     bd6:	ee 24       	eor	r14, r14
     bd8:	ff 24       	eor	r15, r15
     bda:	87 01       	movw	r16, r14
     bdc:	05 c0       	rjmp	.+10     	; 0xbe8 <__pack_f+0x4a>
     bde:	e1 14       	cp	r14, r1
     be0:	f1 04       	cpc	r15, r1
     be2:	01 05       	cpc	r16, r1
     be4:	11 05       	cpc	r17, r1
     be6:	19 f4       	brne	.+6      	; 0xbee <__pack_f+0x50>
     be8:	e0 e0       	ldi	r30, 0x00	; 0
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	96 c0       	rjmp	.+300    	; 0xd1a <__pack_f+0x17c>
     bee:	62 81       	ldd	r22, Z+2	; 0x02
     bf0:	73 81       	ldd	r23, Z+3	; 0x03
     bf2:	9f ef       	ldi	r25, 0xFF	; 255
     bf4:	62 38       	cpi	r22, 0x82	; 130
     bf6:	79 07       	cpc	r23, r25
     bf8:	0c f0       	brlt	.+2      	; 0xbfc <__pack_f+0x5e>
     bfa:	5b c0       	rjmp	.+182    	; 0xcb2 <__pack_f+0x114>
     bfc:	22 e8       	ldi	r18, 0x82	; 130
     bfe:	3f ef       	ldi	r19, 0xFF	; 255
     c00:	26 1b       	sub	r18, r22
     c02:	37 0b       	sbc	r19, r23
     c04:	2a 31       	cpi	r18, 0x1A	; 26
     c06:	31 05       	cpc	r19, r1
     c08:	2c f0       	brlt	.+10     	; 0xc14 <__pack_f+0x76>
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	40 e0       	ldi	r20, 0x00	; 0
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	2a c0       	rjmp	.+84     	; 0xc68 <__pack_f+0xca>
     c14:	b8 01       	movw	r22, r16
     c16:	a7 01       	movw	r20, r14
     c18:	02 2e       	mov	r0, r18
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__pack_f+0x86>
     c1c:	76 95       	lsr	r23
     c1e:	67 95       	ror	r22
     c20:	57 95       	ror	r21
     c22:	47 95       	ror	r20
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <__pack_f+0x7e>
     c28:	81 e0       	ldi	r24, 0x01	; 1
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e0       	ldi	r26, 0x00	; 0
     c2e:	b0 e0       	ldi	r27, 0x00	; 0
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <__pack_f+0x9c>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	aa 1f       	adc	r26, r26
     c38:	bb 1f       	adc	r27, r27
     c3a:	2a 95       	dec	r18
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <__pack_f+0x94>
     c3e:	01 97       	sbiw	r24, 0x01	; 1
     c40:	a1 09       	sbc	r26, r1
     c42:	b1 09       	sbc	r27, r1
     c44:	8e 21       	and	r24, r14
     c46:	9f 21       	and	r25, r15
     c48:	a0 23       	and	r26, r16
     c4a:	b1 23       	and	r27, r17
     c4c:	00 97       	sbiw	r24, 0x00	; 0
     c4e:	a1 05       	cpc	r26, r1
     c50:	b1 05       	cpc	r27, r1
     c52:	21 f0       	breq	.+8      	; 0xc5c <__pack_f+0xbe>
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a0 e0       	ldi	r26, 0x00	; 0
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	9a 01       	movw	r18, r20
     c5e:	ab 01       	movw	r20, r22
     c60:	28 2b       	or	r18, r24
     c62:	39 2b       	or	r19, r25
     c64:	4a 2b       	or	r20, r26
     c66:	5b 2b       	or	r21, r27
     c68:	da 01       	movw	r26, r20
     c6a:	c9 01       	movw	r24, r18
     c6c:	8f 77       	andi	r24, 0x7F	; 127
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	a0 70       	andi	r26, 0x00	; 0
     c72:	b0 70       	andi	r27, 0x00	; 0
     c74:	80 34       	cpi	r24, 0x40	; 64
     c76:	91 05       	cpc	r25, r1
     c78:	a1 05       	cpc	r26, r1
     c7a:	b1 05       	cpc	r27, r1
     c7c:	39 f4       	brne	.+14     	; 0xc8c <__pack_f+0xee>
     c7e:	27 ff       	sbrs	r18, 7
     c80:	09 c0       	rjmp	.+18     	; 0xc94 <__pack_f+0xf6>
     c82:	20 5c       	subi	r18, 0xC0	; 192
     c84:	3f 4f       	sbci	r19, 0xFF	; 255
     c86:	4f 4f       	sbci	r20, 0xFF	; 255
     c88:	5f 4f       	sbci	r21, 0xFF	; 255
     c8a:	04 c0       	rjmp	.+8      	; 0xc94 <__pack_f+0xf6>
     c8c:	21 5c       	subi	r18, 0xC1	; 193
     c8e:	3f 4f       	sbci	r19, 0xFF	; 255
     c90:	4f 4f       	sbci	r20, 0xFF	; 255
     c92:	5f 4f       	sbci	r21, 0xFF	; 255
     c94:	e0 e0       	ldi	r30, 0x00	; 0
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	20 30       	cpi	r18, 0x00	; 0
     c9a:	a0 e0       	ldi	r26, 0x00	; 0
     c9c:	3a 07       	cpc	r19, r26
     c9e:	a0 e0       	ldi	r26, 0x00	; 0
     ca0:	4a 07       	cpc	r20, r26
     ca2:	a0 e4       	ldi	r26, 0x40	; 64
     ca4:	5a 07       	cpc	r21, r26
     ca6:	10 f0       	brcs	.+4      	; 0xcac <__pack_f+0x10e>
     ca8:	e1 e0       	ldi	r30, 0x01	; 1
     caa:	f0 e0       	ldi	r31, 0x00	; 0
     cac:	79 01       	movw	r14, r18
     cae:	8a 01       	movw	r16, r20
     cb0:	27 c0       	rjmp	.+78     	; 0xd00 <__pack_f+0x162>
     cb2:	60 38       	cpi	r22, 0x80	; 128
     cb4:	71 05       	cpc	r23, r1
     cb6:	64 f5       	brge	.+88     	; 0xd10 <__pack_f+0x172>
     cb8:	fb 01       	movw	r30, r22
     cba:	e1 58       	subi	r30, 0x81	; 129
     cbc:	ff 4f       	sbci	r31, 0xFF	; 255
     cbe:	d8 01       	movw	r26, r16
     cc0:	c7 01       	movw	r24, r14
     cc2:	8f 77       	andi	r24, 0x7F	; 127
     cc4:	90 70       	andi	r25, 0x00	; 0
     cc6:	a0 70       	andi	r26, 0x00	; 0
     cc8:	b0 70       	andi	r27, 0x00	; 0
     cca:	80 34       	cpi	r24, 0x40	; 64
     ccc:	91 05       	cpc	r25, r1
     cce:	a1 05       	cpc	r26, r1
     cd0:	b1 05       	cpc	r27, r1
     cd2:	39 f4       	brne	.+14     	; 0xce2 <__pack_f+0x144>
     cd4:	e7 fe       	sbrs	r14, 7
     cd6:	0d c0       	rjmp	.+26     	; 0xcf2 <__pack_f+0x154>
     cd8:	80 e4       	ldi	r24, 0x40	; 64
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	04 c0       	rjmp	.+8      	; 0xcea <__pack_f+0x14c>
     ce2:	8f e3       	ldi	r24, 0x3F	; 63
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e0       	ldi	r26, 0x00	; 0
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e8 0e       	add	r14, r24
     cec:	f9 1e       	adc	r15, r25
     cee:	0a 1f       	adc	r16, r26
     cf0:	1b 1f       	adc	r17, r27
     cf2:	17 ff       	sbrs	r17, 7
     cf4:	05 c0       	rjmp	.+10     	; 0xd00 <__pack_f+0x162>
     cf6:	16 95       	lsr	r17
     cf8:	07 95       	ror	r16
     cfa:	f7 94       	ror	r15
     cfc:	e7 94       	ror	r14
     cfe:	31 96       	adiw	r30, 0x01	; 1
     d00:	87 e0       	ldi	r24, 0x07	; 7
     d02:	16 95       	lsr	r17
     d04:	07 95       	ror	r16
     d06:	f7 94       	ror	r15
     d08:	e7 94       	ror	r14
     d0a:	8a 95       	dec	r24
     d0c:	d1 f7       	brne	.-12     	; 0xd02 <__pack_f+0x164>
     d0e:	05 c0       	rjmp	.+10     	; 0xd1a <__pack_f+0x17c>
     d10:	ee 24       	eor	r14, r14
     d12:	ff 24       	eor	r15, r15
     d14:	87 01       	movw	r16, r14
     d16:	ef ef       	ldi	r30, 0xFF	; 255
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	6e 2f       	mov	r22, r30
     d1c:	67 95       	ror	r22
     d1e:	66 27       	eor	r22, r22
     d20:	67 95       	ror	r22
     d22:	90 2f       	mov	r25, r16
     d24:	9f 77       	andi	r25, 0x7F	; 127
     d26:	d7 94       	ror	r13
     d28:	dd 24       	eor	r13, r13
     d2a:	d7 94       	ror	r13
     d2c:	8e 2f       	mov	r24, r30
     d2e:	86 95       	lsr	r24
     d30:	49 2f       	mov	r20, r25
     d32:	46 2b       	or	r20, r22
     d34:	58 2f       	mov	r21, r24
     d36:	5d 29       	or	r21, r13
     d38:	b7 01       	movw	r22, r14
     d3a:	ca 01       	movw	r24, r20
     d3c:	1f 91       	pop	r17
     d3e:	0f 91       	pop	r16
     d40:	ff 90       	pop	r15
     d42:	ef 90       	pop	r14
     d44:	df 90       	pop	r13
     d46:	08 95       	ret

00000d48 <__unpack_f>:
     d48:	fc 01       	movw	r30, r24
     d4a:	db 01       	movw	r26, r22
     d4c:	40 81       	ld	r20, Z
     d4e:	51 81       	ldd	r21, Z+1	; 0x01
     d50:	22 81       	ldd	r18, Z+2	; 0x02
     d52:	62 2f       	mov	r22, r18
     d54:	6f 77       	andi	r22, 0x7F	; 127
     d56:	70 e0       	ldi	r23, 0x00	; 0
     d58:	22 1f       	adc	r18, r18
     d5a:	22 27       	eor	r18, r18
     d5c:	22 1f       	adc	r18, r18
     d5e:	93 81       	ldd	r25, Z+3	; 0x03
     d60:	89 2f       	mov	r24, r25
     d62:	88 0f       	add	r24, r24
     d64:	82 2b       	or	r24, r18
     d66:	28 2f       	mov	r18, r24
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	99 1f       	adc	r25, r25
     d6c:	99 27       	eor	r25, r25
     d6e:	99 1f       	adc	r25, r25
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	11 97       	sbiw	r26, 0x01	; 1
     d76:	21 15       	cp	r18, r1
     d78:	31 05       	cpc	r19, r1
     d7a:	a9 f5       	brne	.+106    	; 0xde6 <__unpack_f+0x9e>
     d7c:	41 15       	cp	r20, r1
     d7e:	51 05       	cpc	r21, r1
     d80:	61 05       	cpc	r22, r1
     d82:	71 05       	cpc	r23, r1
     d84:	11 f4       	brne	.+4      	; 0xd8a <__unpack_f+0x42>
     d86:	82 e0       	ldi	r24, 0x02	; 2
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__unpack_f+0xb0>
     d8a:	82 e8       	ldi	r24, 0x82	; 130
     d8c:	9f ef       	ldi	r25, 0xFF	; 255
     d8e:	13 96       	adiw	r26, 0x03	; 3
     d90:	9c 93       	st	X, r25
     d92:	8e 93       	st	-X, r24
     d94:	12 97       	sbiw	r26, 0x02	; 2
     d96:	9a 01       	movw	r18, r20
     d98:	ab 01       	movw	r20, r22
     d9a:	67 e0       	ldi	r22, 0x07	; 7
     d9c:	22 0f       	add	r18, r18
     d9e:	33 1f       	adc	r19, r19
     da0:	44 1f       	adc	r20, r20
     da2:	55 1f       	adc	r21, r21
     da4:	6a 95       	dec	r22
     da6:	d1 f7       	brne	.-12     	; 0xd9c <__unpack_f+0x54>
     da8:	83 e0       	ldi	r24, 0x03	; 3
     daa:	8c 93       	st	X, r24
     dac:	0d c0       	rjmp	.+26     	; 0xdc8 <__unpack_f+0x80>
     dae:	22 0f       	add	r18, r18
     db0:	33 1f       	adc	r19, r19
     db2:	44 1f       	adc	r20, r20
     db4:	55 1f       	adc	r21, r21
     db6:	12 96       	adiw	r26, 0x02	; 2
     db8:	8d 91       	ld	r24, X+
     dba:	9c 91       	ld	r25, X
     dbc:	13 97       	sbiw	r26, 0x03	; 3
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	13 96       	adiw	r26, 0x03	; 3
     dc2:	9c 93       	st	X, r25
     dc4:	8e 93       	st	-X, r24
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	20 30       	cpi	r18, 0x00	; 0
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	38 07       	cpc	r19, r24
     dce:	80 e0       	ldi	r24, 0x00	; 0
     dd0:	48 07       	cpc	r20, r24
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	58 07       	cpc	r21, r24
     dd6:	58 f3       	brcs	.-42     	; 0xdae <__unpack_f+0x66>
     dd8:	14 96       	adiw	r26, 0x04	; 4
     dda:	2d 93       	st	X+, r18
     ddc:	3d 93       	st	X+, r19
     dde:	4d 93       	st	X+, r20
     de0:	5c 93       	st	X, r21
     de2:	17 97       	sbiw	r26, 0x07	; 7
     de4:	08 95       	ret
     de6:	2f 3f       	cpi	r18, 0xFF	; 255
     de8:	31 05       	cpc	r19, r1
     dea:	79 f4       	brne	.+30     	; 0xe0a <__unpack_f+0xc2>
     dec:	41 15       	cp	r20, r1
     dee:	51 05       	cpc	r21, r1
     df0:	61 05       	cpc	r22, r1
     df2:	71 05       	cpc	r23, r1
     df4:	19 f4       	brne	.+6      	; 0xdfc <__unpack_f+0xb4>
     df6:	84 e0       	ldi	r24, 0x04	; 4
     df8:	8c 93       	st	X, r24
     dfa:	08 95       	ret
     dfc:	64 ff       	sbrs	r22, 4
     dfe:	03 c0       	rjmp	.+6      	; 0xe06 <__unpack_f+0xbe>
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	8c 93       	st	X, r24
     e04:	12 c0       	rjmp	.+36     	; 0xe2a <__unpack_f+0xe2>
     e06:	1c 92       	st	X, r1
     e08:	10 c0       	rjmp	.+32     	; 0xe2a <__unpack_f+0xe2>
     e0a:	2f 57       	subi	r18, 0x7F	; 127
     e0c:	30 40       	sbci	r19, 0x00	; 0
     e0e:	13 96       	adiw	r26, 0x03	; 3
     e10:	3c 93       	st	X, r19
     e12:	2e 93       	st	-X, r18
     e14:	12 97       	sbiw	r26, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	8c 93       	st	X, r24
     e1a:	87 e0       	ldi	r24, 0x07	; 7
     e1c:	44 0f       	add	r20, r20
     e1e:	55 1f       	adc	r21, r21
     e20:	66 1f       	adc	r22, r22
     e22:	77 1f       	adc	r23, r23
     e24:	8a 95       	dec	r24
     e26:	d1 f7       	brne	.-12     	; 0xe1c <__unpack_f+0xd4>
     e28:	70 64       	ori	r23, 0x40	; 64
     e2a:	14 96       	adiw	r26, 0x04	; 4
     e2c:	4d 93       	st	X+, r20
     e2e:	5d 93       	st	X+, r21
     e30:	6d 93       	st	X+, r22
     e32:	7c 93       	st	X, r23
     e34:	17 97       	sbiw	r26, 0x07	; 7
     e36:	08 95       	ret

00000e38 <__fpcmp_parts_f>:
     e38:	1f 93       	push	r17
     e3a:	dc 01       	movw	r26, r24
     e3c:	fb 01       	movw	r30, r22
     e3e:	9c 91       	ld	r25, X
     e40:	92 30       	cpi	r25, 0x02	; 2
     e42:	08 f4       	brcc	.+2      	; 0xe46 <__fpcmp_parts_f+0xe>
     e44:	47 c0       	rjmp	.+142    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e46:	80 81       	ld	r24, Z
     e48:	82 30       	cpi	r24, 0x02	; 2
     e4a:	08 f4       	brcc	.+2      	; 0xe4e <__fpcmp_parts_f+0x16>
     e4c:	43 c0       	rjmp	.+134    	; 0xed4 <__fpcmp_parts_f+0x9c>
     e4e:	94 30       	cpi	r25, 0x04	; 4
     e50:	51 f4       	brne	.+20     	; 0xe66 <__fpcmp_parts_f+0x2e>
     e52:	11 96       	adiw	r26, 0x01	; 1
     e54:	1c 91       	ld	r17, X
     e56:	84 30       	cpi	r24, 0x04	; 4
     e58:	99 f5       	brne	.+102    	; 0xec0 <__fpcmp_parts_f+0x88>
     e5a:	81 81       	ldd	r24, Z+1	; 0x01
     e5c:	68 2f       	mov	r22, r24
     e5e:	70 e0       	ldi	r23, 0x00	; 0
     e60:	61 1b       	sub	r22, r17
     e62:	71 09       	sbc	r23, r1
     e64:	3f c0       	rjmp	.+126    	; 0xee4 <__fpcmp_parts_f+0xac>
     e66:	84 30       	cpi	r24, 0x04	; 4
     e68:	21 f0       	breq	.+8      	; 0xe72 <__fpcmp_parts_f+0x3a>
     e6a:	92 30       	cpi	r25, 0x02	; 2
     e6c:	31 f4       	brne	.+12     	; 0xe7a <__fpcmp_parts_f+0x42>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	b9 f1       	breq	.+110    	; 0xee0 <__fpcmp_parts_f+0xa8>
     e72:	81 81       	ldd	r24, Z+1	; 0x01
     e74:	88 23       	and	r24, r24
     e76:	89 f1       	breq	.+98     	; 0xeda <__fpcmp_parts_f+0xa2>
     e78:	2d c0       	rjmp	.+90     	; 0xed4 <__fpcmp_parts_f+0x9c>
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	1c 91       	ld	r17, X
     e7e:	11 97       	sbiw	r26, 0x01	; 1
     e80:	82 30       	cpi	r24, 0x02	; 2
     e82:	f1 f0       	breq	.+60     	; 0xec0 <__fpcmp_parts_f+0x88>
     e84:	81 81       	ldd	r24, Z+1	; 0x01
     e86:	18 17       	cp	r17, r24
     e88:	d9 f4       	brne	.+54     	; 0xec0 <__fpcmp_parts_f+0x88>
     e8a:	12 96       	adiw	r26, 0x02	; 2
     e8c:	2d 91       	ld	r18, X+
     e8e:	3c 91       	ld	r19, X
     e90:	13 97       	sbiw	r26, 0x03	; 3
     e92:	82 81       	ldd	r24, Z+2	; 0x02
     e94:	93 81       	ldd	r25, Z+3	; 0x03
     e96:	82 17       	cp	r24, r18
     e98:	93 07       	cpc	r25, r19
     e9a:	94 f0       	brlt	.+36     	; 0xec0 <__fpcmp_parts_f+0x88>
     e9c:	28 17       	cp	r18, r24
     e9e:	39 07       	cpc	r19, r25
     ea0:	bc f0       	brlt	.+46     	; 0xed0 <__fpcmp_parts_f+0x98>
     ea2:	14 96       	adiw	r26, 0x04	; 4
     ea4:	8d 91       	ld	r24, X+
     ea6:	9d 91       	ld	r25, X+
     ea8:	0d 90       	ld	r0, X+
     eaa:	bc 91       	ld	r27, X
     eac:	a0 2d       	mov	r26, r0
     eae:	24 81       	ldd	r18, Z+4	; 0x04
     eb0:	35 81       	ldd	r19, Z+5	; 0x05
     eb2:	46 81       	ldd	r20, Z+6	; 0x06
     eb4:	57 81       	ldd	r21, Z+7	; 0x07
     eb6:	28 17       	cp	r18, r24
     eb8:	39 07       	cpc	r19, r25
     eba:	4a 07       	cpc	r20, r26
     ebc:	5b 07       	cpc	r21, r27
     ebe:	18 f4       	brcc	.+6      	; 0xec6 <__fpcmp_parts_f+0x8e>
     ec0:	11 23       	and	r17, r17
     ec2:	41 f0       	breq	.+16     	; 0xed4 <__fpcmp_parts_f+0x9c>
     ec4:	0a c0       	rjmp	.+20     	; 0xeda <__fpcmp_parts_f+0xa2>
     ec6:	82 17       	cp	r24, r18
     ec8:	93 07       	cpc	r25, r19
     eca:	a4 07       	cpc	r26, r20
     ecc:	b5 07       	cpc	r27, r21
     ece:	40 f4       	brcc	.+16     	; 0xee0 <__fpcmp_parts_f+0xa8>
     ed0:	11 23       	and	r17, r17
     ed2:	19 f0       	breq	.+6      	; 0xeda <__fpcmp_parts_f+0xa2>
     ed4:	61 e0       	ldi	r22, 0x01	; 1
     ed6:	70 e0       	ldi	r23, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <__fpcmp_parts_f+0xac>
     eda:	6f ef       	ldi	r22, 0xFF	; 255
     edc:	7f ef       	ldi	r23, 0xFF	; 255
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <__fpcmp_parts_f+0xac>
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	70 e0       	ldi	r23, 0x00	; 0
     ee4:	cb 01       	movw	r24, r22
     ee6:	1f 91       	pop	r17
     ee8:	08 95       	ret

00000eea <Buzzer_init>:
#include "buzzer.h"
#include "gpio.h"
#include "common_macros.h"

void Buzzer_init(void)
{
     eea:	df 93       	push	r29
     eec:	cf 93       	push	r28
     eee:	cd b7       	in	r28, 0x3d	; 61
     ef0:	de b7       	in	r29, 0x3e	; 62
	/*set the direction of buzzer's pin to output*/
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
     ef2:	82 e0       	ldi	r24, 0x02	; 2
     ef4:	65 e0       	ldi	r22, 0x05	; 5
     ef6:	41 e0       	ldi	r20, 0x01	; 1
     ef8:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>

	/*turn off buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     efc:	82 e0       	ldi	r24, 0x02	; 2
     efe:	65 e0       	ldi	r22, 0x05	; 5
     f00:	40 e0       	ldi	r20, 0x00	; 0
     f02:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
}
     f06:	cf 91       	pop	r28
     f08:	df 91       	pop	r29
     f0a:	08 95       	ret

00000f0c <Buzzer_on>:

void Buzzer_on(void)
{
     f0c:	df 93       	push	r29
     f0e:	cf 93       	push	r28
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	/*turn on buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
     f14:	82 e0       	ldi	r24, 0x02	; 2
     f16:	65 e0       	ldi	r22, 0x05	; 5
     f18:	41 e0       	ldi	r20, 0x01	; 1
     f1a:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
}
     f1e:	cf 91       	pop	r28
     f20:	df 91       	pop	r29
     f22:	08 95       	ret

00000f24 <Buzzer_off>:

void Buzzer_off(void)
{
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
	/*turn off buzzer*/
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
     f2c:	82 e0       	ldi	r24, 0x02	; 2
     f2e:	65 e0       	ldi	r22, 0x05	; 5
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
}
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	00 d0       	rcall	.+0      	; 0xf42 <GPIO_setupPinDirection+0x6>
     f42:	00 d0       	rcall	.+0      	; 0xf44 <GPIO_setupPinDirection+0x8>
     f44:	0f 92       	push	r0
     f46:	cd b7       	in	r28, 0x3d	; 61
     f48:	de b7       	in	r29, 0x3e	; 62
     f4a:	89 83       	std	Y+1, r24	; 0x01
     f4c:	6a 83       	std	Y+2, r22	; 0x02
     f4e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     f50:	8a 81       	ldd	r24, Y+2	; 0x02
     f52:	88 30       	cpi	r24, 0x08	; 8
     f54:	08 f0       	brcs	.+2      	; 0xf58 <GPIO_setupPinDirection+0x1c>
     f56:	d5 c0       	rjmp	.+426    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	84 30       	cpi	r24, 0x04	; 4
     f5c:	08 f0       	brcs	.+2      	; 0xf60 <GPIO_setupPinDirection+0x24>
     f5e:	d1 c0       	rjmp	.+418    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	3d 83       	std	Y+5, r19	; 0x05
     f68:	2c 83       	std	Y+4, r18	; 0x04
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	9d 81       	ldd	r25, Y+5	; 0x05
     f6e:	81 30       	cpi	r24, 0x01	; 1
     f70:	91 05       	cpc	r25, r1
     f72:	09 f4       	brne	.+2      	; 0xf76 <GPIO_setupPinDirection+0x3a>
     f74:	43 c0       	rjmp	.+134    	; 0xffc <GPIO_setupPinDirection+0xc0>
     f76:	2c 81       	ldd	r18, Y+4	; 0x04
     f78:	3d 81       	ldd	r19, Y+5	; 0x05
     f7a:	22 30       	cpi	r18, 0x02	; 2
     f7c:	31 05       	cpc	r19, r1
     f7e:	2c f4       	brge	.+10     	; 0xf8a <GPIO_setupPinDirection+0x4e>
     f80:	8c 81       	ldd	r24, Y+4	; 0x04
     f82:	9d 81       	ldd	r25, Y+5	; 0x05
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	71 f0       	breq	.+28     	; 0xfa4 <GPIO_setupPinDirection+0x68>
     f88:	bc c0       	rjmp	.+376    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
     f8a:	2c 81       	ldd	r18, Y+4	; 0x04
     f8c:	3d 81       	ldd	r19, Y+5	; 0x05
     f8e:	22 30       	cpi	r18, 0x02	; 2
     f90:	31 05       	cpc	r19, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <GPIO_setupPinDirection+0x5a>
     f94:	5f c0       	rjmp	.+190    	; 0x1054 <GPIO_setupPinDirection+0x118>
     f96:	8c 81       	ldd	r24, Y+4	; 0x04
     f98:	9d 81       	ldd	r25, Y+5	; 0x05
     f9a:	83 30       	cpi	r24, 0x03	; 3
     f9c:	91 05       	cpc	r25, r1
     f9e:	09 f4       	brne	.+2      	; 0xfa2 <GPIO_setupPinDirection+0x66>
     fa0:	85 c0       	rjmp	.+266    	; 0x10ac <GPIO_setupPinDirection+0x170>
     fa2:	af c0       	rjmp	.+350    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	81 30       	cpi	r24, 0x01	; 1
     fa8:	a1 f4       	brne	.+40     	; 0xfd2 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     faa:	aa e3       	ldi	r26, 0x3A	; 58
     fac:	b0 e0       	ldi	r27, 0x00	; 0
     fae:	ea e3       	ldi	r30, 0x3A	; 58
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	48 2f       	mov	r20, r24
     fb6:	8a 81       	ldd	r24, Y+2	; 0x02
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	02 2e       	mov	r0, r18
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <GPIO_setupPinDirection+0x8c>
     fc4:	88 0f       	add	r24, r24
     fc6:	99 1f       	adc	r25, r25
     fc8:	0a 94       	dec	r0
     fca:	e2 f7       	brpl	.-8      	; 0xfc4 <GPIO_setupPinDirection+0x88>
     fcc:	84 2b       	or	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	98 c0       	rjmp	.+304    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     fd2:	aa e3       	ldi	r26, 0x3A	; 58
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ea e3       	ldi	r30, 0x3A	; 58
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	48 2f       	mov	r20, r24
     fde:	8a 81       	ldd	r24, Y+2	; 0x02
     fe0:	28 2f       	mov	r18, r24
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	81 e0       	ldi	r24, 0x01	; 1
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	02 2e       	mov	r0, r18
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <GPIO_setupPinDirection+0xb4>
     fec:	88 0f       	add	r24, r24
     fee:	99 1f       	adc	r25, r25
     ff0:	0a 94       	dec	r0
     ff2:	e2 f7       	brpl	.-8      	; 0xfec <GPIO_setupPinDirection+0xb0>
     ff4:	80 95       	com	r24
     ff6:	84 23       	and	r24, r20
     ff8:	8c 93       	st	X, r24
     ffa:	83 c0       	rjmp	.+262    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	81 30       	cpi	r24, 0x01	; 1
    1000:	a1 f4       	brne	.+40     	; 0x102a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1002:	a7 e3       	ldi	r26, 0x37	; 55
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e7 e3       	ldi	r30, 0x37	; 55
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <GPIO_setupPinDirection+0xe4>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <GPIO_setupPinDirection+0xe0>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	6c c0       	rjmp	.+216    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    102a:	a7 e3       	ldi	r26, 0x37	; 55
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e7 e3       	ldi	r30, 0x37	; 55
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <GPIO_setupPinDirection+0x10c>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <GPIO_setupPinDirection+0x108>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	57 c0       	rjmp	.+174    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	a1 f4       	brne	.+40     	; 0x1082 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    105a:	a4 e3       	ldi	r26, 0x34	; 52
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e4 e3       	ldi	r30, 0x34	; 52
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_setupPinDirection+0x13c>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_setupPinDirection+0x138>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	40 c0       	rjmp	.+128    	; 0x1102 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1082:	a4 e3       	ldi	r26, 0x34	; 52
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e4 e3       	ldi	r30, 0x34	; 52
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_setupPinDirection+0x164>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_setupPinDirection+0x160>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	2b c0       	rjmp	.+86     	; 0x1102 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	a1 f4       	brne	.+40     	; 0x10da <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    10b2:	a1 e3       	ldi	r26, 0x31	; 49
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e1 e3       	ldi	r30, 0x31	; 49
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <GPIO_setupPinDirection+0x194>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <GPIO_setupPinDirection+0x190>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	14 c0       	rjmp	.+40     	; 0x1102 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    10da:	a1 e3       	ldi	r26, 0x31	; 49
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e1 e3       	ldi	r30, 0x31	; 49
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <GPIO_setupPinDirection+0x1bc>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <GPIO_setupPinDirection+0x1b8>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1102:	0f 90       	pop	r0
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	cf 91       	pop	r28
    110e:	df 91       	pop	r29
    1110:	08 95       	ret

00001112 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1112:	df 93       	push	r29
    1114:	cf 93       	push	r28
    1116:	00 d0       	rcall	.+0      	; 0x1118 <GPIO_writePin+0x6>
    1118:	00 d0       	rcall	.+0      	; 0x111a <GPIO_writePin+0x8>
    111a:	0f 92       	push	r0
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	6a 83       	std	Y+2, r22	; 0x02
    1124:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	88 30       	cpi	r24, 0x08	; 8
    112a:	08 f0       	brcs	.+2      	; 0x112e <GPIO_writePin+0x1c>
    112c:	d5 c0       	rjmp	.+426    	; 0x12d8 <GPIO_writePin+0x1c6>
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	84 30       	cpi	r24, 0x04	; 4
    1132:	08 f0       	brcs	.+2      	; 0x1136 <GPIO_writePin+0x24>
    1134:	d1 c0       	rjmp	.+418    	; 0x12d8 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the value required on the chosen pin */
		switch(port_num)
    1136:	89 81       	ldd	r24, Y+1	; 0x01
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
    1140:	8c 81       	ldd	r24, Y+4	; 0x04
    1142:	9d 81       	ldd	r25, Y+5	; 0x05
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	91 05       	cpc	r25, r1
    1148:	09 f4       	brne	.+2      	; 0x114c <GPIO_writePin+0x3a>
    114a:	43 c0       	rjmp	.+134    	; 0x11d2 <GPIO_writePin+0xc0>
    114c:	2c 81       	ldd	r18, Y+4	; 0x04
    114e:	3d 81       	ldd	r19, Y+5	; 0x05
    1150:	22 30       	cpi	r18, 0x02	; 2
    1152:	31 05       	cpc	r19, r1
    1154:	2c f4       	brge	.+10     	; 0x1160 <GPIO_writePin+0x4e>
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	9d 81       	ldd	r25, Y+5	; 0x05
    115a:	00 97       	sbiw	r24, 0x00	; 0
    115c:	71 f0       	breq	.+28     	; 0x117a <GPIO_writePin+0x68>
    115e:	bc c0       	rjmp	.+376    	; 0x12d8 <GPIO_writePin+0x1c6>
    1160:	2c 81       	ldd	r18, Y+4	; 0x04
    1162:	3d 81       	ldd	r19, Y+5	; 0x05
    1164:	22 30       	cpi	r18, 0x02	; 2
    1166:	31 05       	cpc	r19, r1
    1168:	09 f4       	brne	.+2      	; 0x116c <GPIO_writePin+0x5a>
    116a:	5f c0       	rjmp	.+190    	; 0x122a <GPIO_writePin+0x118>
    116c:	8c 81       	ldd	r24, Y+4	; 0x04
    116e:	9d 81       	ldd	r25, Y+5	; 0x05
    1170:	83 30       	cpi	r24, 0x03	; 3
    1172:	91 05       	cpc	r25, r1
    1174:	09 f4       	brne	.+2      	; 0x1178 <GPIO_writePin+0x66>
    1176:	85 c0       	rjmp	.+266    	; 0x1282 <GPIO_writePin+0x170>
    1178:	af c0       	rjmp	.+350    	; 0x12d8 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    117a:	8b 81       	ldd	r24, Y+3	; 0x03
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	a1 f4       	brne	.+40     	; 0x11a8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1180:	ab e3       	ldi	r26, 0x3B	; 59
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	eb e3       	ldi	r30, 0x3B	; 59
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	80 81       	ld	r24, Z
    118a:	48 2f       	mov	r20, r24
    118c:	8a 81       	ldd	r24, Y+2	; 0x02
    118e:	28 2f       	mov	r18, r24
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	02 2e       	mov	r0, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_writePin+0x8c>
    119a:	88 0f       	add	r24, r24
    119c:	99 1f       	adc	r25, r25
    119e:	0a 94       	dec	r0
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_writePin+0x88>
    11a2:	84 2b       	or	r24, r20
    11a4:	8c 93       	st	X, r24
    11a6:	98 c0       	rjmp	.+304    	; 0x12d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    11a8:	ab e3       	ldi	r26, 0x3B	; 59
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	eb e3       	ldi	r30, 0x3B	; 59
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	48 2f       	mov	r20, r24
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	28 2f       	mov	r18, r24
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	90 e0       	ldi	r25, 0x00	; 0
    11be:	02 2e       	mov	r0, r18
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <GPIO_writePin+0xb4>
    11c2:	88 0f       	add	r24, r24
    11c4:	99 1f       	adc	r25, r25
    11c6:	0a 94       	dec	r0
    11c8:	e2 f7       	brpl	.-8      	; 0x11c2 <GPIO_writePin+0xb0>
    11ca:	80 95       	com	r24
    11cc:	84 23       	and	r24, r20
    11ce:	8c 93       	st	X, r24
    11d0:	83 c0       	rjmp	.+262    	; 0x12d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	81 30       	cpi	r24, 0x01	; 1
    11d6:	a1 f4       	brne	.+40     	; 0x1200 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    11d8:	a8 e3       	ldi	r26, 0x38	; 56
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e8 e3       	ldi	r30, 0x38	; 56
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	48 2f       	mov	r20, r24
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	02 2e       	mov	r0, r18
    11f0:	02 c0       	rjmp	.+4      	; 0x11f6 <GPIO_writePin+0xe4>
    11f2:	88 0f       	add	r24, r24
    11f4:	99 1f       	adc	r25, r25
    11f6:	0a 94       	dec	r0
    11f8:	e2 f7       	brpl	.-8      	; 0x11f2 <GPIO_writePin+0xe0>
    11fa:	84 2b       	or	r24, r20
    11fc:	8c 93       	st	X, r24
    11fe:	6c c0       	rjmp	.+216    	; 0x12d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1200:	a8 e3       	ldi	r26, 0x38	; 56
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e8 e3       	ldi	r30, 0x38	; 56
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	48 2f       	mov	r20, r24
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	28 2f       	mov	r18, r24
    1210:	30 e0       	ldi	r19, 0x00	; 0
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	02 2e       	mov	r0, r18
    1218:	02 c0       	rjmp	.+4      	; 0x121e <GPIO_writePin+0x10c>
    121a:	88 0f       	add	r24, r24
    121c:	99 1f       	adc	r25, r25
    121e:	0a 94       	dec	r0
    1220:	e2 f7       	brpl	.-8      	; 0x121a <GPIO_writePin+0x108>
    1222:	80 95       	com	r24
    1224:	84 23       	and	r24, r20
    1226:	8c 93       	st	X, r24
    1228:	57 c0       	rjmp	.+174    	; 0x12d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	a1 f4       	brne	.+40     	; 0x1258 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1230:	a5 e3       	ldi	r26, 0x35	; 53
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	e5 e3       	ldi	r30, 0x35	; 53
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_writePin+0x13c>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_writePin+0x138>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	40 c0       	rjmp	.+128    	; 0x12d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1258:	a5 e3       	ldi	r26, 0x35	; 53
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e5 e3       	ldi	r30, 0x35	; 53
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_writePin+0x164>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_writePin+0x160>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	2b c0       	rjmp	.+86     	; 0x12d8 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	a1 f4       	brne	.+40     	; 0x12b0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1288:	a2 e3       	ldi	r26, 0x32	; 50
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e2 e3       	ldi	r30, 0x32	; 50
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_writePin+0x194>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_writePin+0x190>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	14 c0       	rjmp	.+40     	; 0x12d8 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    12b0:	a2 e3       	ldi	r26, 0x32	; 50
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e2 e3       	ldi	r30, 0x32	; 50
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <GPIO_writePin+0x1bc>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <GPIO_writePin+0x1b8>
    12d2:	80 95       	com	r24
    12d4:	84 23       	and	r24, r20
    12d6:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	cf 91       	pop	r28
    12e4:	df 91       	pop	r29
    12e6:	08 95       	ret

000012e8 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    12e8:	df 93       	push	r29
    12ea:	cf 93       	push	r28
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <GPIO_readPin+0x6>
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <GPIO_readPin+0x8>
    12f0:	0f 92       	push	r0
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	8a 83       	std	Y+2, r24	; 0x02
    12f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 result;
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	88 30       	cpi	r24, 0x08	; 8
    12fe:	18 f4       	brcc	.+6      	; 0x1306 <GPIO_readPin+0x1e>
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	10 f0       	brcs	.+4      	; 0x130a <GPIO_readPin+0x22>
	{
		result =  LOGIC_LOW;
    1306:	19 82       	std	Y+1, r1	; 0x01
    1308:	80 c0       	rjmp	.+256    	; 0x140a <GPIO_readPin+0x122>
	}
	else
	{
		/* Write the value required on the chosen pin */
		switch(port_num)
    130a:	8a 81       	ldd	r24, Y+2	; 0x02
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	3d 83       	std	Y+5, r19	; 0x05
    1312:	2c 83       	std	Y+4, r18	; 0x04
    1314:	4c 81       	ldd	r20, Y+4	; 0x04
    1316:	5d 81       	ldd	r21, Y+5	; 0x05
    1318:	41 30       	cpi	r20, 0x01	; 1
    131a:	51 05       	cpc	r21, r1
    131c:	79 f1       	breq	.+94     	; 0x137c <GPIO_readPin+0x94>
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	9d 81       	ldd	r25, Y+5	; 0x05
    1322:	82 30       	cpi	r24, 0x02	; 2
    1324:	91 05       	cpc	r25, r1
    1326:	34 f4       	brge	.+12     	; 0x1334 <GPIO_readPin+0x4c>
    1328:	2c 81       	ldd	r18, Y+4	; 0x04
    132a:	3d 81       	ldd	r19, Y+5	; 0x05
    132c:	21 15       	cp	r18, r1
    132e:	31 05       	cpc	r19, r1
    1330:	69 f0       	breq	.+26     	; 0x134c <GPIO_readPin+0x64>
    1332:	6b c0       	rjmp	.+214    	; 0x140a <GPIO_readPin+0x122>
    1334:	4c 81       	ldd	r20, Y+4	; 0x04
    1336:	5d 81       	ldd	r21, Y+5	; 0x05
    1338:	42 30       	cpi	r20, 0x02	; 2
    133a:	51 05       	cpc	r21, r1
    133c:	b9 f1       	breq	.+110    	; 0x13ac <GPIO_readPin+0xc4>
    133e:	8c 81       	ldd	r24, Y+4	; 0x04
    1340:	9d 81       	ldd	r25, Y+5	; 0x05
    1342:	83 30       	cpi	r24, 0x03	; 3
    1344:	91 05       	cpc	r25, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <GPIO_readPin+0x62>
    1348:	49 c0       	rjmp	.+146    	; 0x13dc <GPIO_readPin+0xf4>
    134a:	5f c0       	rjmp	.+190    	; 0x140a <GPIO_readPin+0x122>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    134c:	e9 e3       	ldi	r30, 0x39	; 57
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	28 2f       	mov	r18, r24
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 2f       	mov	r24, r24
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	a9 01       	movw	r20, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_readPin+0x7c>
    1360:	55 95       	asr	r21
    1362:	47 95       	ror	r20
    1364:	8a 95       	dec	r24
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_readPin+0x78>
    1368:	ca 01       	movw	r24, r20
    136a:	81 70       	andi	r24, 0x01	; 1
    136c:	90 70       	andi	r25, 0x00	; 0
    136e:	88 23       	and	r24, r24
    1370:	19 f0       	breq	.+6      	; 0x1378 <GPIO_readPin+0x90>
			{
				result =  LOGIC_HIGH;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	49 c0       	rjmp	.+146    	; 0x140a <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    1378:	19 82       	std	Y+1, r1	; 0x01
    137a:	47 c0       	rjmp	.+142    	; 0x140a <GPIO_readPin+0x122>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    137c:	e6 e3       	ldi	r30, 0x36	; 54
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	a9 01       	movw	r20, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_readPin+0xac>
    1390:	55 95       	asr	r21
    1392:	47 95       	ror	r20
    1394:	8a 95       	dec	r24
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_readPin+0xa8>
    1398:	ca 01       	movw	r24, r20
    139a:	81 70       	andi	r24, 0x01	; 1
    139c:	90 70       	andi	r25, 0x00	; 0
    139e:	88 23       	and	r24, r24
    13a0:	19 f0       	breq	.+6      	; 0x13a8 <GPIO_readPin+0xc0>
			{
				result =  LOGIC_HIGH;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	89 83       	std	Y+1, r24	; 0x01
    13a6:	31 c0       	rjmp	.+98     	; 0x140a <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    13a8:	19 82       	std	Y+1, r1	; 0x01
    13aa:	2f c0       	rjmp	.+94     	; 0x140a <GPIO_readPin+0x122>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    13ac:	e3 e3       	ldi	r30, 0x33	; 51
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	28 2f       	mov	r18, r24
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a9 01       	movw	r20, r18
    13be:	02 c0       	rjmp	.+4      	; 0x13c4 <GPIO_readPin+0xdc>
    13c0:	55 95       	asr	r21
    13c2:	47 95       	ror	r20
    13c4:	8a 95       	dec	r24
    13c6:	e2 f7       	brpl	.-8      	; 0x13c0 <GPIO_readPin+0xd8>
    13c8:	ca 01       	movw	r24, r20
    13ca:	81 70       	andi	r24, 0x01	; 1
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	88 23       	and	r24, r24
    13d0:	19 f0       	breq	.+6      	; 0x13d8 <GPIO_readPin+0xf0>
			{
				result =  LOGIC_HIGH;
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	89 83       	std	Y+1, r24	; 0x01
    13d6:	19 c0       	rjmp	.+50     	; 0x140a <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    13d8:	19 82       	std	Y+1, r1	; 0x01
    13da:	17 c0       	rjmp	.+46     	; 0x140a <GPIO_readPin+0x122>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    13dc:	e0 e3       	ldi	r30, 0x30	; 48
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	88 2f       	mov	r24, r24
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	a9 01       	movw	r20, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <GPIO_readPin+0x10c>
    13f0:	55 95       	asr	r21
    13f2:	47 95       	ror	r20
    13f4:	8a 95       	dec	r24
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <GPIO_readPin+0x108>
    13f8:	ca 01       	movw	r24, r20
    13fa:	81 70       	andi	r24, 0x01	; 1
    13fc:	90 70       	andi	r25, 0x00	; 0
    13fe:	88 23       	and	r24, r24
    1400:	19 f0       	breq	.+6      	; 0x1408 <GPIO_readPin+0x120>
			{
				result =  LOGIC_HIGH;
    1402:	81 e0       	ldi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	01 c0       	rjmp	.+2      	; 0x140a <GPIO_readPin+0x122>
			}
			else
			{
				result =  LOGIC_LOW;
    1408:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return result;
    140a:	89 81       	ldd	r24, Y+1	; 0x01
}
    140c:	0f 90       	pop	r0
    140e:	0f 90       	pop	r0
    1410:	0f 90       	pop	r0
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	cf 91       	pop	r28
    1418:	df 91       	pop	r29
    141a:	08 95       	ret

0000141c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    141c:	df 93       	push	r29
    141e:	cf 93       	push	r28
    1420:	00 d0       	rcall	.+0      	; 0x1422 <GPIO_setupPortDirection+0x6>
    1422:	00 d0       	rcall	.+0      	; 0x1424 <GPIO_setupPortDirection+0x8>
    1424:	cd b7       	in	r28, 0x3d	; 61
    1426:	de b7       	in	r29, 0x3e	; 62
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    142c:	89 81       	ldd	r24, Y+1	; 0x01
    142e:	84 30       	cpi	r24, 0x04	; 4
    1430:	90 f5       	brcc	.+100    	; 0x1496 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin required */
		switch(port_num)
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3c 83       	std	Y+4, r19	; 0x04
    143a:	2b 83       	std	Y+3, r18	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	81 30       	cpi	r24, 0x01	; 1
    1442:	91 05       	cpc	r25, r1
    1444:	d1 f0       	breq	.+52     	; 0x147a <GPIO_setupPortDirection+0x5e>
    1446:	2b 81       	ldd	r18, Y+3	; 0x03
    1448:	3c 81       	ldd	r19, Y+4	; 0x04
    144a:	22 30       	cpi	r18, 0x02	; 2
    144c:	31 05       	cpc	r19, r1
    144e:	2c f4       	brge	.+10     	; 0x145a <GPIO_setupPortDirection+0x3e>
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	61 f0       	breq	.+24     	; 0x1470 <GPIO_setupPortDirection+0x54>
    1458:	1e c0       	rjmp	.+60     	; 0x1496 <GPIO_setupPortDirection+0x7a>
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	3c 81       	ldd	r19, Y+4	; 0x04
    145e:	22 30       	cpi	r18, 0x02	; 2
    1460:	31 05       	cpc	r19, r1
    1462:	81 f0       	breq	.+32     	; 0x1484 <GPIO_setupPortDirection+0x68>
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	91 05       	cpc	r25, r1
    146c:	81 f0       	breq	.+32     	; 0x148e <GPIO_setupPortDirection+0x72>
    146e:	13 c0       	rjmp	.+38     	; 0x1496 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1470:	ea e3       	ldi	r30, 0x3A	; 58
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	8a 81       	ldd	r24, Y+2	; 0x02
    1476:	80 83       	st	Z, r24
    1478:	0e c0       	rjmp	.+28     	; 0x1496 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    147a:	e7 e3       	ldi	r30, 0x37	; 55
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	8a 81       	ldd	r24, Y+2	; 0x02
    1480:	80 83       	st	Z, r24
    1482:	09 c0       	rjmp	.+18     	; 0x1496 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1484:	e4 e3       	ldi	r30, 0x34	; 52
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	8a 81       	ldd	r24, Y+2	; 0x02
    148a:	80 83       	st	Z, r24
    148c:	04 c0       	rjmp	.+8      	; 0x1496 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    148e:	e1 e3       	ldi	r30, 0x31	; 49
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	8a 81       	ldd	r24, Y+2	; 0x02
    1494:	80 83       	st	Z, r24
			break;
		}
	}
}
    1496:	0f 90       	pop	r0
    1498:	0f 90       	pop	r0
    149a:	0f 90       	pop	r0
    149c:	0f 90       	pop	r0
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	08 95       	ret

000014a4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <GPIO_writePort+0x6>
    14aa:	00 d0       	rcall	.+0      	; 0x14ac <GPIO_writePort+0x8>
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
    14b2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	84 30       	cpi	r24, 0x04	; 4
    14b8:	90 f5       	brcc	.+100    	; 0x151e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the required value to the chosen port */
		switch(port_num)
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3c 83       	std	Y+4, r19	; 0x04
    14c2:	2b 83       	std	Y+3, r18	; 0x03
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	d1 f0       	breq	.+52     	; 0x1502 <GPIO_writePort+0x5e>
    14ce:	2b 81       	ldd	r18, Y+3	; 0x03
    14d0:	3c 81       	ldd	r19, Y+4	; 0x04
    14d2:	22 30       	cpi	r18, 0x02	; 2
    14d4:	31 05       	cpc	r19, r1
    14d6:	2c f4       	brge	.+10     	; 0x14e2 <GPIO_writePort+0x3e>
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	00 97       	sbiw	r24, 0x00	; 0
    14de:	61 f0       	breq	.+24     	; 0x14f8 <GPIO_writePort+0x54>
    14e0:	1e c0       	rjmp	.+60     	; 0x151e <GPIO_writePort+0x7a>
    14e2:	2b 81       	ldd	r18, Y+3	; 0x03
    14e4:	3c 81       	ldd	r19, Y+4	; 0x04
    14e6:	22 30       	cpi	r18, 0x02	; 2
    14e8:	31 05       	cpc	r19, r1
    14ea:	81 f0       	breq	.+32     	; 0x150c <GPIO_writePort+0x68>
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	83 30       	cpi	r24, 0x03	; 3
    14f2:	91 05       	cpc	r25, r1
    14f4:	81 f0       	breq	.+32     	; 0x1516 <GPIO_writePort+0x72>
    14f6:	13 c0       	rjmp	.+38     	; 0x151e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    14f8:	eb e3       	ldi	r30, 0x3B	; 59
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	8a 81       	ldd	r24, Y+2	; 0x02
    14fe:	80 83       	st	Z, r24
    1500:	0e c0       	rjmp	.+28     	; 0x151e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1502:	e8 e3       	ldi	r30, 0x38	; 56
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	8a 81       	ldd	r24, Y+2	; 0x02
    1508:	80 83       	st	Z, r24
    150a:	09 c0       	rjmp	.+18     	; 0x151e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    150c:	e5 e3       	ldi	r30, 0x35	; 53
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	80 83       	st	Z, r24
    1514:	04 c0       	rjmp	.+8      	; 0x151e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1516:	e2 e3       	ldi	r30, 0x32	; 50
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	80 83       	st	Z, r24
			break;
		}
	}
}
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	cf 91       	pop	r28
    1528:	df 91       	pop	r29
    152a:	08 95       	ret

0000152c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	00 d0       	rcall	.+0      	; 0x1532 <GPIO_readPort+0x6>
    1532:	00 d0       	rcall	.+0      	; 0x1534 <GPIO_readPort+0x8>
    1534:	cd b7       	in	r28, 0x3d	; 61
    1536:	de b7       	in	r29, 0x3e	; 62
    1538:	8a 83       	std	Y+2, r24	; 0x02
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	uint8 result;

	if(port_num >= NUM_OF_PORTS)
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	84 30       	cpi	r24, 0x04	; 4
    153e:	10 f0       	brcs	.+4      	; 0x1544 <GPIO_readPort+0x18>
	{
		result =  0;
    1540:	19 82       	std	Y+1, r1	; 0x01
    1542:	32 c0       	rjmp	.+100    	; 0x15a8 <GPIO_readPort+0x7c>
	}
	else
	{
		/* Read the required port */
		switch(port_num)
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	28 2f       	mov	r18, r24
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3c 83       	std	Y+4, r19	; 0x04
    154c:	2b 83       	std	Y+3, r18	; 0x03
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	91 05       	cpc	r25, r1
    1556:	d1 f0       	breq	.+52     	; 0x158c <GPIO_readPort+0x60>
    1558:	2b 81       	ldd	r18, Y+3	; 0x03
    155a:	3c 81       	ldd	r19, Y+4	; 0x04
    155c:	22 30       	cpi	r18, 0x02	; 2
    155e:	31 05       	cpc	r19, r1
    1560:	2c f4       	brge	.+10     	; 0x156c <GPIO_readPort+0x40>
    1562:	8b 81       	ldd	r24, Y+3	; 0x03
    1564:	9c 81       	ldd	r25, Y+4	; 0x04
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	61 f0       	breq	.+24     	; 0x1582 <GPIO_readPort+0x56>
    156a:	1e c0       	rjmp	.+60     	; 0x15a8 <GPIO_readPort+0x7c>
    156c:	2b 81       	ldd	r18, Y+3	; 0x03
    156e:	3c 81       	ldd	r19, Y+4	; 0x04
    1570:	22 30       	cpi	r18, 0x02	; 2
    1572:	31 05       	cpc	r19, r1
    1574:	81 f0       	breq	.+32     	; 0x1596 <GPIO_readPort+0x6a>
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	91 05       	cpc	r25, r1
    157e:	81 f0       	breq	.+32     	; 0x15a0 <GPIO_readPort+0x74>
    1580:	13 c0       	rjmp	.+38     	; 0x15a8 <GPIO_readPort+0x7c>
		{
		case PORTA_ID:
			result =  PINA;
    1582:	e9 e3       	ldi	r30, 0x39	; 57
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	89 83       	std	Y+1, r24	; 0x01
    158a:	0e c0       	rjmp	.+28     	; 0x15a8 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			result =  PINB;
    158c:	e6 e3       	ldi	r30, 0x36	; 54
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	89 83       	std	Y+1, r24	; 0x01
    1594:	09 c0       	rjmp	.+18     	; 0x15a8 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			result =  PINC;
    1596:	e3 e3       	ldi	r30, 0x33	; 51
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	04 c0       	rjmp	.+8      	; 0x15a8 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			result =  PIND;
    15a0:	e0 e3       	ldi	r30, 0x30	; 48
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return result;
    15a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	cf 91       	pop	r28
    15b4:	df 91       	pop	r29
    15b6:	08 95       	ret

000015b8 <__vector_6>:
/*Global variable to hold the address of the call back func*/
static volatile void (*g_callBackFuncPtr)(void) = NULL_PTR;

/*Interrupt service routine for ICU*/
ISR(TIMER1_CAPT_vect)
{
    15b8:	1f 92       	push	r1
    15ba:	0f 92       	push	r0
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
    15da:	df 93       	push	r29
    15dc:	cf 93       	push	r28
    15de:	cd b7       	in	r28, 0x3d	; 61
    15e0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackFuncPtr != NULL_PTR)
    15e2:	80 91 86 01 	lds	r24, 0x0186
    15e6:	90 91 87 01 	lds	r25, 0x0187
    15ea:	00 97       	sbiw	r24, 0x00	; 0
    15ec:	29 f0       	breq	.+10     	; 0x15f8 <__vector_6+0x40>
	{
		(*g_callBackFuncPtr)();
    15ee:	e0 91 86 01 	lds	r30, 0x0186
    15f2:	f0 91 87 01 	lds	r31, 0x0187
    15f6:	09 95       	icall
	}
}
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	ff 91       	pop	r31
    15fe:	ef 91       	pop	r30
    1600:	bf 91       	pop	r27
    1602:	af 91       	pop	r26
    1604:	9f 91       	pop	r25
    1606:	8f 91       	pop	r24
    1608:	7f 91       	pop	r23
    160a:	6f 91       	pop	r22
    160c:	5f 91       	pop	r21
    160e:	4f 91       	pop	r20
    1610:	3f 91       	pop	r19
    1612:	2f 91       	pop	r18
    1614:	0f 90       	pop	r0
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	0f 90       	pop	r0
    161a:	1f 90       	pop	r1
    161c:	18 95       	reti

0000161e <ICU_init>:

void ICU_init(const ICU_ConfigType * config_ptr)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	00 d0       	rcall	.+0      	; 0x1624 <ICU_init+0x6>
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
	/*Timer1 is set to normal mode*/
	SET_BIT(TCCR1A,FOC1A);
    162c:	af e4       	ldi	r26, 0x4F	; 79
    162e:	b0 e0       	ldi	r27, 0x00	; 0
    1630:	ef e4       	ldi	r30, 0x4F	; 79
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	88 60       	ori	r24, 0x08	; 8
    1638:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    163a:	af e4       	ldi	r26, 0x4F	; 79
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	ef e4       	ldi	r30, 0x4F	; 79
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	84 60       	ori	r24, 0x04	; 4
    1646:	8c 93       	st	X, r24

	/*set the direction of PD6 pin to input*/
	SET_BIT(DDRD,PD6);
    1648:	a1 e3       	ldi	r26, 0x31	; 49
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e1 e3       	ldi	r30, 0x31	; 49
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	80 64       	ori	r24, 0x40	; 64
    1654:	8c 93       	st	X, r24

	/*set ICU initial triggering edge*/
	if(config_ptr ->edge == ICU_FALLING_EDGE)
    1656:	e9 81       	ldd	r30, Y+1	; 0x01
    1658:	fa 81       	ldd	r31, Y+2	; 0x02
    165a:	81 81       	ldd	r24, Z+1	; 0x01
    165c:	88 23       	and	r24, r24
    165e:	41 f4       	brne	.+16     	; 0x1670 <ICU_init+0x52>
	{
		CLEAR_BIT(TCCR1B,ICES1);
    1660:	ae e4       	ldi	r26, 0x4E	; 78
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ee e4       	ldi	r30, 0x4E	; 78
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	8f 7b       	andi	r24, 0xBF	; 191
    166c:	8c 93       	st	X, r24
    166e:	0c c0       	rjmp	.+24     	; 0x1688 <ICU_init+0x6a>
	}
	else if(config_ptr ->edge == ICU_RISING_EDGE)
    1670:	e9 81       	ldd	r30, Y+1	; 0x01
    1672:	fa 81       	ldd	r31, Y+2	; 0x02
    1674:	81 81       	ldd	r24, Z+1	; 0x01
    1676:	81 30       	cpi	r24, 0x01	; 1
    1678:	39 f4       	brne	.+14     	; 0x1688 <ICU_init+0x6a>
	{
		SET_BIT(TCCR1B,ICES1);
    167a:	ae e4       	ldi	r26, 0x4E	; 78
    167c:	b0 e0       	ldi	r27, 0x00	; 0
    167e:	ee e4       	ldi	r30, 0x4E	; 78
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	80 64       	ori	r24, 0x40	; 64
    1686:	8c 93       	st	X, r24
	}

	/*set the clock prescaler*/
	TCCR1B = (TCCR1B & 0xF8) | ((config_ptr ->clock) & 0x03);
    1688:	ae e4       	ldi	r26, 0x4E	; 78
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ee e4       	ldi	r30, 0x4E	; 78
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	98 2f       	mov	r25, r24
    1694:	98 7f       	andi	r25, 0xF8	; 248
    1696:	e9 81       	ldd	r30, Y+1	; 0x01
    1698:	fa 81       	ldd	r31, Y+2	; 0x02
    169a:	80 81       	ld	r24, Z
    169c:	83 70       	andi	r24, 0x03	; 3
    169e:	89 2b       	or	r24, r25
    16a0:	8c 93       	st	X, r24

	/*initialize TCNT1 register to 0*/
	TCNT1 = 0;
    16a2:	ec e4       	ldi	r30, 0x4C	; 76
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	11 82       	std	Z+1, r1	; 0x01
    16a8:	10 82       	st	Z, r1

	/*initialize ICR1 register to 0*/
	ICR1 = 0;
    16aa:	e6 e4       	ldi	r30, 0x46	; 70
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	11 82       	std	Z+1, r1	; 0x01
    16b0:	10 82       	st	Z, r1

	/*enable ICU interrupt*/
	SET_BIT(TIMSK,TICIE1);
    16b2:	a9 e5       	ldi	r26, 0x59	; 89
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e9 e5       	ldi	r30, 0x59	; 89
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	80 62       	ori	r24, 0x20	; 32
    16be:	8c 93       	st	X, r24
}
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <ICU_setCallBack>:

void ICU_setCallBack(void(*a_ptr)(void))
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <ICU_setCallBack+0x6>
    16d0:	cd b7       	in	r28, 0x3d	; 61
    16d2:	de b7       	in	r29, 0x3e	; 62
    16d4:	9a 83       	std	Y+2, r25	; 0x02
    16d6:	89 83       	std	Y+1, r24	; 0x01
	/*save the address of the call back func in a priv global variable*/
	g_callBackFuncPtr = a_ptr;
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	9a 81       	ldd	r25, Y+2	; 0x02
    16dc:	90 93 87 01 	sts	0x0187, r25
    16e0:	80 93 86 01 	sts	0x0186, r24
}
    16e4:	0f 90       	pop	r0
    16e6:	0f 90       	pop	r0
    16e8:	cf 91       	pop	r28
    16ea:	df 91       	pop	r29
    16ec:	08 95       	ret

000016ee <ICU_setEdgeDetectionType>:

void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    16ee:	df 93       	push	r29
    16f0:	cf 93       	push	r28
    16f2:	0f 92       	push	r0
    16f4:	cd b7       	in	r28, 0x3d	; 61
    16f6:	de b7       	in	r29, 0x3e	; 62
    16f8:	89 83       	std	Y+1, r24	; 0x01
	/*set ICU triggering edge as required*/
	if(a_edgeType == ICU_FALLING_EDGE)
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	88 23       	and	r24, r24
    16fe:	41 f4       	brne	.+16     	; 0x1710 <ICU_setEdgeDetectionType+0x22>
	{
		CLEAR_BIT(TCCR1B,ICES1);
    1700:	ae e4       	ldi	r26, 0x4E	; 78
    1702:	b0 e0       	ldi	r27, 0x00	; 0
    1704:	ee e4       	ldi	r30, 0x4E	; 78
    1706:	f0 e0       	ldi	r31, 0x00	; 0
    1708:	80 81       	ld	r24, Z
    170a:	8f 7b       	andi	r24, 0xBF	; 191
    170c:	8c 93       	st	X, r24
    170e:	0a c0       	rjmp	.+20     	; 0x1724 <ICU_setEdgeDetectionType+0x36>
	}
	else if(a_edgeType == ICU_RISING_EDGE)
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	39 f4       	brne	.+14     	; 0x1724 <ICU_setEdgeDetectionType+0x36>
	{
		SET_BIT(TCCR1B,ICES1);
    1716:	ae e4       	ldi	r26, 0x4E	; 78
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ee e4       	ldi	r30, 0x4E	; 78
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	8c 93       	st	X, r24
	}
}
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <ICU_getInputCaptureValue>:

uint16 ICU_getInputCaptureValue(void)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	cd b7       	in	r28, 0x3d	; 61
    1732:	de b7       	in	r29, 0x3e	; 62
	/*read the ICR1 register*/
	return ICR1;
    1734:	e6 e4       	ldi	r30, 0x46	; 70
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	91 81       	ldd	r25, Z+1	; 0x01
}
    173c:	cf 91       	pop	r28
    173e:	df 91       	pop	r29
    1740:	08 95       	ret

00001742 <ICU_clearTimerValue>:

void ICU_clearTimerValue(void)
{
    1742:	df 93       	push	r29
    1744:	cf 93       	push	r28
    1746:	cd b7       	in	r28, 0x3d	; 61
    1748:	de b7       	in	r29, 0x3e	; 62
	/*clear TCNT1 register*/
	TCNT1 = 0;
    174a:	ec e4       	ldi	r30, 0x4C	; 76
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	11 82       	std	Z+1, r1	; 0x01
    1750:	10 82       	st	Z, r1
}
    1752:	cf 91       	pop	r28
    1754:	df 91       	pop	r29
    1756:	08 95       	ret

00001758 <ICU_deInit>:

void ICU_deInit(void)
{
    1758:	df 93       	push	r29
    175a:	cf 93       	push	r28
    175c:	cd b7       	in	r28, 0x3d	; 61
    175e:	de b7       	in	r29, 0x3e	; 62
	/*disable ICU*/
	/*clear all Timer1/ICU registers*/
	TCCR1A = 0;
    1760:	ef e4       	ldi	r30, 0x4F	; 79
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	10 82       	st	Z, r1
	TCCR1B = 0;
    1766:	ee e4       	ldi	r30, 0x4E	; 78
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	10 82       	st	Z, r1
	TCNT1 = 0;
    176c:	ec e4       	ldi	r30, 0x4C	; 76
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	11 82       	std	Z+1, r1	; 0x01
    1772:	10 82       	st	Z, r1
	ICR1 = 0;
    1774:	e6 e4       	ldi	r30, 0x46	; 70
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	11 82       	std	Z+1, r1	; 0x01
    177a:	10 82       	st	Z, r1

	/*disable ICU interrupt*/
	CLEAR_BIT(TIMSK,TICIE1);
    177c:	a9 e5       	ldi	r26, 0x59	; 89
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e9 e5       	ldi	r30, 0x59	; 89
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	8f 7d       	andi	r24, 0xDF	; 223
    1788:	8c 93       	st	X, r24

	/*reset priv global variable holding call back func address*/
	g_callBackFuncPtr = NULL_PTR;
    178a:	10 92 87 01 	sts	0x0187, r1
    178e:	10 92 86 01 	sts	0x0186, r1
}
    1792:	cf 91       	pop	r28
    1794:	df 91       	pop	r29
    1796:	08 95       	ret

00001798 <LCD_init>:
#include <avr/io.h> /* To use the IO Ports Registers */
#include <util/delay.h>

/*LCD init*/
void LCD_init(void)
{
    1798:	df 93       	push	r29
    179a:	cf 93       	push	r28
    179c:	cd b7       	in	r28, 0x3d	; 61
    179e:	de b7       	in	r29, 0x3e	; 62
    17a0:	2e 97       	sbiw	r28, 0x0e	; 14
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(RS_PORT, RS_PIN, PIN_OUTPUT);
    17ac:	80 e0       	ldi	r24, 0x00	; 0
    17ae:	61 e0       	ldi	r22, 0x01	; 1
    17b0:	41 e0       	ldi	r20, 0x01	; 1
    17b2:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(ENABLE_PORT, ENABLE_PIN, PIN_OUTPUT);
    17b6:	80 e0       	ldi	r24, 0x00	; 0
    17b8:	62 e0       	ldi	r22, 0x02	; 2
    17ba:	41 e0       	ldi	r20, 0x01	; 1
    17bc:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
	GPIO_setupPortDirection(LCD_DATA_PORT, PORT_OUTPUT);
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 4)
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DATA_PIN_1, PIN_OUTPUT);
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	63 e0       	ldi	r22, 0x03	; 3
    17c4:	41 e0       	ldi	r20, 0x01	; 1
    17c6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DATA_PIN_2, PIN_OUTPUT);
    17ca:	80 e0       	ldi	r24, 0x00	; 0
    17cc:	64 e0       	ldi	r22, 0x04	; 4
    17ce:	41 e0       	ldi	r20, 0x01	; 1
    17d0:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DATA_PIN_3, PIN_OUTPUT);
    17d4:	80 e0       	ldi	r24, 0x00	; 0
    17d6:	65 e0       	ldi	r22, 0x05	; 5
    17d8:	41 e0       	ldi	r20, 0x01	; 1
    17da:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT, LCD_DATA_PIN_4, PIN_OUTPUT);
    17de:	80 e0       	ldi	r24, 0x00	; 0
    17e0:	66 e0       	ldi	r22, 0x06	; 6
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	a0 ea       	ldi	r26, 0xA0	; 160
    17ee:	b1 e4       	ldi	r27, 0x41	; 65
    17f0:	8b 87       	std	Y+11, r24	; 0x0b
    17f2:	9c 87       	std	Y+12, r25	; 0x0c
    17f4:	ad 87       	std	Y+13, r26	; 0x0d
    17f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    17fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    17fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	4a e7       	ldi	r20, 0x7A	; 122
    1806:	55 e4       	ldi	r21, 0x45	; 69
    1808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    180c:	dc 01       	movw	r26, r24
    180e:	cb 01       	movw	r24, r22
    1810:	8f 83       	std	Y+7, r24	; 0x07
    1812:	98 87       	std	Y+8, r25	; 0x08
    1814:	a9 87       	std	Y+9, r26	; 0x09
    1816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1818:	6f 81       	ldd	r22, Y+7	; 0x07
    181a:	78 85       	ldd	r23, Y+8	; 0x08
    181c:	89 85       	ldd	r24, Y+9	; 0x09
    181e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1820:	20 e0       	ldi	r18, 0x00	; 0
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	40 e8       	ldi	r20, 0x80	; 128
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    182c:	88 23       	and	r24, r24
    182e:	2c f4       	brge	.+10     	; 0x183a <LCD_init+0xa2>
		__ticks = 1;
    1830:	81 e0       	ldi	r24, 0x01	; 1
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	9e 83       	std	Y+6, r25	; 0x06
    1836:	8d 83       	std	Y+5, r24	; 0x05
    1838:	3f c0       	rjmp	.+126    	; 0x18b8 <LCD_init+0x120>
	else if (__tmp > 65535)
    183a:	6f 81       	ldd	r22, Y+7	; 0x07
    183c:	78 85       	ldd	r23, Y+8	; 0x08
    183e:	89 85       	ldd	r24, Y+9	; 0x09
    1840:	9a 85       	ldd	r25, Y+10	; 0x0a
    1842:	20 e0       	ldi	r18, 0x00	; 0
    1844:	3f ef       	ldi	r19, 0xFF	; 255
    1846:	4f e7       	ldi	r20, 0x7F	; 127
    1848:	57 e4       	ldi	r21, 0x47	; 71
    184a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    184e:	18 16       	cp	r1, r24
    1850:	4c f5       	brge	.+82     	; 0x18a4 <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1852:	6b 85       	ldd	r22, Y+11	; 0x0b
    1854:	7c 85       	ldd	r23, Y+12	; 0x0c
    1856:	8d 85       	ldd	r24, Y+13	; 0x0d
    1858:	9e 85       	ldd	r25, Y+14	; 0x0e
    185a:	20 e0       	ldi	r18, 0x00	; 0
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	40 e2       	ldi	r20, 0x20	; 32
    1860:	51 e4       	ldi	r21, 0x41	; 65
    1862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	bc 01       	movw	r22, r24
    186c:	cd 01       	movw	r24, r26
    186e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1872:	dc 01       	movw	r26, r24
    1874:	cb 01       	movw	r24, r22
    1876:	9e 83       	std	Y+6, r25	; 0x06
    1878:	8d 83       	std	Y+5, r24	; 0x05
    187a:	0f c0       	rjmp	.+30     	; 0x189a <LCD_init+0x102>
    187c:	80 e9       	ldi	r24, 0x90	; 144
    187e:	91 e0       	ldi	r25, 0x01	; 1
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1884:	8b 81       	ldd	r24, Y+3	; 0x03
    1886:	9c 81       	ldd	r25, Y+4	; 0x04
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	f1 f7       	brne	.-4      	; 0x1888 <LCD_init+0xf0>
    188c:	9c 83       	std	Y+4, r25	; 0x04
    188e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1890:	8d 81       	ldd	r24, Y+5	; 0x05
    1892:	9e 81       	ldd	r25, Y+6	; 0x06
    1894:	01 97       	sbiw	r24, 0x01	; 1
    1896:	9e 83       	std	Y+6, r25	; 0x06
    1898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    189a:	8d 81       	ldd	r24, Y+5	; 0x05
    189c:	9e 81       	ldd	r25, Y+6	; 0x06
    189e:	00 97       	sbiw	r24, 0x00	; 0
    18a0:	69 f7       	brne	.-38     	; 0x187c <LCD_init+0xe4>
    18a2:	14 c0       	rjmp	.+40     	; 0x18cc <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18a4:	6f 81       	ldd	r22, Y+7	; 0x07
    18a6:	78 85       	ldd	r23, Y+8	; 0x08
    18a8:	89 85       	ldd	r24, Y+9	; 0x09
    18aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18b0:	dc 01       	movw	r26, r24
    18b2:	cb 01       	movw	r24, r22
    18b4:	9e 83       	std	Y+6, r25	; 0x06
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	9e 81       	ldd	r25, Y+6	; 0x06
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
    18c0:	89 81       	ldd	r24, Y+1	; 0x01
    18c2:	9a 81       	ldd	r25, Y+2	; 0x02
    18c4:	01 97       	sbiw	r24, 0x01	; 1
    18c6:	f1 f7       	brne	.-4      	; 0x18c4 <LCD_init+0x12c>
    18c8:	9a 83       	std	Y+2, r25	; 0x02
    18ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    18cc:	83 e3       	ldi	r24, 0x33	; 51
    18ce:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    18d2:	82 e3       	ldi	r24, 0x32	; 50
    18d4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    18d8:	88 e2       	ldi	r24, 0x28	; 40
    18da:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_sendCommand>

#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    18de:	8c e0       	ldi	r24, 0x0C	; 12
    18e0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_sendCommand>
}
    18ea:	2e 96       	adiw	r28, 0x0e	; 14
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	cf 91       	pop	r28
    18f8:	df 91       	pop	r29
    18fa:	08 95       	ret

000018fc <LCD_sendCommand>:

/*Send commad*/
void LCD_sendCommand(uint8 command)
{
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	cd b7       	in	r28, 0x3d	; 61
    1906:	de b7       	in	r29, 0x3e	; 62
    1908:	c3 56       	subi	r28, 0x63	; 99
    190a:	d0 40       	sbci	r29, 0x00	; 0
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	fe 01       	movw	r30, r28
    1918:	ed 59       	subi	r30, 0x9D	; 157
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 83       	st	Z, r24
	GPIO_writePin(RS_PORT, RS_PIN, LOGIC_LOW);
    191e:	80 e0       	ldi	r24, 0x00	; 0
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	40 e0       	ldi	r20, 0x00	; 0
    1924:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    1928:	fe 01       	movw	r30, r28
    192a:	e1 5a       	subi	r30, 0xA1	; 161
    192c:	ff 4f       	sbci	r31, 0xFF	; 255
    192e:	80 e0       	ldi	r24, 0x00	; 0
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	a0 e8       	ldi	r26, 0x80	; 128
    1934:	bf e3       	ldi	r27, 0x3F	; 63
    1936:	80 83       	st	Z, r24
    1938:	91 83       	std	Z+1, r25	; 0x01
    193a:	a2 83       	std	Z+2, r26	; 0x02
    193c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193e:	8e 01       	movw	r16, r28
    1940:	05 5a       	subi	r16, 0xA5	; 165
    1942:	1f 4f       	sbci	r17, 0xFF	; 255
    1944:	fe 01       	movw	r30, r28
    1946:	e1 5a       	subi	r30, 0xA1	; 161
    1948:	ff 4f       	sbci	r31, 0xFF	; 255
    194a:	60 81       	ld	r22, Z
    194c:	71 81       	ldd	r23, Z+1	; 0x01
    194e:	82 81       	ldd	r24, Z+2	; 0x02
    1950:	93 81       	ldd	r25, Z+3	; 0x03
    1952:	20 e0       	ldi	r18, 0x00	; 0
    1954:	30 e0       	ldi	r19, 0x00	; 0
    1956:	4a e7       	ldi	r20, 0x7A	; 122
    1958:	55 e4       	ldi	r21, 0x45	; 69
    195a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	f8 01       	movw	r30, r16
    1964:	80 83       	st	Z, r24
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	a2 83       	std	Z+2, r26	; 0x02
    196a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    196c:	fe 01       	movw	r30, r28
    196e:	e5 5a       	subi	r30, 0xA5	; 165
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	60 81       	ld	r22, Z
    1974:	71 81       	ldd	r23, Z+1	; 0x01
    1976:	82 81       	ldd	r24, Z+2	; 0x02
    1978:	93 81       	ldd	r25, Z+3	; 0x03
    197a:	20 e0       	ldi	r18, 0x00	; 0
    197c:	30 e0       	ldi	r19, 0x00	; 0
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	5f e3       	ldi	r21, 0x3F	; 63
    1982:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1986:	88 23       	and	r24, r24
    1988:	44 f4       	brge	.+16     	; 0x199a <LCD_sendCommand+0x9e>
		__ticks = 1;
    198a:	fe 01       	movw	r30, r28
    198c:	e7 5a       	subi	r30, 0xA7	; 167
    198e:	ff 4f       	sbci	r31, 0xFF	; 255
    1990:	81 e0       	ldi	r24, 0x01	; 1
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	91 83       	std	Z+1, r25	; 0x01
    1996:	80 83       	st	Z, r24
    1998:	64 c0       	rjmp	.+200    	; 0x1a62 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    199a:	fe 01       	movw	r30, r28
    199c:	e5 5a       	subi	r30, 0xA5	; 165
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	3f ef       	ldi	r19, 0xFF	; 255
    19ac:	4f e7       	ldi	r20, 0x7F	; 127
    19ae:	57 e4       	ldi	r21, 0x47	; 71
    19b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19b4:	18 16       	cp	r1, r24
    19b6:	0c f0       	brlt	.+2      	; 0x19ba <LCD_sendCommand+0xbe>
    19b8:	43 c0       	rjmp	.+134    	; 0x1a40 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19ba:	fe 01       	movw	r30, r28
    19bc:	e1 5a       	subi	r30, 0xA1	; 161
    19be:	ff 4f       	sbci	r31, 0xFF	; 255
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	8e 01       	movw	r16, r28
    19da:	07 5a       	subi	r16, 0xA7	; 167
    19dc:	1f 4f       	sbci	r17, 0xFF	; 255
    19de:	bc 01       	movw	r22, r24
    19e0:	cd 01       	movw	r24, r26
    19e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e6:	dc 01       	movw	r26, r24
    19e8:	cb 01       	movw	r24, r22
    19ea:	f8 01       	movw	r30, r16
    19ec:	91 83       	std	Z+1, r25	; 0x01
    19ee:	80 83       	st	Z, r24
    19f0:	1f c0       	rjmp	.+62     	; 0x1a30 <LCD_sendCommand+0x134>
    19f2:	fe 01       	movw	r30, r28
    19f4:	e9 5a       	subi	r30, 0xA9	; 169
    19f6:	ff 4f       	sbci	r31, 0xFF	; 255
    19f8:	80 e9       	ldi	r24, 0x90	; 144
    19fa:	91 e0       	ldi	r25, 0x01	; 1
    19fc:	91 83       	std	Z+1, r25	; 0x01
    19fe:	80 83       	st	Z, r24
    1a00:	fe 01       	movw	r30, r28
    1a02:	e9 5a       	subi	r30, 0xA9	; 169
    1a04:	ff 4f       	sbci	r31, 0xFF	; 255
    1a06:	80 81       	ld	r24, Z
    1a08:	91 81       	ldd	r25, Z+1	; 0x01
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_sendCommand+0x10e>
    1a0e:	fe 01       	movw	r30, r28
    1a10:	e9 5a       	subi	r30, 0xA9	; 169
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	91 83       	std	Z+1, r25	; 0x01
    1a16:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a18:	de 01       	movw	r26, r28
    1a1a:	a7 5a       	subi	r26, 0xA7	; 167
    1a1c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a1e:	fe 01       	movw	r30, r28
    1a20:	e7 5a       	subi	r30, 0xA7	; 167
    1a22:	ff 4f       	sbci	r31, 0xFF	; 255
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	01 97       	sbiw	r24, 0x01	; 1
    1a2a:	11 96       	adiw	r26, 0x01	; 1
    1a2c:	9c 93       	st	X, r25
    1a2e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	fe 01       	movw	r30, r28
    1a32:	e7 5a       	subi	r30, 0xA7	; 167
    1a34:	ff 4f       	sbci	r31, 0xFF	; 255
    1a36:	80 81       	ld	r24, Z
    1a38:	91 81       	ldd	r25, Z+1	; 0x01
    1a3a:	00 97       	sbiw	r24, 0x00	; 0
    1a3c:	d1 f6       	brne	.-76     	; 0x19f2 <LCD_sendCommand+0xf6>
    1a3e:	27 c0       	rjmp	.+78     	; 0x1a8e <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a40:	8e 01       	movw	r16, r28
    1a42:	07 5a       	subi	r16, 0xA7	; 167
    1a44:	1f 4f       	sbci	r17, 0xFF	; 255
    1a46:	fe 01       	movw	r30, r28
    1a48:	e5 5a       	subi	r30, 0xA5	; 165
    1a4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4c:	60 81       	ld	r22, Z
    1a4e:	71 81       	ldd	r23, Z+1	; 0x01
    1a50:	82 81       	ldd	r24, Z+2	; 0x02
    1a52:	93 81       	ldd	r25, Z+3	; 0x03
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	f8 01       	movw	r30, r16
    1a5e:	91 83       	std	Z+1, r25	; 0x01
    1a60:	80 83       	st	Z, r24
    1a62:	de 01       	movw	r26, r28
    1a64:	ab 5a       	subi	r26, 0xAB	; 171
    1a66:	bf 4f       	sbci	r27, 0xFF	; 255
    1a68:	fe 01       	movw	r30, r28
    1a6a:	e7 5a       	subi	r30, 0xA7	; 167
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	8d 93       	st	X+, r24
    1a74:	9c 93       	st	X, r25
    1a76:	fe 01       	movw	r30, r28
    1a78:	eb 5a       	subi	r30, 0xAB	; 171
    1a7a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7c:	80 81       	ld	r24, Z
    1a7e:	91 81       	ldd	r25, Z+1	; 0x01
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	f1 f7       	brne	.-4      	; 0x1a80 <LCD_sendCommand+0x184>
    1a84:	fe 01       	movw	r30, r28
    1a86:	eb 5a       	subi	r30, 0xAB	; 171
    1a88:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_HIGH);
    1a8e:	80 e0       	ldi	r24, 0x00	; 0
    1a90:	62 e0       	ldi	r22, 0x02	; 2
    1a92:	41 e0       	ldi	r20, 0x01	; 1
    1a94:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    1a98:	fe 01       	movw	r30, r28
    1a9a:	ef 5a       	subi	r30, 0xAF	; 175
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	80 e0       	ldi	r24, 0x00	; 0
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	a0 e8       	ldi	r26, 0x80	; 128
    1aa4:	bf e3       	ldi	r27, 0x3F	; 63
    1aa6:	80 83       	st	Z, r24
    1aa8:	91 83       	std	Z+1, r25	; 0x01
    1aaa:	a2 83       	std	Z+2, r26	; 0x02
    1aac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aae:	8e 01       	movw	r16, r28
    1ab0:	03 5b       	subi	r16, 0xB3	; 179
    1ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	ef 5a       	subi	r30, 0xAF	; 175
    1ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	4a e7       	ldi	r20, 0x7A	; 122
    1ac8:	55 e4       	ldi	r21, 0x45	; 69
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	f8 01       	movw	r30, r16
    1ad4:	80 83       	st	Z, r24
    1ad6:	91 83       	std	Z+1, r25	; 0x01
    1ad8:	a2 83       	std	Z+2, r26	; 0x02
    1ada:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1adc:	fe 01       	movw	r30, r28
    1ade:	e3 5b       	subi	r30, 0xB3	; 179
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	60 81       	ld	r22, Z
    1ae4:	71 81       	ldd	r23, Z+1	; 0x01
    1ae6:	82 81       	ldd	r24, Z+2	; 0x02
    1ae8:	93 81       	ldd	r25, Z+3	; 0x03
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	40 e8       	ldi	r20, 0x80	; 128
    1af0:	5f e3       	ldi	r21, 0x3F	; 63
    1af2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af6:	88 23       	and	r24, r24
    1af8:	44 f4       	brge	.+16     	; 0x1b0a <LCD_sendCommand+0x20e>
		__ticks = 1;
    1afa:	fe 01       	movw	r30, r28
    1afc:	e5 5b       	subi	r30, 0xB5	; 181
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	64 c0       	rjmp	.+200    	; 0x1bd2 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1b0a:	fe 01       	movw	r30, r28
    1b0c:	e3 5b       	subi	r30, 0xB3	; 179
    1b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b10:	60 81       	ld	r22, Z
    1b12:	71 81       	ldd	r23, Z+1	; 0x01
    1b14:	82 81       	ldd	r24, Z+2	; 0x02
    1b16:	93 81       	ldd	r25, Z+3	; 0x03
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	3f ef       	ldi	r19, 0xFF	; 255
    1b1c:	4f e7       	ldi	r20, 0x7F	; 127
    1b1e:	57 e4       	ldi	r21, 0x47	; 71
    1b20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b24:	18 16       	cp	r1, r24
    1b26:	0c f0       	brlt	.+2      	; 0x1b2a <LCD_sendCommand+0x22e>
    1b28:	43 c0       	rjmp	.+134    	; 0x1bb0 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ef 5a       	subi	r30, 0xAF	; 175
    1b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b30:	60 81       	ld	r22, Z
    1b32:	71 81       	ldd	r23, Z+1	; 0x01
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	93 81       	ldd	r25, Z+3	; 0x03
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e2       	ldi	r20, 0x20	; 32
    1b3e:	51 e4       	ldi	r21, 0x41	; 65
    1b40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b44:	dc 01       	movw	r26, r24
    1b46:	cb 01       	movw	r24, r22
    1b48:	8e 01       	movw	r16, r28
    1b4a:	05 5b       	subi	r16, 0xB5	; 181
    1b4c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b4e:	bc 01       	movw	r22, r24
    1b50:	cd 01       	movw	r24, r26
    1b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
    1b60:	1f c0       	rjmp	.+62     	; 0x1ba0 <LCD_sendCommand+0x2a4>
    1b62:	fe 01       	movw	r30, r28
    1b64:	e7 5b       	subi	r30, 0xB7	; 183
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 e9       	ldi	r24, 0x90	; 144
    1b6a:	91 e0       	ldi	r25, 0x01	; 1
    1b6c:	91 83       	std	Z+1, r25	; 0x01
    1b6e:	80 83       	st	Z, r24
    1b70:	fe 01       	movw	r30, r28
    1b72:	e7 5b       	subi	r30, 0xB7	; 183
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	80 81       	ld	r24, Z
    1b78:	91 81       	ldd	r25, Z+1	; 0x01
    1b7a:	01 97       	sbiw	r24, 0x01	; 1
    1b7c:	f1 f7       	brne	.-4      	; 0x1b7a <LCD_sendCommand+0x27e>
    1b7e:	fe 01       	movw	r30, r28
    1b80:	e7 5b       	subi	r30, 0xB7	; 183
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	91 83       	std	Z+1, r25	; 0x01
    1b86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b88:	de 01       	movw	r26, r28
    1b8a:	a5 5b       	subi	r26, 0xB5	; 181
    1b8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e5 5b       	subi	r30, 0xB5	; 181
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
    1b98:	01 97       	sbiw	r24, 0x01	; 1
    1b9a:	11 96       	adiw	r26, 0x01	; 1
    1b9c:	9c 93       	st	X, r25
    1b9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba0:	fe 01       	movw	r30, r28
    1ba2:	e5 5b       	subi	r30, 0xB5	; 181
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	80 81       	ld	r24, Z
    1ba8:	91 81       	ldd	r25, Z+1	; 0x01
    1baa:	00 97       	sbiw	r24, 0x00	; 0
    1bac:	d1 f6       	brne	.-76     	; 0x1b62 <LCD_sendCommand+0x266>
    1bae:	27 c0       	rjmp	.+78     	; 0x1bfe <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	05 5b       	subi	r16, 0xB5	; 181
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e3 5b       	subi	r30, 0xB3	; 179
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	f8 01       	movw	r30, r16
    1bce:	91 83       	std	Z+1, r25	; 0x01
    1bd0:	80 83       	st	Z, r24
    1bd2:	de 01       	movw	r26, r28
    1bd4:	a9 5b       	subi	r26, 0xB9	; 185
    1bd6:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e5 5b       	subi	r30, 0xB5	; 181
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	8d 93       	st	X+, r24
    1be4:	9c 93       	st	X, r25
    1be6:	fe 01       	movw	r30, r28
    1be8:	e9 5b       	subi	r30, 0xB9	; 185
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	80 81       	ld	r24, Z
    1bee:	91 81       	ldd	r25, Z+1	; 0x01
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <LCD_sendCommand+0x2f4>
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e9 5b       	subi	r30, 0xB9	; 185
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	91 83       	std	Z+1, r25	; 0x01
    1bfc:	80 83       	st	Z, r24
	_delay_ms(1);
#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT, command);

#elif(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_1,GET_BIT(command,4));
    1bfe:	fe 01       	movw	r30, r28
    1c00:	ed 59       	subi	r30, 0x9D	; 157
    1c02:	ff 4f       	sbci	r31, 0xFF	; 255
    1c04:	80 81       	ld	r24, Z
    1c06:	88 2f       	mov	r24, r24
    1c08:	90 e0       	ldi	r25, 0x00	; 0
    1c0a:	80 71       	andi	r24, 0x10	; 16
    1c0c:	90 70       	andi	r25, 0x00	; 0
    1c0e:	95 95       	asr	r25
    1c10:	87 95       	ror	r24
    1c12:	95 95       	asr	r25
    1c14:	87 95       	ror	r24
    1c16:	95 95       	asr	r25
    1c18:	87 95       	ror	r24
    1c1a:	95 95       	asr	r25
    1c1c:	87 95       	ror	r24
    1c1e:	98 2f       	mov	r25, r24
    1c20:	80 e0       	ldi	r24, 0x00	; 0
    1c22:	63 e0       	ldi	r22, 0x03	; 3
    1c24:	49 2f       	mov	r20, r25
    1c26:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_2,GET_BIT(command,5));
    1c2a:	fe 01       	movw	r30, r28
    1c2c:	ed 59       	subi	r30, 0x9D	; 157
    1c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c30:	80 81       	ld	r24, Z
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	80 72       	andi	r24, 0x20	; 32
    1c38:	90 70       	andi	r25, 0x00	; 0
    1c3a:	95 95       	asr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	95 95       	asr	r25
    1c40:	87 95       	ror	r24
    1c42:	95 95       	asr	r25
    1c44:	87 95       	ror	r24
    1c46:	95 95       	asr	r25
    1c48:	87 95       	ror	r24
    1c4a:	95 95       	asr	r25
    1c4c:	87 95       	ror	r24
    1c4e:	98 2f       	mov	r25, r24
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	64 e0       	ldi	r22, 0x04	; 4
    1c54:	49 2f       	mov	r20, r25
    1c56:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_3,GET_BIT(command,6));
    1c5a:	fe 01       	movw	r30, r28
    1c5c:	ed 59       	subi	r30, 0x9D	; 157
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	80 81       	ld	r24, Z
    1c62:	88 2f       	mov	r24, r24
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	80 74       	andi	r24, 0x40	; 64
    1c68:	90 70       	andi	r25, 0x00	; 0
    1c6a:	08 2e       	mov	r0, r24
    1c6c:	89 2f       	mov	r24, r25
    1c6e:	00 0c       	add	r0, r0
    1c70:	88 1f       	adc	r24, r24
    1c72:	99 0b       	sbc	r25, r25
    1c74:	00 0c       	add	r0, r0
    1c76:	88 1f       	adc	r24, r24
    1c78:	99 1f       	adc	r25, r25
    1c7a:	98 2f       	mov	r25, r24
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	65 e0       	ldi	r22, 0x05	; 5
    1c80:	49 2f       	mov	r20, r25
    1c82:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_4,GET_BIT(command,7));
    1c86:	fe 01       	movw	r30, r28
    1c88:	ed 59       	subi	r30, 0x9D	; 157
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	98 2f       	mov	r25, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	99 27       	eor	r25, r25
    1c94:	99 1f       	adc	r25, r25
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	66 e0       	ldi	r22, 0x06	; 6
    1c9a:	49 2f       	mov	r20, r25
    1c9c:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    1ca0:	fe 01       	movw	r30, r28
    1ca2:	ed 5b       	subi	r30, 0xBD	; 189
    1ca4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	a0 e8       	ldi	r26, 0x80	; 128
    1cac:	bf e3       	ldi	r27, 0x3F	; 63
    1cae:	80 83       	st	Z, r24
    1cb0:	91 83       	std	Z+1, r25	; 0x01
    1cb2:	a2 83       	std	Z+2, r26	; 0x02
    1cb4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	01 5c       	subi	r16, 0xC1	; 193
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	ed 5b       	subi	r30, 0xBD	; 189
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	60 81       	ld	r22, Z
    1cc4:	71 81       	ldd	r23, Z+1	; 0x01
    1cc6:	82 81       	ldd	r24, Z+2	; 0x02
    1cc8:	93 81       	ldd	r25, Z+3	; 0x03
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	4a e7       	ldi	r20, 0x7A	; 122
    1cd0:	55 e4       	ldi	r21, 0x45	; 69
    1cd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	f8 01       	movw	r30, r16
    1cdc:	80 83       	st	Z, r24
    1cde:	91 83       	std	Z+1, r25	; 0x01
    1ce0:	a2 83       	std	Z+2, r26	; 0x02
    1ce2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ce4:	fe 01       	movw	r30, r28
    1ce6:	ff 96       	adiw	r30, 0x3f	; 63
    1ce8:	60 81       	ld	r22, Z
    1cea:	71 81       	ldd	r23, Z+1	; 0x01
    1cec:	82 81       	ldd	r24, Z+2	; 0x02
    1cee:	93 81       	ldd	r25, Z+3	; 0x03
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	5f e3       	ldi	r21, 0x3F	; 63
    1cf8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cfc:	88 23       	and	r24, r24
    1cfe:	2c f4       	brge	.+10     	; 0x1d0a <LCD_sendCommand+0x40e>
		__ticks = 1;
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9e af       	std	Y+62, r25	; 0x3e
    1d06:	8d af       	std	Y+61, r24	; 0x3d
    1d08:	46 c0       	rjmp	.+140    	; 0x1d96 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1d0a:	fe 01       	movw	r30, r28
    1d0c:	ff 96       	adiw	r30, 0x3f	; 63
    1d0e:	60 81       	ld	r22, Z
    1d10:	71 81       	ldd	r23, Z+1	; 0x01
    1d12:	82 81       	ldd	r24, Z+2	; 0x02
    1d14:	93 81       	ldd	r25, Z+3	; 0x03
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	3f ef       	ldi	r19, 0xFF	; 255
    1d1a:	4f e7       	ldi	r20, 0x7F	; 127
    1d1c:	57 e4       	ldi	r21, 0x47	; 71
    1d1e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d22:	18 16       	cp	r1, r24
    1d24:	64 f5       	brge	.+88     	; 0x1d7e <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d26:	fe 01       	movw	r30, r28
    1d28:	ed 5b       	subi	r30, 0xBD	; 189
    1d2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2c:	60 81       	ld	r22, Z
    1d2e:	71 81       	ldd	r23, Z+1	; 0x01
    1d30:	82 81       	ldd	r24, Z+2	; 0x02
    1d32:	93 81       	ldd	r25, Z+3	; 0x03
    1d34:	20 e0       	ldi	r18, 0x00	; 0
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e2       	ldi	r20, 0x20	; 32
    1d3a:	51 e4       	ldi	r21, 0x41	; 65
    1d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d40:	dc 01       	movw	r26, r24
    1d42:	cb 01       	movw	r24, r22
    1d44:	bc 01       	movw	r22, r24
    1d46:	cd 01       	movw	r24, r26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9e af       	std	Y+62, r25	; 0x3e
    1d52:	8d af       	std	Y+61, r24	; 0x3d
    1d54:	0f c0       	rjmp	.+30     	; 0x1d74 <LCD_sendCommand+0x478>
    1d56:	80 e9       	ldi	r24, 0x90	; 144
    1d58:	91 e0       	ldi	r25, 0x01	; 1
    1d5a:	9c af       	std	Y+60, r25	; 0x3c
    1d5c:	8b af       	std	Y+59, r24	; 0x3b
    1d5e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d60:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	f1 f7       	brne	.-4      	; 0x1d62 <LCD_sendCommand+0x466>
    1d66:	9c af       	std	Y+60, r25	; 0x3c
    1d68:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d6c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	9e af       	std	Y+62, r25	; 0x3e
    1d72:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d74:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d76:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d78:	00 97       	sbiw	r24, 0x00	; 0
    1d7a:	69 f7       	brne	.-38     	; 0x1d56 <LCD_sendCommand+0x45a>
    1d7c:	16 c0       	rjmp	.+44     	; 0x1daa <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d7e:	fe 01       	movw	r30, r28
    1d80:	ff 96       	adiw	r30, 0x3f	; 63
    1d82:	60 81       	ld	r22, Z
    1d84:	71 81       	ldd	r23, Z+1	; 0x01
    1d86:	82 81       	ldd	r24, Z+2	; 0x02
    1d88:	93 81       	ldd	r25, Z+3	; 0x03
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	9e af       	std	Y+62, r25	; 0x3e
    1d94:	8d af       	std	Y+61, r24	; 0x3d
    1d96:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d98:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d9a:	9a af       	std	Y+58, r25	; 0x3a
    1d9c:	89 af       	std	Y+57, r24	; 0x39
    1d9e:	89 ad       	ldd	r24, Y+57	; 0x39
    1da0:	9a ad       	ldd	r25, Y+58	; 0x3a
    1da2:	01 97       	sbiw	r24, 0x01	; 1
    1da4:	f1 f7       	brne	.-4      	; 0x1da2 <LCD_sendCommand+0x4a6>
    1da6:	9a af       	std	Y+58, r25	; 0x3a
    1da8:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_LOW);
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	62 e0       	ldi	r22, 0x02	; 2
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    1db4:	80 e0       	ldi	r24, 0x00	; 0
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	a0 e8       	ldi	r26, 0x80	; 128
    1dba:	bf e3       	ldi	r27, 0x3F	; 63
    1dbc:	8d ab       	std	Y+53, r24	; 0x35
    1dbe:	9e ab       	std	Y+54, r25	; 0x36
    1dc0:	af ab       	std	Y+55, r26	; 0x37
    1dc2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dc4:	6d a9       	ldd	r22, Y+53	; 0x35
    1dc6:	7e a9       	ldd	r23, Y+54	; 0x36
    1dc8:	8f a9       	ldd	r24, Y+55	; 0x37
    1dca:	98 ad       	ldd	r25, Y+56	; 0x38
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	4a e7       	ldi	r20, 0x7A	; 122
    1dd2:	55 e4       	ldi	r21, 0x45	; 69
    1dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dd8:	dc 01       	movw	r26, r24
    1dda:	cb 01       	movw	r24, r22
    1ddc:	89 ab       	std	Y+49, r24	; 0x31
    1dde:	9a ab       	std	Y+50, r25	; 0x32
    1de0:	ab ab       	std	Y+51, r26	; 0x33
    1de2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1de4:	69 a9       	ldd	r22, Y+49	; 0x31
    1de6:	7a a9       	ldd	r23, Y+50	; 0x32
    1de8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dea:	9c a9       	ldd	r25, Y+52	; 0x34
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	40 e8       	ldi	r20, 0x80	; 128
    1df2:	5f e3       	ldi	r21, 0x3F	; 63
    1df4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1df8:	88 23       	and	r24, r24
    1dfa:	2c f4       	brge	.+10     	; 0x1e06 <LCD_sendCommand+0x50a>
		__ticks = 1;
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	98 ab       	std	Y+48, r25	; 0x30
    1e02:	8f a7       	std	Y+47, r24	; 0x2f
    1e04:	3f c0       	rjmp	.+126    	; 0x1e84 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1e06:	69 a9       	ldd	r22, Y+49	; 0x31
    1e08:	7a a9       	ldd	r23, Y+50	; 0x32
    1e0a:	8b a9       	ldd	r24, Y+51	; 0x33
    1e0c:	9c a9       	ldd	r25, Y+52	; 0x34
    1e0e:	20 e0       	ldi	r18, 0x00	; 0
    1e10:	3f ef       	ldi	r19, 0xFF	; 255
    1e12:	4f e7       	ldi	r20, 0x7F	; 127
    1e14:	57 e4       	ldi	r21, 0x47	; 71
    1e16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e1a:	18 16       	cp	r1, r24
    1e1c:	4c f5       	brge	.+82     	; 0x1e70 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e1e:	6d a9       	ldd	r22, Y+53	; 0x35
    1e20:	7e a9       	ldd	r23, Y+54	; 0x36
    1e22:	8f a9       	ldd	r24, Y+55	; 0x37
    1e24:	98 ad       	ldd	r25, Y+56	; 0x38
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	51 e4       	ldi	r21, 0x41	; 65
    1e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e32:	dc 01       	movw	r26, r24
    1e34:	cb 01       	movw	r24, r22
    1e36:	bc 01       	movw	r22, r24
    1e38:	cd 01       	movw	r24, r26
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	98 ab       	std	Y+48, r25	; 0x30
    1e44:	8f a7       	std	Y+47, r24	; 0x2f
    1e46:	0f c0       	rjmp	.+30     	; 0x1e66 <LCD_sendCommand+0x56a>
    1e48:	80 e9       	ldi	r24, 0x90	; 144
    1e4a:	91 e0       	ldi	r25, 0x01	; 1
    1e4c:	9e a7       	std	Y+46, r25	; 0x2e
    1e4e:	8d a7       	std	Y+45, r24	; 0x2d
    1e50:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e52:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e54:	01 97       	sbiw	r24, 0x01	; 1
    1e56:	f1 f7       	brne	.-4      	; 0x1e54 <LCD_sendCommand+0x558>
    1e58:	9e a7       	std	Y+46, r25	; 0x2e
    1e5a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	98 ab       	std	Y+48, r25	; 0x30
    1e64:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e68:	98 a9       	ldd	r25, Y+48	; 0x30
    1e6a:	00 97       	sbiw	r24, 0x00	; 0
    1e6c:	69 f7       	brne	.-38     	; 0x1e48 <LCD_sendCommand+0x54c>
    1e6e:	14 c0       	rjmp	.+40     	; 0x1e98 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e70:	69 a9       	ldd	r22, Y+49	; 0x31
    1e72:	7a a9       	ldd	r23, Y+50	; 0x32
    1e74:	8b a9       	ldd	r24, Y+51	; 0x33
    1e76:	9c a9       	ldd	r25, Y+52	; 0x34
    1e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e7c:	dc 01       	movw	r26, r24
    1e7e:	cb 01       	movw	r24, r22
    1e80:	98 ab       	std	Y+48, r25	; 0x30
    1e82:	8f a7       	std	Y+47, r24	; 0x2f
    1e84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e86:	98 a9       	ldd	r25, Y+48	; 0x30
    1e88:	9c a7       	std	Y+44, r25	; 0x2c
    1e8a:	8b a7       	std	Y+43, r24	; 0x2b
    1e8c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e8e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e90:	01 97       	sbiw	r24, 0x01	; 1
    1e92:	f1 f7       	brne	.-4      	; 0x1e90 <LCD_sendCommand+0x594>
    1e94:	9c a7       	std	Y+44, r25	; 0x2c
    1e96:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT,ENABLE_PIN,LOGIC_HIGH);
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	62 e0       	ldi	r22, 0x02	; 2
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    1ea2:	80 e0       	ldi	r24, 0x00	; 0
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	a0 e8       	ldi	r26, 0x80	; 128
    1ea8:	bf e3       	ldi	r27, 0x3F	; 63
    1eaa:	8f a3       	std	Y+39, r24	; 0x27
    1eac:	98 a7       	std	Y+40, r25	; 0x28
    1eae:	a9 a7       	std	Y+41, r26	; 0x29
    1eb0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb2:	6f a1       	ldd	r22, Y+39	; 0x27
    1eb4:	78 a5       	ldd	r23, Y+40	; 0x28
    1eb6:	89 a5       	ldd	r24, Y+41	; 0x29
    1eb8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1eba:	20 e0       	ldi	r18, 0x00	; 0
    1ebc:	30 e0       	ldi	r19, 0x00	; 0
    1ebe:	4a e7       	ldi	r20, 0x7A	; 122
    1ec0:	55 e4       	ldi	r21, 0x45	; 69
    1ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	8b a3       	std	Y+35, r24	; 0x23
    1ecc:	9c a3       	std	Y+36, r25	; 0x24
    1ece:	ad a3       	std	Y+37, r26	; 0x25
    1ed0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ed2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ed4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ed6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ed8:	9e a1       	ldd	r25, Y+38	; 0x26
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	40 e8       	ldi	r20, 0x80	; 128
    1ee0:	5f e3       	ldi	r21, 0x3F	; 63
    1ee2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	2c f4       	brge	.+10     	; 0x1ef4 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9a a3       	std	Y+34, r25	; 0x22
    1ef0:	89 a3       	std	Y+33, r24	; 0x21
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1ef4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ef6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef8:	8d a1       	ldd	r24, Y+37	; 0x25
    1efa:	9e a1       	ldd	r25, Y+38	; 0x26
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	3f ef       	ldi	r19, 0xFF	; 255
    1f00:	4f e7       	ldi	r20, 0x7F	; 127
    1f02:	57 e4       	ldi	r21, 0x47	; 71
    1f04:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f08:	18 16       	cp	r1, r24
    1f0a:	4c f5       	brge	.+82     	; 0x1f5e <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0c:	6f a1       	ldd	r22, Y+39	; 0x27
    1f0e:	78 a5       	ldd	r23, Y+40	; 0x28
    1f10:	89 a5       	ldd	r24, Y+41	; 0x29
    1f12:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f14:	20 e0       	ldi	r18, 0x00	; 0
    1f16:	30 e0       	ldi	r19, 0x00	; 0
    1f18:	40 e2       	ldi	r20, 0x20	; 32
    1f1a:	51 e4       	ldi	r21, 0x41	; 65
    1f1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f20:	dc 01       	movw	r26, r24
    1f22:	cb 01       	movw	r24, r22
    1f24:	bc 01       	movw	r22, r24
    1f26:	cd 01       	movw	r24, r26
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9a a3       	std	Y+34, r25	; 0x22
    1f32:	89 a3       	std	Y+33, r24	; 0x21
    1f34:	0f c0       	rjmp	.+30     	; 0x1f54 <LCD_sendCommand+0x658>
    1f36:	80 e9       	ldi	r24, 0x90	; 144
    1f38:	91 e0       	ldi	r25, 0x01	; 1
    1f3a:	98 a3       	std	Y+32, r25	; 0x20
    1f3c:	8f 8f       	std	Y+31, r24	; 0x1f
    1f3e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f40:	98 a1       	ldd	r25, Y+32	; 0x20
    1f42:	01 97       	sbiw	r24, 0x01	; 1
    1f44:	f1 f7       	brne	.-4      	; 0x1f42 <LCD_sendCommand+0x646>
    1f46:	98 a3       	std	Y+32, r25	; 0x20
    1f48:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	9a a3       	std	Y+34, r25	; 0x22
    1f52:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f54:	89 a1       	ldd	r24, Y+33	; 0x21
    1f56:	9a a1       	ldd	r25, Y+34	; 0x22
    1f58:	00 97       	sbiw	r24, 0x00	; 0
    1f5a:	69 f7       	brne	.-38     	; 0x1f36 <LCD_sendCommand+0x63a>
    1f5c:	14 c0       	rjmp	.+40     	; 0x1f86 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f5e:	6b a1       	ldd	r22, Y+35	; 0x23
    1f60:	7c a1       	ldd	r23, Y+36	; 0x24
    1f62:	8d a1       	ldd	r24, Y+37	; 0x25
    1f64:	9e a1       	ldd	r25, Y+38	; 0x26
    1f66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9a a3       	std	Y+34, r25	; 0x22
    1f70:	89 a3       	std	Y+33, r24	; 0x21
    1f72:	89 a1       	ldd	r24, Y+33	; 0x21
    1f74:	9a a1       	ldd	r25, Y+34	; 0x22
    1f76:	9e 8f       	std	Y+30, r25	; 0x1e
    1f78:	8d 8f       	std	Y+29, r24	; 0x1d
    1f7a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f7c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f7e:	01 97       	sbiw	r24, 0x01	; 1
    1f80:	f1 f7       	brne	.-4      	; 0x1f7e <LCD_sendCommand+0x682>
    1f82:	9e 8f       	std	Y+30, r25	; 0x1e
    1f84:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_1,GET_BIT(command,0));
    1f86:	fe 01       	movw	r30, r28
    1f88:	ed 59       	subi	r30, 0x9D	; 157
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 81       	ld	r24, Z
    1f8e:	98 2f       	mov	r25, r24
    1f90:	91 70       	andi	r25, 0x01	; 1
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	63 e0       	ldi	r22, 0x03	; 3
    1f96:	49 2f       	mov	r20, r25
    1f98:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_2,GET_BIT(command,1));
    1f9c:	fe 01       	movw	r30, r28
    1f9e:	ed 59       	subi	r30, 0x9D	; 157
    1fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 2f       	mov	r24, r24
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	82 70       	andi	r24, 0x02	; 2
    1faa:	90 70       	andi	r25, 0x00	; 0
    1fac:	95 95       	asr	r25
    1fae:	87 95       	ror	r24
    1fb0:	98 2f       	mov	r25, r24
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	64 e0       	ldi	r22, 0x04	; 4
    1fb6:	49 2f       	mov	r20, r25
    1fb8:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_3,GET_BIT(command,2));
    1fbc:	fe 01       	movw	r30, r28
    1fbe:	ed 59       	subi	r30, 0x9D	; 157
    1fc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc2:	80 81       	ld	r24, Z
    1fc4:	88 2f       	mov	r24, r24
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	84 70       	andi	r24, 0x04	; 4
    1fca:	90 70       	andi	r25, 0x00	; 0
    1fcc:	95 95       	asr	r25
    1fce:	87 95       	ror	r24
    1fd0:	95 95       	asr	r25
    1fd2:	87 95       	ror	r24
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	80 e0       	ldi	r24, 0x00	; 0
    1fd8:	65 e0       	ldi	r22, 0x05	; 5
    1fda:	49 2f       	mov	r20, r25
    1fdc:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_4,GET_BIT(command,3));
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	ed 59       	subi	r30, 0x9D	; 157
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	80 81       	ld	r24, Z
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	88 70       	andi	r24, 0x08	; 8
    1fee:	90 70       	andi	r25, 0x00	; 0
    1ff0:	95 95       	asr	r25
    1ff2:	87 95       	ror	r24
    1ff4:	95 95       	asr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	98 2f       	mov	r25, r24
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	66 e0       	ldi	r22, 0x06	; 6
    2002:	49 2f       	mov	r20, r25
    2004:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    2008:	80 e0       	ldi	r24, 0x00	; 0
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e8       	ldi	r26, 0x80	; 128
    200e:	bf e3       	ldi	r27, 0x3F	; 63
    2010:	89 8f       	std	Y+25, r24	; 0x19
    2012:	9a 8f       	std	Y+26, r25	; 0x1a
    2014:	ab 8f       	std	Y+27, r26	; 0x1b
    2016:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2018:	69 8d       	ldd	r22, Y+25	; 0x19
    201a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    201c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    201e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	4a e7       	ldi	r20, 0x7A	; 122
    2026:	55 e4       	ldi	r21, 0x45	; 69
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	8d 8b       	std	Y+21, r24	; 0x15
    2032:	9e 8b       	std	Y+22, r25	; 0x16
    2034:	af 8b       	std	Y+23, r26	; 0x17
    2036:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2038:	6d 89       	ldd	r22, Y+21	; 0x15
    203a:	7e 89       	ldd	r23, Y+22	; 0x16
    203c:	8f 89       	ldd	r24, Y+23	; 0x17
    203e:	98 8d       	ldd	r25, Y+24	; 0x18
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e8       	ldi	r20, 0x80	; 128
    2046:	5f e3       	ldi	r21, 0x3F	; 63
    2048:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    204c:	88 23       	and	r24, r24
    204e:	2c f4       	brge	.+10     	; 0x205a <LCD_sendCommand+0x75e>
		__ticks = 1;
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	9c 8b       	std	Y+20, r25	; 0x14
    2056:	8b 8b       	std	Y+19, r24	; 0x13
    2058:	3f c0       	rjmp	.+126    	; 0x20d8 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    205a:	6d 89       	ldd	r22, Y+21	; 0x15
    205c:	7e 89       	ldd	r23, Y+22	; 0x16
    205e:	8f 89       	ldd	r24, Y+23	; 0x17
    2060:	98 8d       	ldd	r25, Y+24	; 0x18
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	3f ef       	ldi	r19, 0xFF	; 255
    2066:	4f e7       	ldi	r20, 0x7F	; 127
    2068:	57 e4       	ldi	r21, 0x47	; 71
    206a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    206e:	18 16       	cp	r1, r24
    2070:	4c f5       	brge	.+82     	; 0x20c4 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2072:	69 8d       	ldd	r22, Y+25	; 0x19
    2074:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2076:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2078:	9c 8d       	ldd	r25, Y+28	; 0x1c
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	bc 01       	movw	r22, r24
    208c:	cd 01       	movw	r24, r26
    208e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	9c 8b       	std	Y+20, r25	; 0x14
    2098:	8b 8b       	std	Y+19, r24	; 0x13
    209a:	0f c0       	rjmp	.+30     	; 0x20ba <LCD_sendCommand+0x7be>
    209c:	80 e9       	ldi	r24, 0x90	; 144
    209e:	91 e0       	ldi	r25, 0x01	; 1
    20a0:	9a 8b       	std	Y+18, r25	; 0x12
    20a2:	89 8b       	std	Y+17, r24	; 0x11
    20a4:	89 89       	ldd	r24, Y+17	; 0x11
    20a6:	9a 89       	ldd	r25, Y+18	; 0x12
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <LCD_sendCommand+0x7ac>
    20ac:	9a 8b       	std	Y+18, r25	; 0x12
    20ae:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b0:	8b 89       	ldd	r24, Y+19	; 0x13
    20b2:	9c 89       	ldd	r25, Y+20	; 0x14
    20b4:	01 97       	sbiw	r24, 0x01	; 1
    20b6:	9c 8b       	std	Y+20, r25	; 0x14
    20b8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ba:	8b 89       	ldd	r24, Y+19	; 0x13
    20bc:	9c 89       	ldd	r25, Y+20	; 0x14
    20be:	00 97       	sbiw	r24, 0x00	; 0
    20c0:	69 f7       	brne	.-38     	; 0x209c <LCD_sendCommand+0x7a0>
    20c2:	14 c0       	rjmp	.+40     	; 0x20ec <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c4:	6d 89       	ldd	r22, Y+21	; 0x15
    20c6:	7e 89       	ldd	r23, Y+22	; 0x16
    20c8:	8f 89       	ldd	r24, Y+23	; 0x17
    20ca:	98 8d       	ldd	r25, Y+24	; 0x18
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9c 8b       	std	Y+20, r25	; 0x14
    20d6:	8b 8b       	std	Y+19, r24	; 0x13
    20d8:	8b 89       	ldd	r24, Y+19	; 0x13
    20da:	9c 89       	ldd	r25, Y+20	; 0x14
    20dc:	98 8b       	std	Y+16, r25	; 0x10
    20de:	8f 87       	std	Y+15, r24	; 0x0f
    20e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    20e2:	98 89       	ldd	r25, Y+16	; 0x10
    20e4:	01 97       	sbiw	r24, 0x01	; 1
    20e6:	f1 f7       	brne	.-4      	; 0x20e4 <LCD_sendCommand+0x7e8>
    20e8:	98 8b       	std	Y+16, r25	; 0x10
    20ea:	8f 87       	std	Y+15, r24	; 0x0f

#endif

	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_LOW);
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	62 e0       	ldi	r22, 0x02	; 2
    20f0:	40 e0       	ldi	r20, 0x00	; 0
    20f2:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	a0 e8       	ldi	r26, 0x80	; 128
    20fc:	bf e3       	ldi	r27, 0x3F	; 63
    20fe:	8b 87       	std	Y+11, r24	; 0x0b
    2100:	9c 87       	std	Y+12, r25	; 0x0c
    2102:	ad 87       	std	Y+13, r26	; 0x0d
    2104:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2106:	6b 85       	ldd	r22, Y+11	; 0x0b
    2108:	7c 85       	ldd	r23, Y+12	; 0x0c
    210a:	8d 85       	ldd	r24, Y+13	; 0x0d
    210c:	9e 85       	ldd	r25, Y+14	; 0x0e
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a e7       	ldi	r20, 0x7A	; 122
    2114:	55 e4       	ldi	r21, 0x45	; 69
    2116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8f 83       	std	Y+7, r24	; 0x07
    2120:	98 87       	std	Y+8, r25	; 0x08
    2122:	a9 87       	std	Y+9, r26	; 0x09
    2124:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2126:	6f 81       	ldd	r22, Y+7	; 0x07
    2128:	78 85       	ldd	r23, Y+8	; 0x08
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	40 e8       	ldi	r20, 0x80	; 128
    2134:	5f e3       	ldi	r21, 0x3F	; 63
    2136:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    213a:	88 23       	and	r24, r24
    213c:	2c f4       	brge	.+10     	; 0x2148 <LCD_sendCommand+0x84c>
		__ticks = 1;
    213e:	81 e0       	ldi	r24, 0x01	; 1
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	9e 83       	std	Y+6, r25	; 0x06
    2144:	8d 83       	std	Y+5, r24	; 0x05
    2146:	3f c0       	rjmp	.+126    	; 0x21c6 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2148:	6f 81       	ldd	r22, Y+7	; 0x07
    214a:	78 85       	ldd	r23, Y+8	; 0x08
    214c:	89 85       	ldd	r24, Y+9	; 0x09
    214e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	3f ef       	ldi	r19, 0xFF	; 255
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	57 e4       	ldi	r21, 0x47	; 71
    2158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    215c:	18 16       	cp	r1, r24
    215e:	4c f5       	brge	.+82     	; 0x21b2 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2160:	6b 85       	ldd	r22, Y+11	; 0x0b
    2162:	7c 85       	ldd	r23, Y+12	; 0x0c
    2164:	8d 85       	ldd	r24, Y+13	; 0x0d
    2166:	9e 85       	ldd	r25, Y+14	; 0x0e
    2168:	20 e0       	ldi	r18, 0x00	; 0
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	40 e2       	ldi	r20, 0x20	; 32
    216e:	51 e4       	ldi	r21, 0x41	; 65
    2170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2174:	dc 01       	movw	r26, r24
    2176:	cb 01       	movw	r24, r22
    2178:	bc 01       	movw	r22, r24
    217a:	cd 01       	movw	r24, r26
    217c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	9e 83       	std	Y+6, r25	; 0x06
    2186:	8d 83       	std	Y+5, r24	; 0x05
    2188:	0f c0       	rjmp	.+30     	; 0x21a8 <LCD_sendCommand+0x8ac>
    218a:	80 e9       	ldi	r24, 0x90	; 144
    218c:	91 e0       	ldi	r25, 0x01	; 1
    218e:	9c 83       	std	Y+4, r25	; 0x04
    2190:	8b 83       	std	Y+3, r24	; 0x03
    2192:	8b 81       	ldd	r24, Y+3	; 0x03
    2194:	9c 81       	ldd	r25, Y+4	; 0x04
    2196:	01 97       	sbiw	r24, 0x01	; 1
    2198:	f1 f7       	brne	.-4      	; 0x2196 <LCD_sendCommand+0x89a>
    219a:	9c 83       	std	Y+4, r25	; 0x04
    219c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    219e:	8d 81       	ldd	r24, Y+5	; 0x05
    21a0:	9e 81       	ldd	r25, Y+6	; 0x06
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	9e 83       	std	Y+6, r25	; 0x06
    21a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	9e 81       	ldd	r25, Y+6	; 0x06
    21ac:	00 97       	sbiw	r24, 0x00	; 0
    21ae:	69 f7       	brne	.-38     	; 0x218a <LCD_sendCommand+0x88e>
    21b0:	14 c0       	rjmp	.+40     	; 0x21da <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21b2:	6f 81       	ldd	r22, Y+7	; 0x07
    21b4:	78 85       	ldd	r23, Y+8	; 0x08
    21b6:	89 85       	ldd	r24, Y+9	; 0x09
    21b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    21ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	9e 83       	std	Y+6, r25	; 0x06
    21c4:	8d 83       	std	Y+5, r24	; 0x05
    21c6:	8d 81       	ldd	r24, Y+5	; 0x05
    21c8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ca:	9a 83       	std	Y+2, r25	; 0x02
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_sendCommand+0x8d6>
    21d6:	9a 83       	std	Y+2, r25	; 0x02
    21d8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    21da:	cd 59       	subi	r28, 0x9D	; 157
    21dc:	df 4f       	sbci	r29, 0xFF	; 255
    21de:	0f b6       	in	r0, 0x3f	; 63
    21e0:	f8 94       	cli
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	0f be       	out	0x3f, r0	; 63
    21e6:	cd bf       	out	0x3d, r28	; 61
    21e8:	cf 91       	pop	r28
    21ea:	df 91       	pop	r29
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	08 95       	ret

000021f2 <LCD_displayCharacter>:

/*Display character*/
void LCD_displayCharacter(uint8 character)
{
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	c3 56       	subi	r28, 0x63	; 99
    2200:	d0 40       	sbci	r29, 0x00	; 0
    2202:	0f b6       	in	r0, 0x3f	; 63
    2204:	f8 94       	cli
    2206:	de bf       	out	0x3e, r29	; 62
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	cd bf       	out	0x3d, r28	; 61
    220c:	fe 01       	movw	r30, r28
    220e:	ed 59       	subi	r30, 0x9D	; 157
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 83       	st	Z, r24
	GPIO_writePin(RS_PORT, RS_PIN, LOGIC_HIGH);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	61 e0       	ldi	r22, 0x01	; 1
    2218:	41 e0       	ldi	r20, 0x01	; 1
    221a:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    221e:	fe 01       	movw	r30, r28
    2220:	e1 5a       	subi	r30, 0xA1	; 161
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	a0 e8       	ldi	r26, 0x80	; 128
    222a:	bf e3       	ldi	r27, 0x3F	; 63
    222c:	80 83       	st	Z, r24
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	a2 83       	std	Z+2, r26	; 0x02
    2232:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2234:	8e 01       	movw	r16, r28
    2236:	05 5a       	subi	r16, 0xA5	; 165
    2238:	1f 4f       	sbci	r17, 0xFF	; 255
    223a:	fe 01       	movw	r30, r28
    223c:	e1 5a       	subi	r30, 0xA1	; 161
    223e:	ff 4f       	sbci	r31, 0xFF	; 255
    2240:	60 81       	ld	r22, Z
    2242:	71 81       	ldd	r23, Z+1	; 0x01
    2244:	82 81       	ldd	r24, Z+2	; 0x02
    2246:	93 81       	ldd	r25, Z+3	; 0x03
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	4a e7       	ldi	r20, 0x7A	; 122
    224e:	55 e4       	ldi	r21, 0x45	; 69
    2250:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	f8 01       	movw	r30, r16
    225a:	80 83       	st	Z, r24
    225c:	91 83       	std	Z+1, r25	; 0x01
    225e:	a2 83       	std	Z+2, r26	; 0x02
    2260:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2262:	fe 01       	movw	r30, r28
    2264:	e5 5a       	subi	r30, 0xA5	; 165
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	60 81       	ld	r22, Z
    226a:	71 81       	ldd	r23, Z+1	; 0x01
    226c:	82 81       	ldd	r24, Z+2	; 0x02
    226e:	93 81       	ldd	r25, Z+3	; 0x03
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e8       	ldi	r20, 0x80	; 128
    2276:	5f e3       	ldi	r21, 0x3F	; 63
    2278:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227c:	88 23       	and	r24, r24
    227e:	44 f4       	brge	.+16     	; 0x2290 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2280:	fe 01       	movw	r30, r28
    2282:	e7 5a       	subi	r30, 0xA7	; 167
    2284:	ff 4f       	sbci	r31, 0xFF	; 255
    2286:	81 e0       	ldi	r24, 0x01	; 1
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	91 83       	std	Z+1, r25	; 0x01
    228c:	80 83       	st	Z, r24
    228e:	64 c0       	rjmp	.+200    	; 0x2358 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2290:	fe 01       	movw	r30, r28
    2292:	e5 5a       	subi	r30, 0xA5	; 165
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	3f ef       	ldi	r19, 0xFF	; 255
    22a2:	4f e7       	ldi	r20, 0x7F	; 127
    22a4:	57 e4       	ldi	r21, 0x47	; 71
    22a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22aa:	18 16       	cp	r1, r24
    22ac:	0c f0       	brlt	.+2      	; 0x22b0 <LCD_displayCharacter+0xbe>
    22ae:	43 c0       	rjmp	.+134    	; 0x2336 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b0:	fe 01       	movw	r30, r28
    22b2:	e1 5a       	subi	r30, 0xA1	; 161
    22b4:	ff 4f       	sbci	r31, 0xFF	; 255
    22b6:	60 81       	ld	r22, Z
    22b8:	71 81       	ldd	r23, Z+1	; 0x01
    22ba:	82 81       	ldd	r24, Z+2	; 0x02
    22bc:	93 81       	ldd	r25, Z+3	; 0x03
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	30 e0       	ldi	r19, 0x00	; 0
    22c2:	40 e2       	ldi	r20, 0x20	; 32
    22c4:	51 e4       	ldi	r21, 0x41	; 65
    22c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ca:	dc 01       	movw	r26, r24
    22cc:	cb 01       	movw	r24, r22
    22ce:	8e 01       	movw	r16, r28
    22d0:	07 5a       	subi	r16, 0xA7	; 167
    22d2:	1f 4f       	sbci	r17, 0xFF	; 255
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22dc:	dc 01       	movw	r26, r24
    22de:	cb 01       	movw	r24, r22
    22e0:	f8 01       	movw	r30, r16
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24
    22e6:	1f c0       	rjmp	.+62     	; 0x2326 <LCD_displayCharacter+0x134>
    22e8:	fe 01       	movw	r30, r28
    22ea:	e9 5a       	subi	r30, 0xA9	; 169
    22ec:	ff 4f       	sbci	r31, 0xFF	; 255
    22ee:	80 e9       	ldi	r24, 0x90	; 144
    22f0:	91 e0       	ldi	r25, 0x01	; 1
    22f2:	91 83       	std	Z+1, r25	; 0x01
    22f4:	80 83       	st	Z, r24
    22f6:	fe 01       	movw	r30, r28
    22f8:	e9 5a       	subi	r30, 0xA9	; 169
    22fa:	ff 4f       	sbci	r31, 0xFF	; 255
    22fc:	80 81       	ld	r24, Z
    22fe:	91 81       	ldd	r25, Z+1	; 0x01
    2300:	01 97       	sbiw	r24, 0x01	; 1
    2302:	f1 f7       	brne	.-4      	; 0x2300 <LCD_displayCharacter+0x10e>
    2304:	fe 01       	movw	r30, r28
    2306:	e9 5a       	subi	r30, 0xA9	; 169
    2308:	ff 4f       	sbci	r31, 0xFF	; 255
    230a:	91 83       	std	Z+1, r25	; 0x01
    230c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230e:	de 01       	movw	r26, r28
    2310:	a7 5a       	subi	r26, 0xA7	; 167
    2312:	bf 4f       	sbci	r27, 0xFF	; 255
    2314:	fe 01       	movw	r30, r28
    2316:	e7 5a       	subi	r30, 0xA7	; 167
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	80 81       	ld	r24, Z
    231c:	91 81       	ldd	r25, Z+1	; 0x01
    231e:	01 97       	sbiw	r24, 0x01	; 1
    2320:	11 96       	adiw	r26, 0x01	; 1
    2322:	9c 93       	st	X, r25
    2324:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2326:	fe 01       	movw	r30, r28
    2328:	e7 5a       	subi	r30, 0xA7	; 167
    232a:	ff 4f       	sbci	r31, 0xFF	; 255
    232c:	80 81       	ld	r24, Z
    232e:	91 81       	ldd	r25, Z+1	; 0x01
    2330:	00 97       	sbiw	r24, 0x00	; 0
    2332:	d1 f6       	brne	.-76     	; 0x22e8 <LCD_displayCharacter+0xf6>
    2334:	27 c0       	rjmp	.+78     	; 0x2384 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2336:	8e 01       	movw	r16, r28
    2338:	07 5a       	subi	r16, 0xA7	; 167
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	fe 01       	movw	r30, r28
    233e:	e5 5a       	subi	r30, 0xA5	; 165
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    234e:	dc 01       	movw	r26, r24
    2350:	cb 01       	movw	r24, r22
    2352:	f8 01       	movw	r30, r16
    2354:	91 83       	std	Z+1, r25	; 0x01
    2356:	80 83       	st	Z, r24
    2358:	de 01       	movw	r26, r28
    235a:	ab 5a       	subi	r26, 0xAB	; 171
    235c:	bf 4f       	sbci	r27, 0xFF	; 255
    235e:	fe 01       	movw	r30, r28
    2360:	e7 5a       	subi	r30, 0xA7	; 167
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	80 81       	ld	r24, Z
    2366:	91 81       	ldd	r25, Z+1	; 0x01
    2368:	8d 93       	st	X+, r24
    236a:	9c 93       	st	X, r25
    236c:	fe 01       	movw	r30, r28
    236e:	eb 5a       	subi	r30, 0xAB	; 171
    2370:	ff 4f       	sbci	r31, 0xFF	; 255
    2372:	80 81       	ld	r24, Z
    2374:	91 81       	ldd	r25, Z+1	; 0x01
    2376:	01 97       	sbiw	r24, 0x01	; 1
    2378:	f1 f7       	brne	.-4      	; 0x2376 <LCD_displayCharacter+0x184>
    237a:	fe 01       	movw	r30, r28
    237c:	eb 5a       	subi	r30, 0xAB	; 171
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	91 83       	std	Z+1, r25	; 0x01
    2382:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_HIGH);
    2384:	80 e0       	ldi	r24, 0x00	; 0
    2386:	62 e0       	ldi	r22, 0x02	; 2
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    238e:	fe 01       	movw	r30, r28
    2390:	ef 5a       	subi	r30, 0xAF	; 175
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	80 e0       	ldi	r24, 0x00	; 0
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	a0 e8       	ldi	r26, 0x80	; 128
    239a:	bf e3       	ldi	r27, 0x3F	; 63
    239c:	80 83       	st	Z, r24
    239e:	91 83       	std	Z+1, r25	; 0x01
    23a0:	a2 83       	std	Z+2, r26	; 0x02
    23a2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23a4:	8e 01       	movw	r16, r28
    23a6:	03 5b       	subi	r16, 0xB3	; 179
    23a8:	1f 4f       	sbci	r17, 0xFF	; 255
    23aa:	fe 01       	movw	r30, r28
    23ac:	ef 5a       	subi	r30, 0xAF	; 175
    23ae:	ff 4f       	sbci	r31, 0xFF	; 255
    23b0:	60 81       	ld	r22, Z
    23b2:	71 81       	ldd	r23, Z+1	; 0x01
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	4a e7       	ldi	r20, 0x7A	; 122
    23be:	55 e4       	ldi	r21, 0x45	; 69
    23c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	f8 01       	movw	r30, r16
    23ca:	80 83       	st	Z, r24
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	a2 83       	std	Z+2, r26	; 0x02
    23d0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23d2:	fe 01       	movw	r30, r28
    23d4:	e3 5b       	subi	r30, 0xB3	; 179
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	60 81       	ld	r22, Z
    23da:	71 81       	ldd	r23, Z+1	; 0x01
    23dc:	82 81       	ldd	r24, Z+2	; 0x02
    23de:	93 81       	ldd	r25, Z+3	; 0x03
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	44 f4       	brge	.+16     	; 0x2400 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    23f0:	fe 01       	movw	r30, r28
    23f2:	e5 5b       	subi	r30, 0xB5	; 181
    23f4:	ff 4f       	sbci	r31, 0xFF	; 255
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	91 83       	std	Z+1, r25	; 0x01
    23fc:	80 83       	st	Z, r24
    23fe:	64 c0       	rjmp	.+200    	; 0x24c8 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2400:	fe 01       	movw	r30, r28
    2402:	e3 5b       	subi	r30, 0xB3	; 179
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	60 81       	ld	r22, Z
    2408:	71 81       	ldd	r23, Z+1	; 0x01
    240a:	82 81       	ldd	r24, Z+2	; 0x02
    240c:	93 81       	ldd	r25, Z+3	; 0x03
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	3f ef       	ldi	r19, 0xFF	; 255
    2412:	4f e7       	ldi	r20, 0x7F	; 127
    2414:	57 e4       	ldi	r21, 0x47	; 71
    2416:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    241a:	18 16       	cp	r1, r24
    241c:	0c f0       	brlt	.+2      	; 0x2420 <LCD_displayCharacter+0x22e>
    241e:	43 c0       	rjmp	.+134    	; 0x24a6 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2420:	fe 01       	movw	r30, r28
    2422:	ef 5a       	subi	r30, 0xAF	; 175
    2424:	ff 4f       	sbci	r31, 0xFF	; 255
    2426:	60 81       	ld	r22, Z
    2428:	71 81       	ldd	r23, Z+1	; 0x01
    242a:	82 81       	ldd	r24, Z+2	; 0x02
    242c:	93 81       	ldd	r25, Z+3	; 0x03
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e2       	ldi	r20, 0x20	; 32
    2434:	51 e4       	ldi	r21, 0x41	; 65
    2436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	8e 01       	movw	r16, r28
    2440:	05 5b       	subi	r16, 0xB5	; 181
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	f8 01       	movw	r30, r16
    2452:	91 83       	std	Z+1, r25	; 0x01
    2454:	80 83       	st	Z, r24
    2456:	1f c0       	rjmp	.+62     	; 0x2496 <LCD_displayCharacter+0x2a4>
    2458:	fe 01       	movw	r30, r28
    245a:	e7 5b       	subi	r30, 0xB7	; 183
    245c:	ff 4f       	sbci	r31, 0xFF	; 255
    245e:	80 e9       	ldi	r24, 0x90	; 144
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	fe 01       	movw	r30, r28
    2468:	e7 5b       	subi	r30, 0xB7	; 183
    246a:	ff 4f       	sbci	r31, 0xFF	; 255
    246c:	80 81       	ld	r24, Z
    246e:	91 81       	ldd	r25, Z+1	; 0x01
    2470:	01 97       	sbiw	r24, 0x01	; 1
    2472:	f1 f7       	brne	.-4      	; 0x2470 <LCD_displayCharacter+0x27e>
    2474:	fe 01       	movw	r30, r28
    2476:	e7 5b       	subi	r30, 0xB7	; 183
    2478:	ff 4f       	sbci	r31, 0xFF	; 255
    247a:	91 83       	std	Z+1, r25	; 0x01
    247c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    247e:	de 01       	movw	r26, r28
    2480:	a5 5b       	subi	r26, 0xB5	; 181
    2482:	bf 4f       	sbci	r27, 0xFF	; 255
    2484:	fe 01       	movw	r30, r28
    2486:	e5 5b       	subi	r30, 0xB5	; 181
    2488:	ff 4f       	sbci	r31, 0xFF	; 255
    248a:	80 81       	ld	r24, Z
    248c:	91 81       	ldd	r25, Z+1	; 0x01
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	11 96       	adiw	r26, 0x01	; 1
    2492:	9c 93       	st	X, r25
    2494:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2496:	fe 01       	movw	r30, r28
    2498:	e5 5b       	subi	r30, 0xB5	; 181
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	80 81       	ld	r24, Z
    249e:	91 81       	ldd	r25, Z+1	; 0x01
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	d1 f6       	brne	.-76     	; 0x2458 <LCD_displayCharacter+0x266>
    24a4:	27 c0       	rjmp	.+78     	; 0x24f4 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24a6:	8e 01       	movw	r16, r28
    24a8:	05 5b       	subi	r16, 0xB5	; 181
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	fe 01       	movw	r30, r28
    24ae:	e3 5b       	subi	r30, 0xB3	; 179
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	60 81       	ld	r22, Z
    24b4:	71 81       	ldd	r23, Z+1	; 0x01
    24b6:	82 81       	ldd	r24, Z+2	; 0x02
    24b8:	93 81       	ldd	r25, Z+3	; 0x03
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	f8 01       	movw	r30, r16
    24c4:	91 83       	std	Z+1, r25	; 0x01
    24c6:	80 83       	st	Z, r24
    24c8:	de 01       	movw	r26, r28
    24ca:	a9 5b       	subi	r26, 0xB9	; 185
    24cc:	bf 4f       	sbci	r27, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	e5 5b       	subi	r30, 0xB5	; 181
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	80 81       	ld	r24, Z
    24d6:	91 81       	ldd	r25, Z+1	; 0x01
    24d8:	8d 93       	st	X+, r24
    24da:	9c 93       	st	X, r25
    24dc:	fe 01       	movw	r30, r28
    24de:	e9 5b       	subi	r30, 0xB9	; 185
    24e0:	ff 4f       	sbci	r31, 0xFF	; 255
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	01 97       	sbiw	r24, 0x01	; 1
    24e8:	f1 f7       	brne	.-4      	; 0x24e6 <LCD_displayCharacter+0x2f4>
    24ea:	fe 01       	movw	r30, r28
    24ec:	e9 5b       	subi	r30, 0xB9	; 185
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	80 83       	st	Z, r24

#if(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT, character);

#elif(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_1,GET_BIT(character,4));
    24f4:	fe 01       	movw	r30, r28
    24f6:	ed 59       	subi	r30, 0x9D	; 157
    24f8:	ff 4f       	sbci	r31, 0xFF	; 255
    24fa:	80 81       	ld	r24, Z
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	80 71       	andi	r24, 0x10	; 16
    2502:	90 70       	andi	r25, 0x00	; 0
    2504:	95 95       	asr	r25
    2506:	87 95       	ror	r24
    2508:	95 95       	asr	r25
    250a:	87 95       	ror	r24
    250c:	95 95       	asr	r25
    250e:	87 95       	ror	r24
    2510:	95 95       	asr	r25
    2512:	87 95       	ror	r24
    2514:	98 2f       	mov	r25, r24
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	63 e0       	ldi	r22, 0x03	; 3
    251a:	49 2f       	mov	r20, r25
    251c:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_2,GET_BIT(character,5));
    2520:	fe 01       	movw	r30, r28
    2522:	ed 59       	subi	r30, 0x9D	; 157
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	80 81       	ld	r24, Z
    2528:	88 2f       	mov	r24, r24
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	80 72       	andi	r24, 0x20	; 32
    252e:	90 70       	andi	r25, 0x00	; 0
    2530:	95 95       	asr	r25
    2532:	87 95       	ror	r24
    2534:	95 95       	asr	r25
    2536:	87 95       	ror	r24
    2538:	95 95       	asr	r25
    253a:	87 95       	ror	r24
    253c:	95 95       	asr	r25
    253e:	87 95       	ror	r24
    2540:	95 95       	asr	r25
    2542:	87 95       	ror	r24
    2544:	98 2f       	mov	r25, r24
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	64 e0       	ldi	r22, 0x04	; 4
    254a:	49 2f       	mov	r20, r25
    254c:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_3,GET_BIT(character,6));
    2550:	fe 01       	movw	r30, r28
    2552:	ed 59       	subi	r30, 0x9D	; 157
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	80 81       	ld	r24, Z
    2558:	88 2f       	mov	r24, r24
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	80 74       	andi	r24, 0x40	; 64
    255e:	90 70       	andi	r25, 0x00	; 0
    2560:	08 2e       	mov	r0, r24
    2562:	89 2f       	mov	r24, r25
    2564:	00 0c       	add	r0, r0
    2566:	88 1f       	adc	r24, r24
    2568:	99 0b       	sbc	r25, r25
    256a:	00 0c       	add	r0, r0
    256c:	88 1f       	adc	r24, r24
    256e:	99 1f       	adc	r25, r25
    2570:	98 2f       	mov	r25, r24
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	65 e0       	ldi	r22, 0x05	; 5
    2576:	49 2f       	mov	r20, r25
    2578:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_4,GET_BIT(character,7));
    257c:	fe 01       	movw	r30, r28
    257e:	ed 59       	subi	r30, 0x9D	; 157
    2580:	ff 4f       	sbci	r31, 0xFF	; 255
    2582:	80 81       	ld	r24, Z
    2584:	98 2f       	mov	r25, r24
    2586:	99 1f       	adc	r25, r25
    2588:	99 27       	eor	r25, r25
    258a:	99 1f       	adc	r25, r25
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	66 e0       	ldi	r22, 0x06	; 6
    2590:	49 2f       	mov	r20, r25
    2592:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    2596:	fe 01       	movw	r30, r28
    2598:	ed 5b       	subi	r30, 0xBD	; 189
    259a:	ff 4f       	sbci	r31, 0xFF	; 255
    259c:	80 e0       	ldi	r24, 0x00	; 0
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	a0 e8       	ldi	r26, 0x80	; 128
    25a2:	bf e3       	ldi	r27, 0x3F	; 63
    25a4:	80 83       	st	Z, r24
    25a6:	91 83       	std	Z+1, r25	; 0x01
    25a8:	a2 83       	std	Z+2, r26	; 0x02
    25aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25ac:	8e 01       	movw	r16, r28
    25ae:	01 5c       	subi	r16, 0xC1	; 193
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	fe 01       	movw	r30, r28
    25b4:	ed 5b       	subi	r30, 0xBD	; 189
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	60 81       	ld	r22, Z
    25ba:	71 81       	ldd	r23, Z+1	; 0x01
    25bc:	82 81       	ldd	r24, Z+2	; 0x02
    25be:	93 81       	ldd	r25, Z+3	; 0x03
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	4a e7       	ldi	r20, 0x7A	; 122
    25c6:	55 e4       	ldi	r21, 0x45	; 69
    25c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25cc:	dc 01       	movw	r26, r24
    25ce:	cb 01       	movw	r24, r22
    25d0:	f8 01       	movw	r30, r16
    25d2:	80 83       	st	Z, r24
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	a2 83       	std	Z+2, r26	; 0x02
    25d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    25da:	fe 01       	movw	r30, r28
    25dc:	ff 96       	adiw	r30, 0x3f	; 63
    25de:	60 81       	ld	r22, Z
    25e0:	71 81       	ldd	r23, Z+1	; 0x01
    25e2:	82 81       	ldd	r24, Z+2	; 0x02
    25e4:	93 81       	ldd	r25, Z+3	; 0x03
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	5f e3       	ldi	r21, 0x3F	; 63
    25ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	2c f4       	brge	.+10     	; 0x2600 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	9e af       	std	Y+62, r25	; 0x3e
    25fc:	8d af       	std	Y+61, r24	; 0x3d
    25fe:	46 c0       	rjmp	.+140    	; 0x268c <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2600:	fe 01       	movw	r30, r28
    2602:	ff 96       	adiw	r30, 0x3f	; 63
    2604:	60 81       	ld	r22, Z
    2606:	71 81       	ldd	r23, Z+1	; 0x01
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	93 81       	ldd	r25, Z+3	; 0x03
    260c:	20 e0       	ldi	r18, 0x00	; 0
    260e:	3f ef       	ldi	r19, 0xFF	; 255
    2610:	4f e7       	ldi	r20, 0x7F	; 127
    2612:	57 e4       	ldi	r21, 0x47	; 71
    2614:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2618:	18 16       	cp	r1, r24
    261a:	64 f5       	brge	.+88     	; 0x2674 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261c:	fe 01       	movw	r30, r28
    261e:	ed 5b       	subi	r30, 0xBD	; 189
    2620:	ff 4f       	sbci	r31, 0xFF	; 255
    2622:	60 81       	ld	r22, Z
    2624:	71 81       	ldd	r23, Z+1	; 0x01
    2626:	82 81       	ldd	r24, Z+2	; 0x02
    2628:	93 81       	ldd	r25, Z+3	; 0x03
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	51 e4       	ldi	r21, 0x41	; 65
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9e af       	std	Y+62, r25	; 0x3e
    2648:	8d af       	std	Y+61, r24	; 0x3d
    264a:	0f c0       	rjmp	.+30     	; 0x266a <LCD_displayCharacter+0x478>
    264c:	80 e9       	ldi	r24, 0x90	; 144
    264e:	91 e0       	ldi	r25, 0x01	; 1
    2650:	9c af       	std	Y+60, r25	; 0x3c
    2652:	8b af       	std	Y+59, r24	; 0x3b
    2654:	8b ad       	ldd	r24, Y+59	; 0x3b
    2656:	9c ad       	ldd	r25, Y+60	; 0x3c
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <LCD_displayCharacter+0x466>
    265c:	9c af       	std	Y+60, r25	; 0x3c
    265e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	8d ad       	ldd	r24, Y+61	; 0x3d
    2662:	9e ad       	ldd	r25, Y+62	; 0x3e
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	9e af       	std	Y+62, r25	; 0x3e
    2668:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266a:	8d ad       	ldd	r24, Y+61	; 0x3d
    266c:	9e ad       	ldd	r25, Y+62	; 0x3e
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	69 f7       	brne	.-38     	; 0x264c <LCD_displayCharacter+0x45a>
    2672:	16 c0       	rjmp	.+44     	; 0x26a0 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	fe 01       	movw	r30, r28
    2676:	ff 96       	adiw	r30, 0x3f	; 63
    2678:	60 81       	ld	r22, Z
    267a:	71 81       	ldd	r23, Z+1	; 0x01
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	93 81       	ldd	r25, Z+3	; 0x03
    2680:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	9e af       	std	Y+62, r25	; 0x3e
    268a:	8d af       	std	Y+61, r24	; 0x3d
    268c:	8d ad       	ldd	r24, Y+61	; 0x3d
    268e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2690:	9a af       	std	Y+58, r25	; 0x3a
    2692:	89 af       	std	Y+57, r24	; 0x39
    2694:	89 ad       	ldd	r24, Y+57	; 0x39
    2696:	9a ad       	ldd	r25, Y+58	; 0x3a
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <LCD_displayCharacter+0x4a6>
    269c:	9a af       	std	Y+58, r25	; 0x3a
    269e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_LOW);
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	62 e0       	ldi	r22, 0x02	; 2
    26a4:	40 e0       	ldi	r20, 0x00	; 0
    26a6:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    26aa:	80 e0       	ldi	r24, 0x00	; 0
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	a0 e8       	ldi	r26, 0x80	; 128
    26b0:	bf e3       	ldi	r27, 0x3F	; 63
    26b2:	8d ab       	std	Y+53, r24	; 0x35
    26b4:	9e ab       	std	Y+54, r25	; 0x36
    26b6:	af ab       	std	Y+55, r26	; 0x37
    26b8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ba:	6d a9       	ldd	r22, Y+53	; 0x35
    26bc:	7e a9       	ldd	r23, Y+54	; 0x36
    26be:	8f a9       	ldd	r24, Y+55	; 0x37
    26c0:	98 ad       	ldd	r25, Y+56	; 0x38
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	4a e7       	ldi	r20, 0x7A	; 122
    26c8:	55 e4       	ldi	r21, 0x45	; 69
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	89 ab       	std	Y+49, r24	; 0x31
    26d4:	9a ab       	std	Y+50, r25	; 0x32
    26d6:	ab ab       	std	Y+51, r26	; 0x33
    26d8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26da:	69 a9       	ldd	r22, Y+49	; 0x31
    26dc:	7a a9       	ldd	r23, Y+50	; 0x32
    26de:	8b a9       	ldd	r24, Y+51	; 0x33
    26e0:	9c a9       	ldd	r25, Y+52	; 0x34
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e8       	ldi	r20, 0x80	; 128
    26e8:	5f e3       	ldi	r21, 0x3F	; 63
    26ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ee:	88 23       	and	r24, r24
    26f0:	2c f4       	brge	.+10     	; 0x26fc <LCD_displayCharacter+0x50a>
		__ticks = 1;
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	90 e0       	ldi	r25, 0x00	; 0
    26f6:	98 ab       	std	Y+48, r25	; 0x30
    26f8:	8f a7       	std	Y+47, r24	; 0x2f
    26fa:	3f c0       	rjmp	.+126    	; 0x277a <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    26fc:	69 a9       	ldd	r22, Y+49	; 0x31
    26fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2700:	8b a9       	ldd	r24, Y+51	; 0x33
    2702:	9c a9       	ldd	r25, Y+52	; 0x34
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	3f ef       	ldi	r19, 0xFF	; 255
    2708:	4f e7       	ldi	r20, 0x7F	; 127
    270a:	57 e4       	ldi	r21, 0x47	; 71
    270c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2710:	18 16       	cp	r1, r24
    2712:	4c f5       	brge	.+82     	; 0x2766 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2714:	6d a9       	ldd	r22, Y+53	; 0x35
    2716:	7e a9       	ldd	r23, Y+54	; 0x36
    2718:	8f a9       	ldd	r24, Y+55	; 0x37
    271a:	98 ad       	ldd	r25, Y+56	; 0x38
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	40 e2       	ldi	r20, 0x20	; 32
    2722:	51 e4       	ldi	r21, 0x41	; 65
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	bc 01       	movw	r22, r24
    272e:	cd 01       	movw	r24, r26
    2730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	98 ab       	std	Y+48, r25	; 0x30
    273a:	8f a7       	std	Y+47, r24	; 0x2f
    273c:	0f c0       	rjmp	.+30     	; 0x275c <LCD_displayCharacter+0x56a>
    273e:	80 e9       	ldi	r24, 0x90	; 144
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	9e a7       	std	Y+46, r25	; 0x2e
    2744:	8d a7       	std	Y+45, r24	; 0x2d
    2746:	8d a5       	ldd	r24, Y+45	; 0x2d
    2748:	9e a5       	ldd	r25, Y+46	; 0x2e
    274a:	01 97       	sbiw	r24, 0x01	; 1
    274c:	f1 f7       	brne	.-4      	; 0x274a <LCD_displayCharacter+0x558>
    274e:	9e a7       	std	Y+46, r25	; 0x2e
    2750:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2752:	8f a5       	ldd	r24, Y+47	; 0x2f
    2754:	98 a9       	ldd	r25, Y+48	; 0x30
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	98 ab       	std	Y+48, r25	; 0x30
    275a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    275c:	8f a5       	ldd	r24, Y+47	; 0x2f
    275e:	98 a9       	ldd	r25, Y+48	; 0x30
    2760:	00 97       	sbiw	r24, 0x00	; 0
    2762:	69 f7       	brne	.-38     	; 0x273e <LCD_displayCharacter+0x54c>
    2764:	14 c0       	rjmp	.+40     	; 0x278e <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2766:	69 a9       	ldd	r22, Y+49	; 0x31
    2768:	7a a9       	ldd	r23, Y+50	; 0x32
    276a:	8b a9       	ldd	r24, Y+51	; 0x33
    276c:	9c a9       	ldd	r25, Y+52	; 0x34
    276e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	98 ab       	std	Y+48, r25	; 0x30
    2778:	8f a7       	std	Y+47, r24	; 0x2f
    277a:	8f a5       	ldd	r24, Y+47	; 0x2f
    277c:	98 a9       	ldd	r25, Y+48	; 0x30
    277e:	9c a7       	std	Y+44, r25	; 0x2c
    2780:	8b a7       	std	Y+43, r24	; 0x2b
    2782:	8b a5       	ldd	r24, Y+43	; 0x2b
    2784:	9c a5       	ldd	r25, Y+44	; 0x2c
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <LCD_displayCharacter+0x594>
    278a:	9c a7       	std	Y+44, r25	; 0x2c
    278c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT,ENABLE_PIN,LOGIC_HIGH);
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	62 e0       	ldi	r22, 0x02	; 2
    2792:	41 e0       	ldi	r20, 0x01	; 1
    2794:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	a0 e8       	ldi	r26, 0x80	; 128
    279e:	bf e3       	ldi	r27, 0x3F	; 63
    27a0:	8f a3       	std	Y+39, r24	; 0x27
    27a2:	98 a7       	std	Y+40, r25	; 0x28
    27a4:	a9 a7       	std	Y+41, r26	; 0x29
    27a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27a8:	6f a1       	ldd	r22, Y+39	; 0x27
    27aa:	78 a5       	ldd	r23, Y+40	; 0x28
    27ac:	89 a5       	ldd	r24, Y+41	; 0x29
    27ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	4a e7       	ldi	r20, 0x7A	; 122
    27b6:	55 e4       	ldi	r21, 0x45	; 69
    27b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	8b a3       	std	Y+35, r24	; 0x23
    27c2:	9c a3       	std	Y+36, r25	; 0x24
    27c4:	ad a3       	std	Y+37, r26	; 0x25
    27c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27c8:	6b a1       	ldd	r22, Y+35	; 0x23
    27ca:	7c a1       	ldd	r23, Y+36	; 0x24
    27cc:	8d a1       	ldd	r24, Y+37	; 0x25
    27ce:	9e a1       	ldd	r25, Y+38	; 0x26
    27d0:	20 e0       	ldi	r18, 0x00	; 0
    27d2:	30 e0       	ldi	r19, 0x00	; 0
    27d4:	40 e8       	ldi	r20, 0x80	; 128
    27d6:	5f e3       	ldi	r21, 0x3F	; 63
    27d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27dc:	88 23       	and	r24, r24
    27de:	2c f4       	brge	.+10     	; 0x27ea <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    27e0:	81 e0       	ldi	r24, 0x01	; 1
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	9a a3       	std	Y+34, r25	; 0x22
    27e6:	89 a3       	std	Y+33, r24	; 0x21
    27e8:	3f c0       	rjmp	.+126    	; 0x2868 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    27ea:	6b a1       	ldd	r22, Y+35	; 0x23
    27ec:	7c a1       	ldd	r23, Y+36	; 0x24
    27ee:	8d a1       	ldd	r24, Y+37	; 0x25
    27f0:	9e a1       	ldd	r25, Y+38	; 0x26
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	3f ef       	ldi	r19, 0xFF	; 255
    27f6:	4f e7       	ldi	r20, 0x7F	; 127
    27f8:	57 e4       	ldi	r21, 0x47	; 71
    27fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27fe:	18 16       	cp	r1, r24
    2800:	4c f5       	brge	.+82     	; 0x2854 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2802:	6f a1       	ldd	r22, Y+39	; 0x27
    2804:	78 a5       	ldd	r23, Y+40	; 0x28
    2806:	89 a5       	ldd	r24, Y+41	; 0x29
    2808:	9a a5       	ldd	r25, Y+42	; 0x2a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e2       	ldi	r20, 0x20	; 32
    2810:	51 e4       	ldi	r21, 0x41	; 65
    2812:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2816:	dc 01       	movw	r26, r24
    2818:	cb 01       	movw	r24, r22
    281a:	bc 01       	movw	r22, r24
    281c:	cd 01       	movw	r24, r26
    281e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	9a a3       	std	Y+34, r25	; 0x22
    2828:	89 a3       	std	Y+33, r24	; 0x21
    282a:	0f c0       	rjmp	.+30     	; 0x284a <LCD_displayCharacter+0x658>
    282c:	80 e9       	ldi	r24, 0x90	; 144
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	98 a3       	std	Y+32, r25	; 0x20
    2832:	8f 8f       	std	Y+31, r24	; 0x1f
    2834:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2836:	98 a1       	ldd	r25, Y+32	; 0x20
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <LCD_displayCharacter+0x646>
    283c:	98 a3       	std	Y+32, r25	; 0x20
    283e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2840:	89 a1       	ldd	r24, Y+33	; 0x21
    2842:	9a a1       	ldd	r25, Y+34	; 0x22
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	9a a3       	std	Y+34, r25	; 0x22
    2848:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    284a:	89 a1       	ldd	r24, Y+33	; 0x21
    284c:	9a a1       	ldd	r25, Y+34	; 0x22
    284e:	00 97       	sbiw	r24, 0x00	; 0
    2850:	69 f7       	brne	.-38     	; 0x282c <LCD_displayCharacter+0x63a>
    2852:	14 c0       	rjmp	.+40     	; 0x287c <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2854:	6b a1       	ldd	r22, Y+35	; 0x23
    2856:	7c a1       	ldd	r23, Y+36	; 0x24
    2858:	8d a1       	ldd	r24, Y+37	; 0x25
    285a:	9e a1       	ldd	r25, Y+38	; 0x26
    285c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	9a a3       	std	Y+34, r25	; 0x22
    2866:	89 a3       	std	Y+33, r24	; 0x21
    2868:	89 a1       	ldd	r24, Y+33	; 0x21
    286a:	9a a1       	ldd	r25, Y+34	; 0x22
    286c:	9e 8f       	std	Y+30, r25	; 0x1e
    286e:	8d 8f       	std	Y+29, r24	; 0x1d
    2870:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2872:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	f1 f7       	brne	.-4      	; 0x2874 <LCD_displayCharacter+0x682>
    2878:	9e 8f       	std	Y+30, r25	; 0x1e
    287a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_1,GET_BIT(character,0));
    287c:	fe 01       	movw	r30, r28
    287e:	ed 59       	subi	r30, 0x9D	; 157
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	80 81       	ld	r24, Z
    2884:	98 2f       	mov	r25, r24
    2886:	91 70       	andi	r25, 0x01	; 1
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	63 e0       	ldi	r22, 0x03	; 3
    288c:	49 2f       	mov	r20, r25
    288e:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_2,GET_BIT(character,1));
    2892:	fe 01       	movw	r30, r28
    2894:	ed 59       	subi	r30, 0x9D	; 157
    2896:	ff 4f       	sbci	r31, 0xFF	; 255
    2898:	80 81       	ld	r24, Z
    289a:	88 2f       	mov	r24, r24
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	82 70       	andi	r24, 0x02	; 2
    28a0:	90 70       	andi	r25, 0x00	; 0
    28a2:	95 95       	asr	r25
    28a4:	87 95       	ror	r24
    28a6:	98 2f       	mov	r25, r24
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	64 e0       	ldi	r22, 0x04	; 4
    28ac:	49 2f       	mov	r20, r25
    28ae:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_3,GET_BIT(character,2));
    28b2:	fe 01       	movw	r30, r28
    28b4:	ed 59       	subi	r30, 0x9D	; 157
    28b6:	ff 4f       	sbci	r31, 0xFF	; 255
    28b8:	80 81       	ld	r24, Z
    28ba:	88 2f       	mov	r24, r24
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	84 70       	andi	r24, 0x04	; 4
    28c0:	90 70       	andi	r25, 0x00	; 0
    28c2:	95 95       	asr	r25
    28c4:	87 95       	ror	r24
    28c6:	95 95       	asr	r25
    28c8:	87 95       	ror	r24
    28ca:	98 2f       	mov	r25, r24
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	65 e0       	ldi	r22, 0x05	; 5
    28d0:	49 2f       	mov	r20, r25
    28d2:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT,LCD_DATA_PIN_4,GET_BIT(character,3));
    28d6:	fe 01       	movw	r30, r28
    28d8:	ed 59       	subi	r30, 0x9D	; 157
    28da:	ff 4f       	sbci	r31, 0xFF	; 255
    28dc:	80 81       	ld	r24, Z
    28de:	88 2f       	mov	r24, r24
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	88 70       	andi	r24, 0x08	; 8
    28e4:	90 70       	andi	r25, 0x00	; 0
    28e6:	95 95       	asr	r25
    28e8:	87 95       	ror	r24
    28ea:	95 95       	asr	r25
    28ec:	87 95       	ror	r24
    28ee:	95 95       	asr	r25
    28f0:	87 95       	ror	r24
    28f2:	98 2f       	mov	r25, r24
    28f4:	80 e0       	ldi	r24, 0x00	; 0
    28f6:	66 e0       	ldi	r22, 0x06	; 6
    28f8:	49 2f       	mov	r20, r25
    28fa:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	a0 e8       	ldi	r26, 0x80	; 128
    2904:	bf e3       	ldi	r27, 0x3F	; 63
    2906:	89 8f       	std	Y+25, r24	; 0x19
    2908:	9a 8f       	std	Y+26, r25	; 0x1a
    290a:	ab 8f       	std	Y+27, r26	; 0x1b
    290c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290e:	69 8d       	ldd	r22, Y+25	; 0x19
    2910:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2912:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2914:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2916:	20 e0       	ldi	r18, 0x00	; 0
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	4a e7       	ldi	r20, 0x7A	; 122
    291c:	55 e4       	ldi	r21, 0x45	; 69
    291e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	8d 8b       	std	Y+21, r24	; 0x15
    2928:	9e 8b       	std	Y+22, r25	; 0x16
    292a:	af 8b       	std	Y+23, r26	; 0x17
    292c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    292e:	6d 89       	ldd	r22, Y+21	; 0x15
    2930:	7e 89       	ldd	r23, Y+22	; 0x16
    2932:	8f 89       	ldd	r24, Y+23	; 0x17
    2934:	98 8d       	ldd	r25, Y+24	; 0x18
    2936:	20 e0       	ldi	r18, 0x00	; 0
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e8       	ldi	r20, 0x80	; 128
    293c:	5f e3       	ldi	r21, 0x3F	; 63
    293e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2942:	88 23       	and	r24, r24
    2944:	2c f4       	brge	.+10     	; 0x2950 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9c 8b       	std	Y+20, r25	; 0x14
    294c:	8b 8b       	std	Y+19, r24	; 0x13
    294e:	3f c0       	rjmp	.+126    	; 0x29ce <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2950:	6d 89       	ldd	r22, Y+21	; 0x15
    2952:	7e 89       	ldd	r23, Y+22	; 0x16
    2954:	8f 89       	ldd	r24, Y+23	; 0x17
    2956:	98 8d       	ldd	r25, Y+24	; 0x18
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	3f ef       	ldi	r19, 0xFF	; 255
    295c:	4f e7       	ldi	r20, 0x7F	; 127
    295e:	57 e4       	ldi	r21, 0x47	; 71
    2960:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2964:	18 16       	cp	r1, r24
    2966:	4c f5       	brge	.+82     	; 0x29ba <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2968:	69 8d       	ldd	r22, Y+25	; 0x19
    296a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    296c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    296e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2970:	20 e0       	ldi	r18, 0x00	; 0
    2972:	30 e0       	ldi	r19, 0x00	; 0
    2974:	40 e2       	ldi	r20, 0x20	; 32
    2976:	51 e4       	ldi	r21, 0x41	; 65
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	bc 01       	movw	r22, r24
    2982:	cd 01       	movw	r24, r26
    2984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	9c 8b       	std	Y+20, r25	; 0x14
    298e:	8b 8b       	std	Y+19, r24	; 0x13
    2990:	0f c0       	rjmp	.+30     	; 0x29b0 <LCD_displayCharacter+0x7be>
    2992:	80 e9       	ldi	r24, 0x90	; 144
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	9a 8b       	std	Y+18, r25	; 0x12
    2998:	89 8b       	std	Y+17, r24	; 0x11
    299a:	89 89       	ldd	r24, Y+17	; 0x11
    299c:	9a 89       	ldd	r25, Y+18	; 0x12
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	f1 f7       	brne	.-4      	; 0x299e <LCD_displayCharacter+0x7ac>
    29a2:	9a 8b       	std	Y+18, r25	; 0x12
    29a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a6:	8b 89       	ldd	r24, Y+19	; 0x13
    29a8:	9c 89       	ldd	r25, Y+20	; 0x14
    29aa:	01 97       	sbiw	r24, 0x01	; 1
    29ac:	9c 8b       	std	Y+20, r25	; 0x14
    29ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29b0:	8b 89       	ldd	r24, Y+19	; 0x13
    29b2:	9c 89       	ldd	r25, Y+20	; 0x14
    29b4:	00 97       	sbiw	r24, 0x00	; 0
    29b6:	69 f7       	brne	.-38     	; 0x2992 <LCD_displayCharacter+0x7a0>
    29b8:	14 c0       	rjmp	.+40     	; 0x29e2 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ba:	6d 89       	ldd	r22, Y+21	; 0x15
    29bc:	7e 89       	ldd	r23, Y+22	; 0x16
    29be:	8f 89       	ldd	r24, Y+23	; 0x17
    29c0:	98 8d       	ldd	r25, Y+24	; 0x18
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9c 8b       	std	Y+20, r25	; 0x14
    29cc:	8b 8b       	std	Y+19, r24	; 0x13
    29ce:	8b 89       	ldd	r24, Y+19	; 0x13
    29d0:	9c 89       	ldd	r25, Y+20	; 0x14
    29d2:	98 8b       	std	Y+16, r25	; 0x10
    29d4:	8f 87       	std	Y+15, r24	; 0x0f
    29d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29d8:	98 89       	ldd	r25, Y+16	; 0x10
    29da:	01 97       	sbiw	r24, 0x01	; 1
    29dc:	f1 f7       	brne	.-4      	; 0x29da <LCD_displayCharacter+0x7e8>
    29de:	98 8b       	std	Y+16, r25	; 0x10
    29e0:	8f 87       	std	Y+15, r24	; 0x0f

#endif

	_delay_ms(1);
	GPIO_writePin(ENABLE_PORT, ENABLE_PIN, LOGIC_LOW);
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	62 e0       	ldi	r22, 0x02	; 2
    29e6:	40 e0       	ldi	r20, 0x00	; 0
    29e8:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
    29f0:	a0 e8       	ldi	r26, 0x80	; 128
    29f2:	bf e3       	ldi	r27, 0x3F	; 63
    29f4:	8b 87       	std	Y+11, r24	; 0x0b
    29f6:	9c 87       	std	Y+12, r25	; 0x0c
    29f8:	ad 87       	std	Y+13, r26	; 0x0d
    29fa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	4a e7       	ldi	r20, 0x7A	; 122
    2a0a:	55 e4       	ldi	r21, 0x45	; 69
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8f 83       	std	Y+7, r24	; 0x07
    2a16:	98 87       	std	Y+8, r25	; 0x08
    2a18:	a9 87       	std	Y+9, r26	; 0x09
    2a1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a1e:	78 85       	ldd	r23, Y+8	; 0x08
    2a20:	89 85       	ldd	r24, Y+9	; 0x09
    2a22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	40 e8       	ldi	r20, 0x80	; 128
    2a2a:	5f e3       	ldi	r21, 0x3F	; 63
    2a2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a30:	88 23       	and	r24, r24
    2a32:	2c f4       	brge	.+10     	; 0x2a3e <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	9e 83       	std	Y+6, r25	; 0x06
    2a3a:	8d 83       	std	Y+5, r24	; 0x05
    2a3c:	3f c0       	rjmp	.+126    	; 0x2abc <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2a3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a40:	78 85       	ldd	r23, Y+8	; 0x08
    2a42:	89 85       	ldd	r24, Y+9	; 0x09
    2a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	3f ef       	ldi	r19, 0xFF	; 255
    2a4a:	4f e7       	ldi	r20, 0x7F	; 127
    2a4c:	57 e4       	ldi	r21, 0x47	; 71
    2a4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a52:	18 16       	cp	r1, r24
    2a54:	4c f5       	brge	.+82     	; 0x2aa8 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a5e:	20 e0       	ldi	r18, 0x00	; 0
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e2       	ldi	r20, 0x20	; 32
    2a64:	51 e4       	ldi	r21, 0x41	; 65
    2a66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6a:	dc 01       	movw	r26, r24
    2a6c:	cb 01       	movw	r24, r22
    2a6e:	bc 01       	movw	r22, r24
    2a70:	cd 01       	movw	r24, r26
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	0f c0       	rjmp	.+30     	; 0x2a9e <LCD_displayCharacter+0x8ac>
    2a80:	80 e9       	ldi	r24, 0x90	; 144
    2a82:	91 e0       	ldi	r25, 0x01	; 1
    2a84:	9c 83       	std	Y+4, r25	; 0x04
    2a86:	8b 83       	std	Y+3, r24	; 0x03
    2a88:	8b 81       	ldd	r24, Y+3	; 0x03
    2a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a8c:	01 97       	sbiw	r24, 0x01	; 1
    2a8e:	f1 f7       	brne	.-4      	; 0x2a8c <LCD_displayCharacter+0x89a>
    2a90:	9c 83       	std	Y+4, r25	; 0x04
    2a92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a94:	8d 81       	ldd	r24, Y+5	; 0x05
    2a96:	9e 81       	ldd	r25, Y+6	; 0x06
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa0:	9e 81       	ldd	r25, Y+6	; 0x06
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	69 f7       	brne	.-38     	; 0x2a80 <LCD_displayCharacter+0x88e>
    2aa6:	14 c0       	rjmp	.+40     	; 0x2ad0 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aaa:	78 85       	ldd	r23, Y+8	; 0x08
    2aac:	89 85       	ldd	r24, Y+9	; 0x09
    2aae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab4:	dc 01       	movw	r26, r24
    2ab6:	cb 01       	movw	r24, r22
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	8d 83       	std	Y+5, r24	; 0x05
    2abc:	8d 81       	ldd	r24, Y+5	; 0x05
    2abe:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	01 97       	sbiw	r24, 0x01	; 1
    2aca:	f1 f7       	brne	.-4      	; 0x2ac8 <LCD_displayCharacter+0x8d6>
    2acc:	9a 83       	std	Y+2, r25	; 0x02
    2ace:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2ad0:	cd 59       	subi	r28, 0x9D	; 157
    2ad2:	df 4f       	sbci	r29, 0xFF	; 255
    2ad4:	0f b6       	in	r0, 0x3f	; 63
    2ad6:	f8 94       	cli
    2ad8:	de bf       	out	0x3e, r29	; 62
    2ada:	0f be       	out	0x3f, r0	; 63
    2adc:	cd bf       	out	0x3d, r28	; 61
    2ade:	cf 91       	pop	r28
    2ae0:	df 91       	pop	r29
    2ae2:	1f 91       	pop	r17
    2ae4:	0f 91       	pop	r16
    2ae6:	08 95       	ret

00002ae8 <LCD_displayString>:

/*Display string*/
void LCD_displayString(const uint8* str)
{
    2ae8:	df 93       	push	r29
    2aea:	cf 93       	push	r28
    2aec:	00 d0       	rcall	.+0      	; 0x2aee <LCD_displayString+0x6>
    2aee:	0f 92       	push	r0
    2af0:	cd b7       	in	r28, 0x3d	; 61
    2af2:	de b7       	in	r29, 0x3e	; 62
    2af4:	9b 83       	std	Y+3, r25	; 0x03
    2af6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2af8:	19 82       	std	Y+1, r1	; 0x01
    2afa:	0e c0       	rjmp	.+28     	; 0x2b18 <LCD_displayString+0x30>
	while(str[i] != '\0')
	{
		LCD_displayCharacter(str[i]);
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	9b 81       	ldd	r25, Y+3	; 0x03
    2b06:	fc 01       	movw	r30, r24
    2b08:	e2 0f       	add	r30, r18
    2b0a:	f3 1f       	adc	r31, r19
    2b0c:	80 81       	ld	r24, Z
    2b0e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayCharacter>
		i++;
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	89 83       	std	Y+1, r24	; 0x01

/*Display string*/
void LCD_displayString(const uint8* str)
{
	uint8 i = 0;
	while(str[i] != '\0')
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b20:	9b 81       	ldd	r25, Y+3	; 0x03
    2b22:	fc 01       	movw	r30, r24
    2b24:	e2 0f       	add	r30, r18
    2b26:	f3 1f       	adc	r31, r19
    2b28:	80 81       	ld	r24, Z
    2b2a:	88 23       	and	r24, r24
    2b2c:	39 f7       	brne	.-50     	; 0x2afc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    2b2e:	0f 90       	pop	r0
    2b30:	0f 90       	pop	r0
    2b32:	0f 90       	pop	r0
    2b34:	cf 91       	pop	r28
    2b36:	df 91       	pop	r29
    2b38:	08 95       	ret

00002b3a <LCD_moveCursor>:

/*Change cursor position*/
void LCD_moveCursor(uint8 row,uint8 col)
{
    2b3a:	df 93       	push	r29
    2b3c:	cf 93       	push	r28
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <LCD_moveCursor+0x6>
    2b40:	00 d0       	rcall	.+0      	; 0x2b42 <LCD_moveCursor+0x8>
    2b42:	0f 92       	push	r0
    2b44:	cd b7       	in	r28, 0x3d	; 61
    2b46:	de b7       	in	r29, 0x3e	; 62
    2b48:	8a 83       	std	Y+2, r24	; 0x02
    2b4a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4e:	28 2f       	mov	r18, r24
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	3d 83       	std	Y+5, r19	; 0x05
    2b54:	2c 83       	std	Y+4, r18	; 0x04
    2b56:	8c 81       	ldd	r24, Y+4	; 0x04
    2b58:	9d 81       	ldd	r25, Y+5	; 0x05
    2b5a:	81 30       	cpi	r24, 0x01	; 1
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	c1 f0       	breq	.+48     	; 0x2b90 <LCD_moveCursor+0x56>
    2b60:	2c 81       	ldd	r18, Y+4	; 0x04
    2b62:	3d 81       	ldd	r19, Y+5	; 0x05
    2b64:	22 30       	cpi	r18, 0x02	; 2
    2b66:	31 05       	cpc	r19, r1
    2b68:	2c f4       	brge	.+10     	; 0x2b74 <LCD_moveCursor+0x3a>
    2b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6e:	00 97       	sbiw	r24, 0x00	; 0
    2b70:	61 f0       	breq	.+24     	; 0x2b8a <LCD_moveCursor+0x50>
    2b72:	19 c0       	rjmp	.+50     	; 0x2ba6 <LCD_moveCursor+0x6c>
    2b74:	2c 81       	ldd	r18, Y+4	; 0x04
    2b76:	3d 81       	ldd	r19, Y+5	; 0x05
    2b78:	22 30       	cpi	r18, 0x02	; 2
    2b7a:	31 05       	cpc	r19, r1
    2b7c:	69 f0       	breq	.+26     	; 0x2b98 <LCD_moveCursor+0x5e>
    2b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b80:	9d 81       	ldd	r25, Y+5	; 0x05
    2b82:	83 30       	cpi	r24, 0x03	; 3
    2b84:	91 05       	cpc	r25, r1
    2b86:	61 f0       	breq	.+24     	; 0x2ba0 <LCD_moveCursor+0x66>
    2b88:	0e c0       	rjmp	.+28     	; 0x2ba6 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    2b8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b8c:	89 83       	std	Y+1, r24	; 0x01
    2b8e:	0b c0       	rjmp	.+22     	; 0x2ba6 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    2b90:	8b 81       	ldd	r24, Y+3	; 0x03
    2b92:	80 5c       	subi	r24, 0xC0	; 192
    2b94:	89 83       	std	Y+1, r24	; 0x01
    2b96:	07 c0       	rjmp	.+14     	; 0x2ba6 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    2b98:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9a:	80 5f       	subi	r24, 0xF0	; 240
    2b9c:	89 83       	std	Y+1, r24	; 0x01
    2b9e:	03 c0       	rjmp	.+6      	; 0x2ba6 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    2ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ba2:	80 5b       	subi	r24, 0xB0	; 176
    2ba4:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	80 68       	ori	r24, 0x80	; 128
    2baa:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_sendCommand>
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <LCD_intgerToString>:

/*Integer display*/
void LCD_intgerToString(int data)
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	62 97       	sbiw	r28, 0x12	; 18
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	9a 8b       	std	Y+18, r25	; 0x12
    2bd4:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2bd6:	89 89       	ldd	r24, Y+17	; 0x11
    2bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    2bda:	9e 01       	movw	r18, r28
    2bdc:	2f 5f       	subi	r18, 0xFF	; 255
    2bde:	3f 4f       	sbci	r19, 0xFF	; 255
    2be0:	b9 01       	movw	r22, r18
    2be2:	4a e0       	ldi	r20, 0x0A	; 10
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	0e 94 8f 1a 	call	0x351e	; 0x351e <itoa>
   LCD_displayString(buff); /* Display the string */
    2bea:	ce 01       	movw	r24, r28
    2bec:	01 96       	adiw	r24, 0x01	; 1
    2bee:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
}
    2bf2:	62 96       	adiw	r28, 0x12	; 18
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	f8 94       	cli
    2bf8:	de bf       	out	0x3e, r29	; 62
    2bfa:	0f be       	out	0x3f, r0	; 63
    2bfc:	cd bf       	out	0x3d, r28	; 61
    2bfe:	cf 91       	pop	r28
    2c00:	df 91       	pop	r29
    2c02:	08 95       	ret

00002c04 <LCD_floatToString>:

 /*Float display*/
void LCD_floatToString(float32 data)
{
    2c04:	df 93       	push	r29
    2c06:	cf 93       	push	r28
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	64 97       	sbiw	r28, 0x14	; 20
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	69 8b       	std	Y+17, r22	; 0x11
    2c1a:	7a 8b       	std	Y+18, r23	; 0x12
    2c1c:	8b 8b       	std	Y+19, r24	; 0x13
    2c1e:	9c 8b       	std	Y+20, r25	; 0x14
	uint8 buff[16]; /* String to hold the ascii result */
	itoa((int)data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2c20:	69 89       	ldd	r22, Y+17	; 0x11
    2c22:	7a 89       	ldd	r23, Y+18	; 0x12
    2c24:	8b 89       	ldd	r24, Y+19	; 0x13
    2c26:	9c 89       	ldd	r25, Y+20	; 0x14
    2c28:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2c2c:	dc 01       	movw	r26, r24
    2c2e:	cb 01       	movw	r24, r22
    2c30:	9e 01       	movw	r18, r28
    2c32:	2f 5f       	subi	r18, 0xFF	; 255
    2c34:	3f 4f       	sbci	r19, 0xFF	; 255
    2c36:	b9 01       	movw	r22, r18
    2c38:	4a e0       	ldi	r20, 0x0A	; 10
    2c3a:	50 e0       	ldi	r21, 0x00	; 0
    2c3c:	0e 94 8f 1a 	call	0x351e	; 0x351e <itoa>
	LCD_displayString(buff);
    2c40:	ce 01       	movw	r24, r28
    2c42:	01 96       	adiw	r24, 0x01	; 1
    2c44:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
	LCD_displayCharacter('.');
    2c48:	8e e2       	ldi	r24, 0x2E	; 46
    2c4a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <LCD_displayCharacter>
	data -= (int)data;
    2c4e:	69 89       	ldd	r22, Y+17	; 0x11
    2c50:	7a 89       	ldd	r23, Y+18	; 0x12
    2c52:	8b 89       	ldd	r24, Y+19	; 0x13
    2c54:	9c 89       	ldd	r25, Y+20	; 0x14
    2c56:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	aa 27       	eor	r26, r26
    2c60:	97 fd       	sbrc	r25, 7
    2c62:	a0 95       	com	r26
    2c64:	ba 2f       	mov	r27, r26
    2c66:	bc 01       	movw	r22, r24
    2c68:	cd 01       	movw	r24, r26
    2c6a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    2c6e:	9b 01       	movw	r18, r22
    2c70:	ac 01       	movw	r20, r24
    2c72:	69 89       	ldd	r22, Y+17	; 0x11
    2c74:	7a 89       	ldd	r23, Y+18	; 0x12
    2c76:	8b 89       	ldd	r24, Y+19	; 0x13
    2c78:	9c 89       	ldd	r25, Y+20	; 0x14
    2c7a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	89 8b       	std	Y+17, r24	; 0x11
    2c84:	9a 8b       	std	Y+18, r25	; 0x12
    2c86:	ab 8b       	std	Y+19, r26	; 0x13
    2c88:	bc 8b       	std	Y+20, r27	; 0x14
	data*=1000;
    2c8a:	69 89       	ldd	r22, Y+17	; 0x11
    2c8c:	7a 89       	ldd	r23, Y+18	; 0x12
    2c8e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c90:	9c 89       	ldd	r25, Y+20	; 0x14
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	4a e7       	ldi	r20, 0x7A	; 122
    2c98:	54 e4       	ldi	r21, 0x44	; 68
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	89 8b       	std	Y+17, r24	; 0x11
    2ca4:	9a 8b       	std	Y+18, r25	; 0x12
    2ca6:	ab 8b       	std	Y+19, r26	; 0x13
    2ca8:	bc 8b       	std	Y+20, r27	; 0x14
	itoa((int)data,buff,10);
    2caa:	69 89       	ldd	r22, Y+17	; 0x11
    2cac:	7a 89       	ldd	r23, Y+18	; 0x12
    2cae:	8b 89       	ldd	r24, Y+19	; 0x13
    2cb0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cb2:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9e 01       	movw	r18, r28
    2cbc:	2f 5f       	subi	r18, 0xFF	; 255
    2cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc0:	b9 01       	movw	r22, r18
    2cc2:	4a e0       	ldi	r20, 0x0A	; 10
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	0e 94 8f 1a 	call	0x351e	; 0x351e <itoa>
	LCD_displayString(buff);
    2cca:	ce 01       	movw	r24, r28
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>

}
    2cd2:	64 96       	adiw	r28, 0x14	; 20
    2cd4:	0f b6       	in	r0, 0x3f	; 63
    2cd6:	f8 94       	cli
    2cd8:	de bf       	out	0x3e, r29	; 62
    2cda:	0f be       	out	0x3f, r0	; 63
    2cdc:	cd bf       	out	0x3d, r28	; 61
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <LCD_clearScreen>:

/*Clear screen*/
void LCD_clearScreen(void)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2cec:	81 e0       	ldi	r24, 0x01	; 1
    2cee:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_sendCommand>
}
    2cf2:	cf 91       	pop	r28
    2cf4:	df 91       	pop	r29
    2cf6:	08 95       	ret

00002cf8 <LEDS_init>:
LED_ID g_ledRedLed = LED_RED_ID;
LED_ID g_ledGreenLed = LED_GREEN_ID;
LED_ID g_ledBlueLed = LED_BLUE_ID;

void LEDS_init(void)
{
    2cf8:	df 93       	push	r29
    2cfa:	cf 93       	push	r28
    2cfc:	cd b7       	in	r28, 0x3d	; 61
    2cfe:	de b7       	in	r29, 0x3e	; 62
	/*Set the direction of all 3 LEDs to output*/
	GPIO_setupPinDirection(LED_RED_PORT, LED_RED_PIN, PIN_OUTPUT);
    2d00:	82 e0       	ldi	r24, 0x02	; 2
    2d02:	60 e0       	ldi	r22, 0x00	; 0
    2d04:	41 e0       	ldi	r20, 0x01	; 1
    2d06:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_GREEN_PORT, LED_GREEN_PIN, PIN_OUTPUT);
    2d0a:	82 e0       	ldi	r24, 0x02	; 2
    2d0c:	61 e0       	ldi	r22, 0x01	; 1
    2d0e:	41 e0       	ldi	r20, 0x01	; 1
    2d10:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_BLUE_PORT, LED_BLUE_PIN, PIN_OUTPUT);
    2d14:	82 e0       	ldi	r24, 0x02	; 2
    2d16:	62 e0       	ldi	r22, 0x02	; 2
    2d18:	41 e0       	ldi	r20, 0x01	; 1
    2d1a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>

	/*Turn off all 3 LEDs*/
	/*for positive logic*/
#if(LED_CONNECTION_LOGIC == 0)
	GPIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    2d1e:	82 e0       	ldi	r24, 0x02	; 2
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	40 e0       	ldi	r20, 0x00	; 0
    2d24:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    2d28:	82 e0       	ldi	r24, 0x02	; 2
    2d2a:	61 e0       	ldi	r22, 0x01	; 1
    2d2c:	40 e0       	ldi	r20, 0x00	; 0
    2d2e:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    2d32:	82 e0       	ldi	r24, 0x02	; 2
    2d34:	62 e0       	ldi	r22, 0x02	; 2
    2d36:	40 e0       	ldi	r20, 0x00	; 0
    2d38:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
	GPIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_HIGH);
	GPIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_HIGH);
	GPIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_HIGH);
#endif

}
    2d3c:	cf 91       	pop	r28
    2d3e:	df 91       	pop	r29
    2d40:	08 95       	ret

00002d42 <LED_on>:

void LED_on(LED_ID id)
{
    2d42:	df 93       	push	r29
    2d44:	cf 93       	push	r28
    2d46:	00 d0       	rcall	.+0      	; 0x2d48 <LED_on+0x6>
    2d48:	0f 92       	push	r0
    2d4a:	cd b7       	in	r28, 0x3d	; 61
    2d4c:	de b7       	in	r29, 0x3e	; 62
    2d4e:	89 83       	std	Y+1, r24	; 0x01
	/*Turn on 1 LED*/
	/*for positive logic*/
#if(LED_CONNECTION_LOGIC == 0)
	switch(id)
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	3b 83       	std	Y+3, r19	; 0x03
    2d58:	2a 83       	std	Y+2, r18	; 0x02
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5e:	82 30       	cpi	r24, 0x02	; 2
    2d60:	91 05       	cpc	r25, r1
    2d62:	81 f0       	breq	.+32     	; 0x2d84 <LED_on+0x42>
    2d64:	2a 81       	ldd	r18, Y+2	; 0x02
    2d66:	3b 81       	ldd	r19, Y+3	; 0x03
    2d68:	23 30       	cpi	r18, 0x03	; 3
    2d6a:	31 05       	cpc	r19, r1
    2d6c:	89 f0       	breq	.+34     	; 0x2d90 <LED_on+0x4e>
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	9b 81       	ldd	r25, Y+3	; 0x03
    2d72:	81 30       	cpi	r24, 0x01	; 1
    2d74:	91 05       	cpc	r25, r1
    2d76:	89 f4       	brne	.+34     	; 0x2d9a <LED_on+0x58>
	{
	case LED_RED_ID:
		GPIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_HIGH);
    2d78:	82 e0       	ldi	r24, 0x02	; 2
    2d7a:	60 e0       	ldi	r22, 0x00	; 0
    2d7c:	41 e0       	ldi	r20, 0x01	; 1
    2d7e:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    2d82:	0b c0       	rjmp	.+22     	; 0x2d9a <LED_on+0x58>
		break;
	case LED_GREEN_ID:
		GPIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_HIGH);
    2d84:	82 e0       	ldi	r24, 0x02	; 2
    2d86:	61 e0       	ldi	r22, 0x01	; 1
    2d88:	41 e0       	ldi	r20, 0x01	; 1
    2d8a:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    2d8e:	05 c0       	rjmp	.+10     	; 0x2d9a <LED_on+0x58>
		break;
	case LED_BLUE_ID:
		GPIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_HIGH);
    2d90:	82 e0       	ldi	r24, 0x02	; 2
    2d92:	62 e0       	ldi	r22, 0x02	; 2
    2d94:	41 e0       	ldi	r20, 0x01	; 1
    2d96:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
		GPIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
		break;
	}
#endif

}
    2d9a:	0f 90       	pop	r0
    2d9c:	0f 90       	pop	r0
    2d9e:	0f 90       	pop	r0
    2da0:	cf 91       	pop	r28
    2da2:	df 91       	pop	r29
    2da4:	08 95       	ret

00002da6 <LED_off>:

void LED_off(LED_ID id)
{
    2da6:	df 93       	push	r29
    2da8:	cf 93       	push	r28
    2daa:	00 d0       	rcall	.+0      	; 0x2dac <LED_off+0x6>
    2dac:	0f 92       	push	r0
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
    2db2:	89 83       	std	Y+1, r24	; 0x01
	/*Turn off 1 LED*/
	/*for positive logic*/
#if(LED_CONNECTION_LOGIC == 0)
	switch(id)
    2db4:	89 81       	ldd	r24, Y+1	; 0x01
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	3b 83       	std	Y+3, r19	; 0x03
    2dbc:	2a 83       	std	Y+2, r18	; 0x02
    2dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2dc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2dc2:	82 30       	cpi	r24, 0x02	; 2
    2dc4:	91 05       	cpc	r25, r1
    2dc6:	81 f0       	breq	.+32     	; 0x2de8 <LED_off+0x42>
    2dc8:	2a 81       	ldd	r18, Y+2	; 0x02
    2dca:	3b 81       	ldd	r19, Y+3	; 0x03
    2dcc:	23 30       	cpi	r18, 0x03	; 3
    2dce:	31 05       	cpc	r19, r1
    2dd0:	89 f0       	breq	.+34     	; 0x2df4 <LED_off+0x4e>
    2dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	91 05       	cpc	r25, r1
    2dda:	89 f4       	brne	.+34     	; 0x2dfe <LED_off+0x58>
	{
	case LED_RED_ID:
		GPIO_writePin(LED_RED_PORT, LED_RED_PIN, LOGIC_LOW);
    2ddc:	82 e0       	ldi	r24, 0x02	; 2
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    2de6:	0b c0       	rjmp	.+22     	; 0x2dfe <LED_off+0x58>
		break;
	case LED_GREEN_ID:
		GPIO_writePin(LED_GREEN_PORT, LED_GREEN_PIN, LOGIC_LOW);
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	61 e0       	ldi	r22, 0x01	; 1
    2dec:	40 e0       	ldi	r20, 0x00	; 0
    2dee:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    2df2:	05 c0       	rjmp	.+10     	; 0x2dfe <LED_off+0x58>
		break;
	case LED_BLUE_ID:
		GPIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_LOW);
    2df4:	82 e0       	ldi	r24, 0x02	; 2
    2df6:	62 e0       	ldi	r22, 0x02	; 2
    2df8:	40 e0       	ldi	r20, 0x00	; 0
    2dfa:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
		GPIO_writePin(LED_BLUE_PORT, LED_BLUE_PIN, LOGIC_HIGH);
		break;
	}

#endif
}
    2dfe:	0f 90       	pop	r0
    2e00:	0f 90       	pop	r0
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <main>:
#include "ultrasonic.h"
#include <avr/io.h>
#include "common_macros.h"

int main(void)
{
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	6e 97       	sbiw	r28, 0x1e	; 30
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7);
    2e1e:	af e5       	ldi	r26, 0x5F	; 95
    2e20:	b0 e0       	ldi	r27, 0x00	; 0
    2e22:	ef e5       	ldi	r30, 0x5F	; 95
    2e24:	f0 e0       	ldi	r31, 0x00	; 0
    2e26:	80 81       	ld	r24, Z
    2e28:	80 68       	ori	r24, 0x80	; 128
    2e2a:	8c 93       	st	X, r24

	uint16 distance_measured = 0;
    2e2c:	1e 8e       	std	Y+30, r1	; 0x1e
    2e2e:	1d 8e       	std	Y+29, r1	; 0x1d
	/*devices initialization*/
	LCD_init();
    2e30:	0e 94 cc 0b 	call	0x1798	; 0x1798 <LCD_init>
	Buzzer_init();
    2e34:	0e 94 75 07 	call	0xeea	; 0xeea <Buzzer_init>
	LEDS_init();
    2e38:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <LEDS_init>
	Ultrasonic_init();
    2e3c:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <Ultrasonic_init>

	LCD_displayString("Distance=");
    2e40:	80 e6       	ldi	r24, 0x60	; 96
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
	LCD_moveCursor(0,13);
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	6d e0       	ldi	r22, 0x0D	; 13
    2e4c:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
	LCD_displayString("cm");
    2e50:	8a e6       	ldi	r24, 0x6A	; 106
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>

	while(1)
	{
		distance_measured = Ultrasonic_readDistance();
    2e58:	0e 94 f7 19 	call	0x33ee	; 0x33ee <Ultrasonic_readDistance>
    2e5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2e5e:	8d 8f       	std	Y+29, r24	; 0x1d

		LCD_moveCursor(0,10);
    2e60:	80 e0       	ldi	r24, 0x00	; 0
    2e62:	6a e0       	ldi	r22, 0x0A	; 10
    2e64:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
		LCD_intgerToString(distance_measured);
    2e68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e6c:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <LCD_intgerToString>

		if(distance_measured < 10)
    2e70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e74:	8a 30       	cpi	r24, 0x0A	; 10
    2e76:	91 05       	cpc	r25, r1
    2e78:	40 f4       	brcc	.+16     	; 0x2e8a <main+0x80>
		{
			LCD_moveCursor(0,11);
    2e7a:	80 e0       	ldi	r24, 0x00	; 0
    2e7c:	6b e0       	ldi	r22, 0x0B	; 11
    2e7e:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
			LCD_displayString("  ");
    2e82:	8d e6       	ldi	r24, 0x6D	; 109
    2e84:	90 e0       	ldi	r25, 0x00	; 0
    2e86:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
		}

		if(distance_measured <= 5)
    2e8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e8e:	86 30       	cpi	r24, 0x06	; 6
    2e90:	91 05       	cpc	r25, r1
    2e92:	08 f0       	brcs	.+2      	; 0x2e96 <main+0x8c>
    2e94:	09 c1       	rjmp	.+530    	; 0x30a8 <main+0x29e>
		{
			LCD_moveCursor(1,5);
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	65 e0       	ldi	r22, 0x05	; 5
    2e9a:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
			LCD_displayString("STOP");
    2e9e:	80 e7       	ldi	r24, 0x70	; 112
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
			LED_on(g_ledRedLed);
    2ea6:	80 91 83 01 	lds	r24, 0x0183
    2eaa:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			LED_on(g_ledGreenLed);
    2eae:	80 91 84 01 	lds	r24, 0x0184
    2eb2:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			LED_on(g_ledBlueLed);
    2eb6:	80 91 85 01 	lds	r24, 0x0185
    2eba:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			Buzzer_on();
    2ebe:	0e 94 86 07 	call	0xf0c	; 0xf0c <Buzzer_on>
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	90 e0       	ldi	r25, 0x00	; 0
    2ec6:	a6 e1       	ldi	r26, 0x16	; 22
    2ec8:	b3 e4       	ldi	r27, 0x43	; 67
    2eca:	89 8f       	std	Y+25, r24	; 0x19
    2ecc:	9a 8f       	std	Y+26, r25	; 0x1a
    2ece:	ab 8f       	std	Y+27, r26	; 0x1b
    2ed0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ed2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ed4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ed6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ed8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2eda:	20 e0       	ldi	r18, 0x00	; 0
    2edc:	30 e0       	ldi	r19, 0x00	; 0
    2ede:	4a e7       	ldi	r20, 0x7A	; 122
    2ee0:	55 e4       	ldi	r21, 0x45	; 69
    2ee2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	8d 8b       	std	Y+21, r24	; 0x15
    2eec:	9e 8b       	std	Y+22, r25	; 0x16
    2eee:	af 8b       	std	Y+23, r26	; 0x17
    2ef0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ef2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ef4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ef6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ef8:	98 8d       	ldd	r25, Y+24	; 0x18
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 e8       	ldi	r20, 0x80	; 128
    2f00:	5f e3       	ldi	r21, 0x3F	; 63
    2f02:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f06:	88 23       	and	r24, r24
    2f08:	2c f4       	brge	.+10     	; 0x2f14 <main+0x10a>
		__ticks = 1;
    2f0a:	81 e0       	ldi	r24, 0x01	; 1
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	9c 8b       	std	Y+20, r25	; 0x14
    2f10:	8b 8b       	std	Y+19, r24	; 0x13
    2f12:	3f c0       	rjmp	.+126    	; 0x2f92 <main+0x188>
	else if (__tmp > 65535)
    2f14:	6d 89       	ldd	r22, Y+21	; 0x15
    2f16:	7e 89       	ldd	r23, Y+22	; 0x16
    2f18:	8f 89       	ldd	r24, Y+23	; 0x17
    2f1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1c:	20 e0       	ldi	r18, 0x00	; 0
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255
    2f20:	4f e7       	ldi	r20, 0x7F	; 127
    2f22:	57 e4       	ldi	r21, 0x47	; 71
    2f24:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	4c f5       	brge	.+82     	; 0x2f7e <main+0x174>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f2e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f32:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e2       	ldi	r20, 0x20	; 32
    2f3a:	51 e4       	ldi	r21, 0x41	; 65
    2f3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f40:	dc 01       	movw	r26, r24
    2f42:	cb 01       	movw	r24, r22
    2f44:	bc 01       	movw	r22, r24
    2f46:	cd 01       	movw	r24, r26
    2f48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f4c:	dc 01       	movw	r26, r24
    2f4e:	cb 01       	movw	r24, r22
    2f50:	9c 8b       	std	Y+20, r25	; 0x14
    2f52:	8b 8b       	std	Y+19, r24	; 0x13
    2f54:	0f c0       	rjmp	.+30     	; 0x2f74 <main+0x16a>
    2f56:	80 e9       	ldi	r24, 0x90	; 144
    2f58:	91 e0       	ldi	r25, 0x01	; 1
    2f5a:	9a 8b       	std	Y+18, r25	; 0x12
    2f5c:	89 8b       	std	Y+17, r24	; 0x11
    2f5e:	89 89       	ldd	r24, Y+17	; 0x11
    2f60:	9a 89       	ldd	r25, Y+18	; 0x12
    2f62:	01 97       	sbiw	r24, 0x01	; 1
    2f64:	f1 f7       	brne	.-4      	; 0x2f62 <main+0x158>
    2f66:	9a 8b       	std	Y+18, r25	; 0x12
    2f68:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f6a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f6c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f6e:	01 97       	sbiw	r24, 0x01	; 1
    2f70:	9c 8b       	std	Y+20, r25	; 0x14
    2f72:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f74:	8b 89       	ldd	r24, Y+19	; 0x13
    2f76:	9c 89       	ldd	r25, Y+20	; 0x14
    2f78:	00 97       	sbiw	r24, 0x00	; 0
    2f7a:	69 f7       	brne	.-38     	; 0x2f56 <main+0x14c>
    2f7c:	14 c0       	rjmp	.+40     	; 0x2fa6 <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f7e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f80:	7e 89       	ldd	r23, Y+22	; 0x16
    2f82:	8f 89       	ldd	r24, Y+23	; 0x17
    2f84:	98 8d       	ldd	r25, Y+24	; 0x18
    2f86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8a:	dc 01       	movw	r26, r24
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	9c 8b       	std	Y+20, r25	; 0x14
    2f90:	8b 8b       	std	Y+19, r24	; 0x13
    2f92:	8b 89       	ldd	r24, Y+19	; 0x13
    2f94:	9c 89       	ldd	r25, Y+20	; 0x14
    2f96:	98 8b       	std	Y+16, r25	; 0x10
    2f98:	8f 87       	std	Y+15, r24	; 0x0f
    2f9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f9c:	98 89       	ldd	r25, Y+16	; 0x10
    2f9e:	01 97       	sbiw	r24, 0x01	; 1
    2fa0:	f1 f7       	brne	.-4      	; 0x2f9e <main+0x194>
    2fa2:	98 8b       	std	Y+16, r25	; 0x10
    2fa4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(150);
			LED_off(g_ledRedLed);
    2fa6:	80 91 83 01 	lds	r24, 0x0183
    2faa:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			LED_off(g_ledGreenLed);
    2fae:	80 91 84 01 	lds	r24, 0x0184
    2fb2:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			LED_off(g_ledBlueLed);
    2fb6:	80 91 85 01 	lds	r24, 0x0185
    2fba:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			Buzzer_off();
    2fbe:	0e 94 92 07 	call	0xf24	; 0xf24 <Buzzer_off>
    2fc2:	80 e0       	ldi	r24, 0x00	; 0
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	a6 e1       	ldi	r26, 0x16	; 22
    2fc8:	b3 e4       	ldi	r27, 0x43	; 67
    2fca:	8b 87       	std	Y+11, r24	; 0x0b
    2fcc:	9c 87       	std	Y+12, r25	; 0x0c
    2fce:	ad 87       	std	Y+13, r26	; 0x0d
    2fd0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	4a e7       	ldi	r20, 0x7A	; 122
    2fe0:	55 e4       	ldi	r21, 0x45	; 69
    2fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	8f 83       	std	Y+7, r24	; 0x07
    2fec:	98 87       	std	Y+8, r25	; 0x08
    2fee:	a9 87       	std	Y+9, r26	; 0x09
    2ff0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ff2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff4:	78 85       	ldd	r23, Y+8	; 0x08
    2ff6:	89 85       	ldd	r24, Y+9	; 0x09
    2ff8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	40 e8       	ldi	r20, 0x80	; 128
    3000:	5f e3       	ldi	r21, 0x3F	; 63
    3002:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3006:	88 23       	and	r24, r24
    3008:	2c f4       	brge	.+10     	; 0x3014 <main+0x20a>
		__ticks = 1;
    300a:	81 e0       	ldi	r24, 0x01	; 1
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	9e 83       	std	Y+6, r25	; 0x06
    3010:	8d 83       	std	Y+5, r24	; 0x05
    3012:	3f c0       	rjmp	.+126    	; 0x3092 <main+0x288>
	else if (__tmp > 65535)
    3014:	6f 81       	ldd	r22, Y+7	; 0x07
    3016:	78 85       	ldd	r23, Y+8	; 0x08
    3018:	89 85       	ldd	r24, Y+9	; 0x09
    301a:	9a 85       	ldd	r25, Y+10	; 0x0a
    301c:	20 e0       	ldi	r18, 0x00	; 0
    301e:	3f ef       	ldi	r19, 0xFF	; 255
    3020:	4f e7       	ldi	r20, 0x7F	; 127
    3022:	57 e4       	ldi	r21, 0x47	; 71
    3024:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3028:	18 16       	cp	r1, r24
    302a:	4c f5       	brge	.+82     	; 0x307e <main+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302c:	6b 85       	ldd	r22, Y+11	; 0x0b
    302e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3030:	8d 85       	ldd	r24, Y+13	; 0x0d
    3032:	9e 85       	ldd	r25, Y+14	; 0x0e
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e2       	ldi	r20, 0x20	; 32
    303a:	51 e4       	ldi	r21, 0x41	; 65
    303c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3040:	dc 01       	movw	r26, r24
    3042:	cb 01       	movw	r24, r22
    3044:	bc 01       	movw	r22, r24
    3046:	cd 01       	movw	r24, r26
    3048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304c:	dc 01       	movw	r26, r24
    304e:	cb 01       	movw	r24, r22
    3050:	9e 83       	std	Y+6, r25	; 0x06
    3052:	8d 83       	std	Y+5, r24	; 0x05
    3054:	0f c0       	rjmp	.+30     	; 0x3074 <main+0x26a>
    3056:	80 e9       	ldi	r24, 0x90	; 144
    3058:	91 e0       	ldi	r25, 0x01	; 1
    305a:	9c 83       	std	Y+4, r25	; 0x04
    305c:	8b 83       	std	Y+3, r24	; 0x03
    305e:	8b 81       	ldd	r24, Y+3	; 0x03
    3060:	9c 81       	ldd	r25, Y+4	; 0x04
    3062:	01 97       	sbiw	r24, 0x01	; 1
    3064:	f1 f7       	brne	.-4      	; 0x3062 <main+0x258>
    3066:	9c 83       	std	Y+4, r25	; 0x04
    3068:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306a:	8d 81       	ldd	r24, Y+5	; 0x05
    306c:	9e 81       	ldd	r25, Y+6	; 0x06
    306e:	01 97       	sbiw	r24, 0x01	; 1
    3070:	9e 83       	std	Y+6, r25	; 0x06
    3072:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3074:	8d 81       	ldd	r24, Y+5	; 0x05
    3076:	9e 81       	ldd	r25, Y+6	; 0x06
    3078:	00 97       	sbiw	r24, 0x00	; 0
    307a:	69 f7       	brne	.-38     	; 0x3056 <main+0x24c>
    307c:	ed ce       	rjmp	.-550    	; 0x2e58 <main+0x4e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    307e:	6f 81       	ldd	r22, Y+7	; 0x07
    3080:	78 85       	ldd	r23, Y+8	; 0x08
    3082:	89 85       	ldd	r24, Y+9	; 0x09
    3084:	9a 85       	ldd	r25, Y+10	; 0x0a
    3086:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308a:	dc 01       	movw	r26, r24
    308c:	cb 01       	movw	r24, r22
    308e:	9e 83       	std	Y+6, r25	; 0x06
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	8d 81       	ldd	r24, Y+5	; 0x05
    3094:	9e 81       	ldd	r25, Y+6	; 0x06
    3096:	9a 83       	std	Y+2, r25	; 0x02
    3098:	89 83       	std	Y+1, r24	; 0x01
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	9a 81       	ldd	r25, Y+2	; 0x02
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	f1 f7       	brne	.-4      	; 0x309e <main+0x294>
    30a2:	9a 83       	std	Y+2, r25	; 0x02
    30a4:	89 83       	std	Y+1, r24	; 0x01
    30a6:	d8 ce       	rjmp	.-592    	; 0x2e58 <main+0x4e>
			_delay_ms(150);
		}
		else if((distance_measured > 5) && (distance_measured <= 10))
    30a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ac:	86 30       	cpi	r24, 0x06	; 6
    30ae:	91 05       	cpc	r25, r1
    30b0:	e0 f0       	brcs	.+56     	; 0x30ea <main+0x2e0>
    30b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30b6:	8b 30       	cpi	r24, 0x0B	; 11
    30b8:	91 05       	cpc	r25, r1
    30ba:	b8 f4       	brcc	.+46     	; 0x30ea <main+0x2e0>
		{
			LCD_moveCursor(1,5);
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	65 e0       	ldi	r22, 0x05	; 5
    30c0:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
			LCD_displayString("     ");
    30c4:	85 e7       	ldi	r24, 0x75	; 117
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
			LED_on(g_ledRedLed);
    30cc:	80 91 83 01 	lds	r24, 0x0183
    30d0:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			LED_on(g_ledGreenLed);
    30d4:	80 91 84 01 	lds	r24, 0x0184
    30d8:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			LED_on(g_ledBlueLed);
    30dc:	80 91 85 01 	lds	r24, 0x0185
    30e0:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			Buzzer_off();
    30e4:	0e 94 92 07 	call	0xf24	; 0xf24 <Buzzer_off>
    30e8:	b7 ce       	rjmp	.-658    	; 0x2e58 <main+0x4e>
		}
		else if((distance_measured > 10) && (distance_measured <= 15))
    30ea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30ec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30ee:	8b 30       	cpi	r24, 0x0B	; 11
    30f0:	91 05       	cpc	r25, r1
    30f2:	e0 f0       	brcs	.+56     	; 0x312c <main+0x322>
    30f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30f8:	80 31       	cpi	r24, 0x10	; 16
    30fa:	91 05       	cpc	r25, r1
    30fc:	b8 f4       	brcc	.+46     	; 0x312c <main+0x322>
		{
			LCD_moveCursor(1,5);
    30fe:	81 e0       	ldi	r24, 0x01	; 1
    3100:	65 e0       	ldi	r22, 0x05	; 5
    3102:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
			LCD_displayString("     ");
    3106:	85 e7       	ldi	r24, 0x75	; 117
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
			LED_on(g_ledRedLed);
    310e:	80 91 83 01 	lds	r24, 0x0183
    3112:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			LED_on(g_ledGreenLed);
    3116:	80 91 84 01 	lds	r24, 0x0184
    311a:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			LED_off(g_ledBlueLed);
    311e:	80 91 85 01 	lds	r24, 0x0185
    3122:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			Buzzer_off();
    3126:	0e 94 92 07 	call	0xf24	; 0xf24 <Buzzer_off>
    312a:	96 ce       	rjmp	.-724    	; 0x2e58 <main+0x4e>
		}
		else if((distance_measured > 10) && (distance_measured <= 20))
    312c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    312e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3130:	8b 30       	cpi	r24, 0x0B	; 11
    3132:	91 05       	cpc	r25, r1
    3134:	e0 f0       	brcs	.+56     	; 0x316e <main+0x364>
    3136:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3138:	9e 8d       	ldd	r25, Y+30	; 0x1e
    313a:	85 31       	cpi	r24, 0x15	; 21
    313c:	91 05       	cpc	r25, r1
    313e:	b8 f4       	brcc	.+46     	; 0x316e <main+0x364>
		{
			LCD_moveCursor(1,5);
    3140:	81 e0       	ldi	r24, 0x01	; 1
    3142:	65 e0       	ldi	r22, 0x05	; 5
    3144:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
			LCD_displayString("     ");
    3148:	85 e7       	ldi	r24, 0x75	; 117
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
			LED_on(g_ledRedLed);
    3150:	80 91 83 01 	lds	r24, 0x0183
    3154:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <LED_on>
			LED_off(g_ledGreenLed);
    3158:	80 91 84 01 	lds	r24, 0x0184
    315c:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			LED_off(g_ledBlueLed);
    3160:	80 91 85 01 	lds	r24, 0x0185
    3164:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			Buzzer_off();
    3168:	0e 94 92 07 	call	0xf24	; 0xf24 <Buzzer_off>
    316c:	75 ce       	rjmp	.-790    	; 0x2e58 <main+0x4e>
		}
		else if(distance_measured > 20)
    316e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3170:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3172:	85 31       	cpi	r24, 0x15	; 21
    3174:	91 05       	cpc	r25, r1
    3176:	08 f4       	brcc	.+2      	; 0x317a <main+0x370>
    3178:	6f ce       	rjmp	.-802    	; 0x2e58 <main+0x4e>
		{
			LCD_moveCursor(1,5);
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	65 e0       	ldi	r22, 0x05	; 5
    317e:	0e 94 9d 15 	call	0x2b3a	; 0x2b3a <LCD_moveCursor>
			LCD_displayString("     ");
    3182:	85 e7       	ldi	r24, 0x75	; 117
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <LCD_displayString>
			LED_off(g_ledRedLed);
    318a:	80 91 83 01 	lds	r24, 0x0183
    318e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			LED_off(g_ledGreenLed);
    3192:	80 91 84 01 	lds	r24, 0x0184
    3196:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			LED_off(g_ledBlueLed);
    319a:	80 91 85 01 	lds	r24, 0x0185
    319e:	0e 94 d3 16 	call	0x2da6	; 0x2da6 <LED_off>
			Buzzer_off();
    31a2:	0e 94 92 07 	call	0xf24	; 0xf24 <Buzzer_off>
    31a6:	58 ce       	rjmp	.-848    	; 0x2e58 <main+0x4e>

000031a8 <Ultrasonic_edgeProcessing>:
uint8 g_ultrasonic_EdgesNUMBER = 0;
uint8 g_ultrasonic_ReadDistance = 0;
uint16 g_ultrasonic_HighTime = 0;

void Ultrasonic_edgeProcessing(void)
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	cd b7       	in	r28, 0x3d	; 61
    31ae:	de b7       	in	r29, 0x3e	; 62
	if(g_ultrasonic_EdgesNUMBER == 0)
    31b0:	80 91 88 01 	lds	r24, 0x0188
    31b4:	88 23       	and	r24, r24
    31b6:	59 f4       	brne	.+22     	; 0x31ce <Ultrasonic_edgeProcessing+0x26>
	{
		ICU_clearTimerValue();
    31b8:	0e 94 a1 0b 	call	0x1742	; 0x1742 <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING_EDGE);
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ICU_setEdgeDetectionType>
		g_ultrasonic_EdgesNUMBER++;
    31c2:	80 91 88 01 	lds	r24, 0x0188
    31c6:	8f 5f       	subi	r24, 0xFF	; 255
    31c8:	80 93 88 01 	sts	0x0188, r24
    31cc:	12 c0       	rjmp	.+36     	; 0x31f2 <Ultrasonic_edgeProcessing+0x4a>
	}
	else if(g_ultrasonic_EdgesNUMBER == 1)
    31ce:	80 91 88 01 	lds	r24, 0x0188
    31d2:	81 30       	cpi	r24, 0x01	; 1
    31d4:	71 f4       	brne	.+28     	; 0x31f2 <Ultrasonic_edgeProcessing+0x4a>
	{
		g_ultrasonic_HighTime = ICU_getInputCaptureValue();
    31d6:	0e 94 96 0b 	call	0x172c	; 0x172c <ICU_getInputCaptureValue>
    31da:	90 93 8b 01 	sts	0x018B, r25
    31de:	80 93 8a 01 	sts	0x018A, r24
		ICU_setEdgeDetectionType(RISING_EDGE);
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	0e 94 77 0b 	call	0x16ee	; 0x16ee <ICU_setEdgeDetectionType>
		g_ultrasonic_ReadDistance = 1;
    31e8:	81 e0       	ldi	r24, 0x01	; 1
    31ea:	80 93 89 01 	sts	0x0189, r24
		g_ultrasonic_EdgesNUMBER = 0;
    31ee:	10 92 88 01 	sts	0x0188, r1
	}

}
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <Ultrasonic_init>:

void Ultrasonic_init(void)
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <Ultrasonic_init+0x6>
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
	/*initialize ICU*/
	ICU_ConfigType g_ultrasonic_ICU_InitConfig = {F_CPU_8, RISING_EDGE};
    3202:	82 e0       	ldi	r24, 0x02	; 2
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	8a 83       	std	Y+2, r24	; 0x02
	ICU_init(&g_ultrasonic_ICU_InitConfig);
    320a:	ce 01       	movw	r24, r28
    320c:	01 96       	adiw	r24, 0x01	; 1
    320e:	0e 94 0f 0b 	call	0x161e	; 0x161e <ICU_init>

	ICU_setCallBack(Ultrasonic_edgeProcessing);
    3212:	84 ed       	ldi	r24, 0xD4	; 212
    3214:	98 e1       	ldi	r25, 0x18	; 24
    3216:	0e 94 65 0b 	call	0x16ca	; 0x16ca <ICU_setCallBack>

	/*set the direction of trigger pin to output*/
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, PIN_OUTPUT);
    321a:	83 e0       	ldi	r24, 0x03	; 3
    321c:	67 e0       	ldi	r22, 0x07	; 7
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 9e 07 	call	0xf3c	; 0xf3c <GPIO_setupPinDirection>

	/*initialize trigger pin to logic low */
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
    3224:	83 e0       	ldi	r24, 0x03	; 3
    3226:	67 e0       	ldi	r22, 0x07	; 7
    3228:	40 e0       	ldi	r20, 0x00	; 0
    322a:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
}
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    3238:	df 93       	push	r29
    323a:	cf 93       	push	r28
    323c:	cd b7       	in	r28, 0x3d	; 61
    323e:	de b7       	in	r29, 0x3e	; 62
    3240:	68 97       	sbiw	r28, 0x18	; 24
    3242:	0f b6       	in	r0, 0x3f	; 63
    3244:	f8 94       	cli
    3246:	de bf       	out	0x3e, r29	; 62
    3248:	0f be       	out	0x3f, r0	; 63
    324a:	cd bf       	out	0x3d, r28	; 61
	/*send a pulse on the trigger pin*/
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_HIGH);
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	67 e0       	ldi	r22, 0x07	; 7
    3250:	41 e0       	ldi	r20, 0x01	; 1
    3252:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	90 e0       	ldi	r25, 0x00	; 0
    325a:	a0 e2       	ldi	r26, 0x20	; 32
    325c:	b1 e4       	ldi	r27, 0x41	; 65
    325e:	8d 8b       	std	Y+21, r24	; 0x15
    3260:	9e 8b       	std	Y+22, r25	; 0x16
    3262:	af 8b       	std	Y+23, r26	; 0x17
    3264:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3266:	6d 89       	ldd	r22, Y+21	; 0x15
    3268:	7e 89       	ldd	r23, Y+22	; 0x16
    326a:	8f 89       	ldd	r24, Y+23	; 0x17
    326c:	98 8d       	ldd	r25, Y+24	; 0x18
    326e:	2b ea       	ldi	r18, 0xAB	; 171
    3270:	3a ea       	ldi	r19, 0xAA	; 170
    3272:	4a ea       	ldi	r20, 0xAA	; 170
    3274:	50 e4       	ldi	r21, 0x40	; 64
    3276:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	89 8b       	std	Y+17, r24	; 0x11
    3280:	9a 8b       	std	Y+18, r25	; 0x12
    3282:	ab 8b       	std	Y+19, r26	; 0x13
    3284:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3286:	69 89       	ldd	r22, Y+17	; 0x11
    3288:	7a 89       	ldd	r23, Y+18	; 0x12
    328a:	8b 89       	ldd	r24, Y+19	; 0x13
    328c:	9c 89       	ldd	r25, Y+20	; 0x14
    328e:	20 e0       	ldi	r18, 0x00	; 0
    3290:	30 e0       	ldi	r19, 0x00	; 0
    3292:	40 e8       	ldi	r20, 0x80	; 128
    3294:	5f e3       	ldi	r21, 0x3F	; 63
    3296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    329a:	88 23       	and	r24, r24
    329c:	1c f4       	brge	.+6      	; 0x32a4 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	88 8b       	std	Y+16, r24	; 0x10
    32a2:	91 c0       	rjmp	.+290    	; 0x33c6 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    32a4:	69 89       	ldd	r22, Y+17	; 0x11
    32a6:	7a 89       	ldd	r23, Y+18	; 0x12
    32a8:	8b 89       	ldd	r24, Y+19	; 0x13
    32aa:	9c 89       	ldd	r25, Y+20	; 0x14
    32ac:	20 e0       	ldi	r18, 0x00	; 0
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	4f e7       	ldi	r20, 0x7F	; 127
    32b2:	53 e4       	ldi	r21, 0x43	; 67
    32b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    32b8:	18 16       	cp	r1, r24
    32ba:	0c f0       	brlt	.+2      	; 0x32be <Ultrasonic_Trigger+0x86>
    32bc:	7b c0       	rjmp	.+246    	; 0x33b4 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    32be:	6d 89       	ldd	r22, Y+21	; 0x15
    32c0:	7e 89       	ldd	r23, Y+22	; 0x16
    32c2:	8f 89       	ldd	r24, Y+23	; 0x17
    32c4:	98 8d       	ldd	r25, Y+24	; 0x18
    32c6:	20 e0       	ldi	r18, 0x00	; 0
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	4a e7       	ldi	r20, 0x7A	; 122
    32cc:	54 e4       	ldi	r21, 0x44	; 68
    32ce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32d2:	dc 01       	movw	r26, r24
    32d4:	cb 01       	movw	r24, r22
    32d6:	8c 87       	std	Y+12, r24	; 0x0c
    32d8:	9d 87       	std	Y+13, r25	; 0x0d
    32da:	ae 87       	std	Y+14, r26	; 0x0e
    32dc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32de:	6c 85       	ldd	r22, Y+12	; 0x0c
    32e0:	7d 85       	ldd	r23, Y+13	; 0x0d
    32e2:	8e 85       	ldd	r24, Y+14	; 0x0e
    32e4:	9f 85       	ldd	r25, Y+15	; 0x0f
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	4a e7       	ldi	r20, 0x7A	; 122
    32ec:	55 e4       	ldi	r21, 0x45	; 69
    32ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f2:	dc 01       	movw	r26, r24
    32f4:	cb 01       	movw	r24, r22
    32f6:	88 87       	std	Y+8, r24	; 0x08
    32f8:	99 87       	std	Y+9, r25	; 0x09
    32fa:	aa 87       	std	Y+10, r26	; 0x0a
    32fc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    32fe:	68 85       	ldd	r22, Y+8	; 0x08
    3300:	79 85       	ldd	r23, Y+9	; 0x09
    3302:	8a 85       	ldd	r24, Y+10	; 0x0a
    3304:	9b 85       	ldd	r25, Y+11	; 0x0b
    3306:	20 e0       	ldi	r18, 0x00	; 0
    3308:	30 e0       	ldi	r19, 0x00	; 0
    330a:	40 e8       	ldi	r20, 0x80	; 128
    330c:	5f e3       	ldi	r21, 0x3F	; 63
    330e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3312:	88 23       	and	r24, r24
    3314:	2c f4       	brge	.+10     	; 0x3320 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	9f 83       	std	Y+7, r25	; 0x07
    331c:	8e 83       	std	Y+6, r24	; 0x06
    331e:	3f c0       	rjmp	.+126    	; 0x339e <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    3320:	68 85       	ldd	r22, Y+8	; 0x08
    3322:	79 85       	ldd	r23, Y+9	; 0x09
    3324:	8a 85       	ldd	r24, Y+10	; 0x0a
    3326:	9b 85       	ldd	r25, Y+11	; 0x0b
    3328:	20 e0       	ldi	r18, 0x00	; 0
    332a:	3f ef       	ldi	r19, 0xFF	; 255
    332c:	4f e7       	ldi	r20, 0x7F	; 127
    332e:	57 e4       	ldi	r21, 0x47	; 71
    3330:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3334:	18 16       	cp	r1, r24
    3336:	4c f5       	brge	.+82     	; 0x338a <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3338:	6c 85       	ldd	r22, Y+12	; 0x0c
    333a:	7d 85       	ldd	r23, Y+13	; 0x0d
    333c:	8e 85       	ldd	r24, Y+14	; 0x0e
    333e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	30 e0       	ldi	r19, 0x00	; 0
    3344:	40 e2       	ldi	r20, 0x20	; 32
    3346:	51 e4       	ldi	r21, 0x41	; 65
    3348:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334c:	dc 01       	movw	r26, r24
    334e:	cb 01       	movw	r24, r22
    3350:	bc 01       	movw	r22, r24
    3352:	cd 01       	movw	r24, r26
    3354:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3358:	dc 01       	movw	r26, r24
    335a:	cb 01       	movw	r24, r22
    335c:	9f 83       	std	Y+7, r25	; 0x07
    335e:	8e 83       	std	Y+6, r24	; 0x06
    3360:	0f c0       	rjmp	.+30     	; 0x3380 <Ultrasonic_Trigger+0x148>
    3362:	80 e9       	ldi	r24, 0x90	; 144
    3364:	91 e0       	ldi	r25, 0x01	; 1
    3366:	9d 83       	std	Y+5, r25	; 0x05
    3368:	8c 83       	std	Y+4, r24	; 0x04
    336a:	8c 81       	ldd	r24, Y+4	; 0x04
    336c:	9d 81       	ldd	r25, Y+5	; 0x05
    336e:	01 97       	sbiw	r24, 0x01	; 1
    3370:	f1 f7       	brne	.-4      	; 0x336e <Ultrasonic_Trigger+0x136>
    3372:	9d 83       	std	Y+5, r25	; 0x05
    3374:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3376:	8e 81       	ldd	r24, Y+6	; 0x06
    3378:	9f 81       	ldd	r25, Y+7	; 0x07
    337a:	01 97       	sbiw	r24, 0x01	; 1
    337c:	9f 83       	std	Y+7, r25	; 0x07
    337e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3380:	8e 81       	ldd	r24, Y+6	; 0x06
    3382:	9f 81       	ldd	r25, Y+7	; 0x07
    3384:	00 97       	sbiw	r24, 0x00	; 0
    3386:	69 f7       	brne	.-38     	; 0x3362 <Ultrasonic_Trigger+0x12a>
    3388:	24 c0       	rjmp	.+72     	; 0x33d2 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    338a:	68 85       	ldd	r22, Y+8	; 0x08
    338c:	79 85       	ldd	r23, Y+9	; 0x09
    338e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3390:	9b 85       	ldd	r25, Y+11	; 0x0b
    3392:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3396:	dc 01       	movw	r26, r24
    3398:	cb 01       	movw	r24, r22
    339a:	9f 83       	std	Y+7, r25	; 0x07
    339c:	8e 83       	std	Y+6, r24	; 0x06
    339e:	8e 81       	ldd	r24, Y+6	; 0x06
    33a0:	9f 81       	ldd	r25, Y+7	; 0x07
    33a2:	9b 83       	std	Y+3, r25	; 0x03
    33a4:	8a 83       	std	Y+2, r24	; 0x02
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	9b 81       	ldd	r25, Y+3	; 0x03
    33aa:	01 97       	sbiw	r24, 0x01	; 1
    33ac:	f1 f7       	brne	.-4      	; 0x33aa <Ultrasonic_Trigger+0x172>
    33ae:	9b 83       	std	Y+3, r25	; 0x03
    33b0:	8a 83       	std	Y+2, r24	; 0x02
    33b2:	0f c0       	rjmp	.+30     	; 0x33d2 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    33b4:	69 89       	ldd	r22, Y+17	; 0x11
    33b6:	7a 89       	ldd	r23, Y+18	; 0x12
    33b8:	8b 89       	ldd	r24, Y+19	; 0x13
    33ba:	9c 89       	ldd	r25, Y+20	; 0x14
    33bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33c0:	dc 01       	movw	r26, r24
    33c2:	cb 01       	movw	r24, r22
    33c4:	88 8b       	std	Y+16, r24	; 0x10
    33c6:	88 89       	ldd	r24, Y+16	; 0x10
    33c8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    33ca:	89 81       	ldd	r24, Y+1	; 0x01
    33cc:	8a 95       	dec	r24
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <Ultrasonic_Trigger+0x194>
    33d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	GPIO_writePin(ULTRASONIC_TRIGGER_PORT, ULTRASONIC_TRIGGER_PIN, LOGIC_LOW);
    33d2:	83 e0       	ldi	r24, 0x03	; 3
    33d4:	67 e0       	ldi	r22, 0x07	; 7
    33d6:	40 e0       	ldi	r20, 0x00	; 0
    33d8:	0e 94 89 08 	call	0x1112	; 0x1112 <GPIO_writePin>

}
    33dc:	68 96       	adiw	r28, 0x18	; 24
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	f8 94       	cli
    33e2:	de bf       	out	0x3e, r29	; 62
    33e4:	0f be       	out	0x3f, r0	; 63
    33e6:	cd bf       	out	0x3d, r28	; 61
    33e8:	cf 91       	pop	r28
    33ea:	df 91       	pop	r29
    33ec:	08 95       	ret

000033ee <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void)
{
    33ee:	df 93       	push	r29
    33f0:	cf 93       	push	r28
    33f2:	00 d0       	rcall	.+0      	; 0x33f4 <Ultrasonic_readDistance+0x6>
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
	uint16 distance = 0;
    33f8:	1a 82       	std	Y+2, r1	; 0x02
    33fa:	19 82       	std	Y+1, r1	; 0x01

	Ultrasonic_Trigger();
    33fc:	0e 94 1c 19 	call	0x3238	; 0x3238 <Ultrasonic_Trigger>

	while(g_ultrasonic_ReadDistance != 1){
    3400:	80 91 89 01 	lds	r24, 0x0189
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	e1 f7       	brne	.-8      	; 0x3400 <Ultrasonic_readDistance+0x12>

	}

	if(g_ultrasonic_ReadDistance == 1)
    3408:	80 91 89 01 	lds	r24, 0x0189
    340c:	81 30       	cpi	r24, 0x01	; 1
    340e:	59 f5       	brne	.+86     	; 0x3466 <Ultrasonic_readDistance+0x78>
	{
		distance = (g_ultrasonic_HighTime / 117.6 )+1;
    3410:	80 91 8a 01 	lds	r24, 0x018A
    3414:	90 91 8b 01 	lds	r25, 0x018B
    3418:	cc 01       	movw	r24, r24
    341a:	a0 e0       	ldi	r26, 0x00	; 0
    341c:	b0 e0       	ldi	r27, 0x00	; 0
    341e:	bc 01       	movw	r22, r24
    3420:	cd 01       	movw	r24, r26
    3422:	0e 94 07 05 	call	0xa0e	; 0xa0e <__floatunsisf>
    3426:	dc 01       	movw	r26, r24
    3428:	cb 01       	movw	r24, r22
    342a:	bc 01       	movw	r22, r24
    342c:	cd 01       	movw	r24, r26
    342e:	23 e3       	ldi	r18, 0x33	; 51
    3430:	33 e3       	ldi	r19, 0x33	; 51
    3432:	4b ee       	ldi	r20, 0xEB	; 235
    3434:	52 e4       	ldi	r21, 0x42	; 66
    3436:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    343a:	dc 01       	movw	r26, r24
    343c:	cb 01       	movw	r24, r22
    343e:	bc 01       	movw	r22, r24
    3440:	cd 01       	movw	r24, r26
    3442:	20 e0       	ldi	r18, 0x00	; 0
    3444:	30 e0       	ldi	r19, 0x00	; 0
    3446:	40 e8       	ldi	r20, 0x80	; 128
    3448:	5f e3       	ldi	r21, 0x3F	; 63
    344a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	bc 01       	movw	r22, r24
    3454:	cd 01       	movw	r24, r26
    3456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	9a 83       	std	Y+2, r25	; 0x02
    3460:	89 83       	std	Y+1, r24	; 0x01
		g_ultrasonic_ReadDistance = 0;
    3462:	10 92 89 01 	sts	0x0189, r1
	}
	if(distance>66)
    3466:	89 81       	ldd	r24, Y+1	; 0x01
    3468:	9a 81       	ldd	r25, Y+2	; 0x02
    346a:	83 34       	cpi	r24, 0x43	; 67
    346c:	91 05       	cpc	r25, r1
    346e:	c8 f0       	brcs	.+50     	; 0x34a2 <Ultrasonic_readDistance+0xb4>
	{
		distance=distance+1;
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	01 96       	adiw	r24, 0x01	; 1
    3476:	9a 83       	std	Y+2, r25	; 0x02
    3478:	89 83       	std	Y+1, r24	; 0x01
		if(distance>140)
    347a:	89 81       	ldd	r24, Y+1	; 0x01
    347c:	9a 81       	ldd	r25, Y+2	; 0x02
    347e:	8d 38       	cpi	r24, 0x8D	; 141
    3480:	91 05       	cpc	r25, r1
    3482:	78 f0       	brcs	.+30     	; 0x34a2 <Ultrasonic_readDistance+0xb4>
		{
			distance=distance+1;
    3484:	89 81       	ldd	r24, Y+1	; 0x01
    3486:	9a 81       	ldd	r25, Y+2	; 0x02
    3488:	01 96       	adiw	r24, 0x01	; 1
    348a:	9a 83       	std	Y+2, r25	; 0x02
    348c:	89 83       	std	Y+1, r24	; 0x01
			if(distance>213)
    348e:	89 81       	ldd	r24, Y+1	; 0x01
    3490:	9a 81       	ldd	r25, Y+2	; 0x02
    3492:	86 3d       	cpi	r24, 0xD6	; 214
    3494:	91 05       	cpc	r25, r1
    3496:	28 f0       	brcs	.+10     	; 0x34a2 <Ultrasonic_readDistance+0xb4>
			{
				distance=distance+1;
    3498:	89 81       	ldd	r24, Y+1	; 0x01
    349a:	9a 81       	ldd	r25, Y+2	; 0x02
    349c:	01 96       	adiw	r24, 0x01	; 1
    349e:	9a 83       	std	Y+2, r25	; 0x02
    34a0:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	}


	return distance;
    34a2:	89 81       	ldd	r24, Y+1	; 0x01
    34a4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    34a6:	0f 90       	pop	r0
    34a8:	0f 90       	pop	r0
    34aa:	cf 91       	pop	r28
    34ac:	df 91       	pop	r29
    34ae:	08 95       	ret

000034b0 <__prologue_saves__>:
    34b0:	2f 92       	push	r2
    34b2:	3f 92       	push	r3
    34b4:	4f 92       	push	r4
    34b6:	5f 92       	push	r5
    34b8:	6f 92       	push	r6
    34ba:	7f 92       	push	r7
    34bc:	8f 92       	push	r8
    34be:	9f 92       	push	r9
    34c0:	af 92       	push	r10
    34c2:	bf 92       	push	r11
    34c4:	cf 92       	push	r12
    34c6:	df 92       	push	r13
    34c8:	ef 92       	push	r14
    34ca:	ff 92       	push	r15
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	cd b7       	in	r28, 0x3d	; 61
    34d6:	de b7       	in	r29, 0x3e	; 62
    34d8:	ca 1b       	sub	r28, r26
    34da:	db 0b       	sbc	r29, r27
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	09 94       	ijmp

000034e8 <__epilogue_restores__>:
    34e8:	2a 88       	ldd	r2, Y+18	; 0x12
    34ea:	39 88       	ldd	r3, Y+17	; 0x11
    34ec:	48 88       	ldd	r4, Y+16	; 0x10
    34ee:	5f 84       	ldd	r5, Y+15	; 0x0f
    34f0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34f2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34f4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34f6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34f8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34fa:	b9 84       	ldd	r11, Y+9	; 0x09
    34fc:	c8 84       	ldd	r12, Y+8	; 0x08
    34fe:	df 80       	ldd	r13, Y+7	; 0x07
    3500:	ee 80       	ldd	r14, Y+6	; 0x06
    3502:	fd 80       	ldd	r15, Y+5	; 0x05
    3504:	0c 81       	ldd	r16, Y+4	; 0x04
    3506:	1b 81       	ldd	r17, Y+3	; 0x03
    3508:	aa 81       	ldd	r26, Y+2	; 0x02
    350a:	b9 81       	ldd	r27, Y+1	; 0x01
    350c:	ce 0f       	add	r28, r30
    350e:	d1 1d       	adc	r29, r1
    3510:	0f b6       	in	r0, 0x3f	; 63
    3512:	f8 94       	cli
    3514:	de bf       	out	0x3e, r29	; 62
    3516:	0f be       	out	0x3f, r0	; 63
    3518:	cd bf       	out	0x3d, r28	; 61
    351a:	ed 01       	movw	r28, r26
    351c:	08 95       	ret

0000351e <itoa>:
    351e:	fb 01       	movw	r30, r22
    3520:	9f 01       	movw	r18, r30
    3522:	e8 94       	clt
    3524:	42 30       	cpi	r20, 0x02	; 2
    3526:	c4 f0       	brlt	.+48     	; 0x3558 <itoa+0x3a>
    3528:	45 32       	cpi	r20, 0x25	; 37
    352a:	b4 f4       	brge	.+44     	; 0x3558 <itoa+0x3a>
    352c:	4a 30       	cpi	r20, 0x0A	; 10
    352e:	29 f4       	brne	.+10     	; 0x353a <itoa+0x1c>
    3530:	97 fb       	bst	r25, 7
    3532:	1e f4       	brtc	.+6      	; 0x353a <itoa+0x1c>
    3534:	90 95       	com	r25
    3536:	81 95       	neg	r24
    3538:	9f 4f       	sbci	r25, 0xFF	; 255
    353a:	64 2f       	mov	r22, r20
    353c:	77 27       	eor	r23, r23
    353e:	0e 94 c0 1a 	call	0x3580	; 0x3580 <__udivmodhi4>
    3542:	80 5d       	subi	r24, 0xD0	; 208
    3544:	8a 33       	cpi	r24, 0x3A	; 58
    3546:	0c f0       	brlt	.+2      	; 0x354a <itoa+0x2c>
    3548:	89 5d       	subi	r24, 0xD9	; 217
    354a:	81 93       	st	Z+, r24
    354c:	cb 01       	movw	r24, r22
    354e:	00 97       	sbiw	r24, 0x00	; 0
    3550:	a1 f7       	brne	.-24     	; 0x353a <itoa+0x1c>
    3552:	16 f4       	brtc	.+4      	; 0x3558 <itoa+0x3a>
    3554:	5d e2       	ldi	r21, 0x2D	; 45
    3556:	51 93       	st	Z+, r21
    3558:	10 82       	st	Z, r1
    355a:	c9 01       	movw	r24, r18
    355c:	0c 94 b0 1a 	jmp	0x3560	; 0x3560 <strrev>

00003560 <strrev>:
    3560:	dc 01       	movw	r26, r24
    3562:	fc 01       	movw	r30, r24
    3564:	67 2f       	mov	r22, r23
    3566:	71 91       	ld	r23, Z+
    3568:	77 23       	and	r23, r23
    356a:	e1 f7       	brne	.-8      	; 0x3564 <strrev+0x4>
    356c:	32 97       	sbiw	r30, 0x02	; 2
    356e:	04 c0       	rjmp	.+8      	; 0x3578 <strrev+0x18>
    3570:	7c 91       	ld	r23, X
    3572:	6d 93       	st	X+, r22
    3574:	70 83       	st	Z, r23
    3576:	62 91       	ld	r22, -Z
    3578:	ae 17       	cp	r26, r30
    357a:	bf 07       	cpc	r27, r31
    357c:	c8 f3       	brcs	.-14     	; 0x3570 <strrev+0x10>
    357e:	08 95       	ret

00003580 <__udivmodhi4>:
    3580:	aa 1b       	sub	r26, r26
    3582:	bb 1b       	sub	r27, r27
    3584:	51 e1       	ldi	r21, 0x11	; 17
    3586:	07 c0       	rjmp	.+14     	; 0x3596 <__udivmodhi4_ep>

00003588 <__udivmodhi4_loop>:
    3588:	aa 1f       	adc	r26, r26
    358a:	bb 1f       	adc	r27, r27
    358c:	a6 17       	cp	r26, r22
    358e:	b7 07       	cpc	r27, r23
    3590:	10 f0       	brcs	.+4      	; 0x3596 <__udivmodhi4_ep>
    3592:	a6 1b       	sub	r26, r22
    3594:	b7 0b       	sbc	r27, r23

00003596 <__udivmodhi4_ep>:
    3596:	88 1f       	adc	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	5a 95       	dec	r21
    359c:	a9 f7       	brne	.-22     	; 0x3588 <__udivmodhi4_loop>
    359e:	80 95       	com	r24
    35a0:	90 95       	com	r25
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	08 95       	ret

000035a8 <_exit>:
    35a8:	f8 94       	cli

000035aa <__stop_program>:
    35aa:	ff cf       	rjmp	.-2      	; 0x35aa <__stop_program>
